<?xml version="1.0" encoding="utf-8"?> 
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

	<Type Name="muu::half">
		<Intrinsic Name="sign" Expression="(((unsigned)impl_ &amp; 0x8000u) &gt;&gt; 15)" />
		<Intrinsic Name="exponent" Expression="(((unsigned)impl_ &amp; 0x7C00u) &gt;&gt; 10)" />
		<Intrinsic Name="mantissa" Expression="((unsigned)impl_ &amp; 0x03FFu)" />
		<Intrinsic Name="infinity" Expression="exponent() == 0b11111u &amp;&amp; mantissa() == 0u" />
		<Intrinsic Name="nan" Expression="exponent() == 0b11111u &amp;&amp; mantissa() != 0u" />
		<DisplayString Condition="nan()">nan</DisplayString>
		<DisplayString Condition="infinity() &amp;&amp; sign() == 1u">-inf</DisplayString>
		<DisplayString Condition="infinity()">inf</DisplayString>
		<DisplayString Condition="exponent() == 0u &amp;&amp; mantissa() == 0u &amp;&amp; sign() == 1u">-0.00000000</DisplayString>
		<DisplayString Condition="exponent() == 0u &amp;&amp; mantissa() == 0u">0.00000000</DisplayString>
		<DisplayString Condition="exponent() == 0u &amp;&amp; mantissa() != 0u">#DEN</DisplayString>
		<DisplayString Condition="exponent() == 0u">   { (1.0f / (1 &lt;&lt; 14)) * (-2 * sign() + 1.0f) * (mantissa() / 1024.0f) }</DisplayString>
		<DisplayString Condition="exponent() &lt; 15u">{ (1.0f / (1 &lt;&lt; (15u - exponent()))) * (-2 * (signed)sign() + 1.0f) * (1.0f + mantissa() / 1024.0f) }</DisplayString>
		<DisplayString Condition="exponent() &gt;= 15u">{ (1 &lt;&lt; (exponent() - 15u)) * (-2 * (signed)sign() + 1.0f) * (1.0f + mantissa() / 1024.0f) }</DisplayString>
		<DisplayString>Raw bits: {impl_,bb}</DisplayString>
		<Expand>
			<Synthetic Name="[sign]">
				<DisplayString>{(unsigned short)sign(),bb} ({sign(),d})</DisplayString>
			</Synthetic>
			<Synthetic Name="[exponent]">
				<DisplayString>{(unsigned short)exponent(),bb} ({exponent(),d})</DisplayString>
			</Synthetic>
			<Synthetic Name="[mantissa]">
				<DisplayString>{(unsigned short)mantissa(),bb} ({mantissa(),d})</DisplayString>
			</Synthetic>
		</Expand>
	</Type>

	<Type Name="muu::tagged_ptr&lt;*,*&gt;">
		<Intrinsic Name="offset_64" Expression="16" />
		<Intrinsic Name="offset_32" Expression="0" />

		<Intrinsic Name="tag_mask_64" Expression="
			(1ull
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 1  ? (1ull &lt;&lt;  1) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 2  ? (1ull &lt;&lt;  2) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 3  ? (1ull &lt;&lt;  3) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 4  ? (1ull &lt;&lt;  4) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 5  ? (1ull &lt;&lt;  5) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 6  ? (1ull &lt;&lt;  6) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 7  ? (1ull &lt;&lt;  7) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 8  ? (1ull &lt;&lt;  8) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 9  ? (1ull &lt;&lt;  9) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 10 ? (1ull &lt;&lt; 10) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 11 ? (1ull &lt;&lt; 11) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 12 ? (1ull &lt;&lt; 12) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 13 ? (1ull &lt;&lt; 13) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 14 ? (1ull &lt;&lt; 14) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 15 ? (1ull &lt;&lt; 15) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 16 ? (1ull &lt;&lt; 16) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 17 ? (1ull &lt;&lt; 17) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 18 ? (1ull &lt;&lt; 18) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 19 ? (1ull &lt;&lt; 19) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 20 ? (1ull &lt;&lt; 20) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 21 ? (1ull &lt;&lt; 21) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 22 ? (1ull &lt;&lt; 22) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 23 ? (1ull &lt;&lt; 23) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 24 ? (1ull &lt;&lt; 24) : 0ull)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_64()) > 25 ? (1ull &lt;&lt; 25) : 0ull))
		" />
		
		<Intrinsic Name="tag_mask_32" Expression="
			(1u
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 1  ? (1u &lt;&lt;  1) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 2  ? (1u &lt;&lt;  2) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 3  ? (1u &lt;&lt;  3) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 4  ? (1u &lt;&lt;  4) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 5  ? (1u &lt;&lt;  5) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 6  ? (1u &lt;&lt;  6) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 7  ? (1u &lt;&lt;  7) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 8  ? (1u &lt;&lt;  8) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 9  ? (1u &lt;&lt;  9) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 10 ? (1u &lt;&lt; 10) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 11 ? (1u &lt;&lt; 11) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 12 ? (1u &lt;&lt; 12) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 13 ? (1u &lt;&lt; 13) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 14 ? (1u &lt;&lt; 14) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 15 ? (1u &lt;&lt; 15) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 16 ? (1u &lt;&lt; 16) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 17 ? (1u &lt;&lt; 17) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 18 ? (1u &lt;&lt; 18) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 19 ? (1u &lt;&lt; 19) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 20 ? (1u &lt;&lt; 20) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 21 ? (1u &lt;&lt; 21) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 22 ? (1u &lt;&lt; 22) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 23 ? (1u &lt;&lt; 23) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 24 ? (1u &lt;&lt; 24) : 0u)
			| ((((__log2($T2) > 1 ? __log2($T2) : 1) - 1) + offset_32()) > 25 ? (1u &lt;&lt; 25) : 0u))
		" />

		<Intrinsic Name="value_mask_64" Expression="(~tag_mask_64())" />
		<Intrinsic Name="value_mask_32" Expression="(~tag_mask_32())" />

		<!-- 64-bit -->
		<DisplayString Condition="sizeof(void*) == 8">
			{(bits &amp; value_mask_64()) >> offset_64(), x}
		</DisplayString>

		<!-- 32-bit -->
		<DisplayString Condition="sizeof(void*) == 4">
			{(bits &amp; value_mask_32()) >> offset_32(), x}
		</DisplayString>

		<Expand>
			<!-- 64-bit -->
			<Item Name="[value]" Condition="sizeof(void*) == 8">
				($T1*)((bits &amp; value_mask_64()) >> offset_64())
			</Item>
			<Synthetic Name="[tag]" Condition="sizeof(void*) == 8">
				<DisplayString>
					{(bits &amp; tag_mask_64()) >> offset_64(), bb}
				</DisplayString>
			</Synthetic>
	  
			<!-- 32-bit -->
			<Item Name="[value]" Condition="sizeof(void*) == 4">
				($T1*)((bits &amp; value_mask_32()) >> offset_32())
			</Item>
			<Synthetic Name="[tag]" Condition="sizeof(void*) == 4">
				<DisplayString>
					{(bits &amp; tag_mask_32()) >> offset_32(), bb}
				</DisplayString>
			</Synthetic>
		</Expand>
	</Type>

	<Type Name="muu::uuid">
		<Intrinsic Name="b0" Expression="((unsigned)bytes.value[0])" />
		<Intrinsic Name="b1" Expression="((unsigned)bytes.value[1])" />
		<Intrinsic Name="b2" Expression="((unsigned)bytes.value[2])" />
		<Intrinsic Name="b3" Expression="((unsigned)bytes.value[3])" />
		<Intrinsic Name="b4" Expression="((unsigned)bytes.value[4])" />
		<Intrinsic Name="b5" Expression="((unsigned)bytes.value[5])" />
		<Intrinsic Name="b6" Expression="((unsigned)bytes.value[6])" />
		<Intrinsic Name="b7" Expression="((unsigned)bytes.value[7])" />
		<Intrinsic Name="b8" Expression="((unsigned)bytes.value[8])" />
		<Intrinsic Name="b9" Expression="((unsigned)bytes.value[9])" />
		<Intrinsic Name="b10" Expression="((unsigned)bytes.value[10])" />
		<Intrinsic Name="b11" Expression="((unsigned)bytes.value[11])" />
		<Intrinsic Name="b12" Expression="((unsigned)bytes.value[12])" />
		<Intrinsic Name="b13" Expression="((unsigned)bytes.value[13])" />
		<Intrinsic Name="b14" Expression="((unsigned)bytes.value[14])" />
		<Intrinsic Name="b15" Expression="((unsigned)bytes.value[15])" />
		<Intrinsic Name="time_low" Expression="((b0() &lt;&lt; 24) | (b1() &lt;&lt; 16) | (b2() &lt;&lt; 8) | b3())" />
		<Intrinsic Name="time_mid" Expression="(unsigned short)(((b4() &lt;&lt; 8) | b5()))" />
		<Intrinsic Name="time_high" Expression="(unsigned short)(((b6() &lt;&lt; 8) | b7()))" />
		<Intrinsic Name="clock_seq" Expression="(unsigned short)(((b8() &lt;&lt; 8) | b9()))" />
		<Intrinsic Name="node_high" Expression="(unsigned short)(((b10() &lt;&lt; 8) | b11()))" />
		<Intrinsic Name="node_low" Expression="((b12() &lt;&lt; 24) | (b13() &lt;&lt; 16) | (b14() &lt;&lt; 8) | b15())" />
		<Intrinsic Name="version" Expression="((b6() &amp; 0b11110000u) >> 4)" />
		<Intrinsic Name="variant" Expression="((b8() &amp; 0b11100000u) >> 5)" />
		<DisplayString>
			{{{time_low(),Xb}-{time_mid(),Xb}-{time_high(),Xb}-{clock_seq(),Xb}-{node_high(),Xb}{node_low(),Xb}}}
		</DisplayString>
		<Expand>
			<Synthetic Name="[version]">
				<DisplayString Condition="version() &gt;= 5u">{muu::uuid_version::unknown}</DisplayString>
				<DisplayString>{(muu::uuid_version)version()}</DisplayString>
			</Synthetic>
			<Synthetic Name="[variant]">
				<DisplayString Condition="variant() == 0u">{muu::uuid_variant::none}</DisplayString>
				<DisplayString Condition="variant() &lt;= 0b011u">{muu::uuid_variant::reserved_ncs}</DisplayString>
				<DisplayString Condition="(variant() | 0b101u) == 0b101u">{muu::uuid_variant::standard}</DisplayString>
				<DisplayString Condition="variant() == 0b110">{muu::uuid_variant::reserved_microsoft}</DisplayString>
				<DisplayString>{muu::uuid_variant::reserved_future}</DisplayString>
			</Synthetic>
			<ArrayItems>
				<Size>16</Size>
				<ValuePointer>&amp;bytes.value[0]</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="muu::compressed_pair&lt;*, *&gt;">
		<Intrinsic Name="mode" Expression="(int)first_is_subclass_ + (int)second_is_subclass_ * 2" />
		
		<DisplayString IncludeView="noparens" Condition="mode() == 0" Optional="true">{first_}, {second_}</DisplayString>
		<DisplayString IncludeView="noparens" Condition="mode() == 1" Optional="true">{*($T1 *)this}, {second_}</DisplayString>
		<DisplayString IncludeView="noparens" Condition="mode() == 2" Optional="true">{first_}, {*($T2 *)this}</DisplayString>
		<DisplayString IncludeView="noparens" Condition="mode() == 3" Optional="true">{*($T1 *)this}, {*($T2 *)this}</DisplayString>

		<DisplayString ExcludeView="noparens" Condition="mode() == 0" Optional="true">({first_}, {second_})</DisplayString>
		<DisplayString ExcludeView="noparens" Condition="mode() == 1" Optional="true">({*($T1 *)this}, {second_})</DisplayString>
		<DisplayString ExcludeView="noparens" Condition="mode() == 2" Optional="true">({first_}, {*($T2 *)this})</DisplayString>
		<DisplayString ExcludeView="noparens" Condition="mode() == 3" Optional="true">({*($T1 *)this}, {*($T2 *)this})</DisplayString>

		<Expand>
			<Item Name="first"  Condition="mode() == 0 || mode() == 2" Optional="true">first_</Item>
			<Item Name="first"  Condition="mode() == 1 || mode() == 3" Optional="true">*($T1 *)this</Item>
			<Item Name="second" Condition="mode() == 0 || mode() == 1" Optional="true">second_</Item>
			<Item Name="second" Condition="mode() == 2 || mode() == 3" Optional="true">*($T2 *)this</Item>
		</Expand>
	</Type>

	<Type Name="muu::span&lt;*, 0, *&gt;" Priority="High">
		<DisplayString>{{ size=0, align={alignment} }}</DisplayString>
		<Expand>
			<Item Name="[size]">0</Item>
			<Item Name="[align]">alignment</Item>
			<Item Name="[ptr]">ptr_</Item>
		</Expand>
	</Type>
	
	<Type Name="muu::span&lt;*, -1, *&gt;" Priority="Medium">
		<DisplayString>{{ size={extent_}, align={alignment} }}</DisplayString>
		<Expand>
			<Item Name="[size]">extent_</Item>
			<Item Name="[align]">alignment</Item>
			<Item Name="[ptr]">ptr_</Item>
			<ArrayItems>
				<Size>extent_</Size>
				<ValuePointer>(($T1*)ptr_)</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="muu::span&lt;*, *, *&gt;" Priority="Low">
		<DisplayString>{{ size={$T2}, align={alignment} }}</DisplayString>
		<Expand>
			<Item Name="[size]">$T2</Item>
			<Item Name="[align]">alignment</Item>
			<Item Name="[ptr]">ptr_</Item>
			<ArrayItems>
				<Size>$T2</Size>
				<ValuePointer>(($T1*)ptr_)</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="muu::string_param">
		<Intrinsic Name="string" Expression="(std::string*)&amp;storage" />
		<Intrinsic Name="wstring" Expression="(std::wstring*)&amp;storage" />
		<Intrinsic Name="u8string" Expression="(std::u8string*)&amp;storage" />
		<Intrinsic Name="u16string" Expression="(std::u16string*)&amp;storage" />
		<Intrinsic Name="u32string" Expression="(std::u32string*)&amp;storage" />
		<Intrinsic Name="string_view" Expression="(std::string_view*)&amp;storage" />
		<Intrinsic Name="wstring_view" Expression="(std::wstring_view*)&amp;storage" />
		<Intrinsic Name="u8string_view" Expression="(std::u8string_view*)&amp;storage" />
		<Intrinsic Name="u16string_view" Expression="(std::u16string_view*)&amp;storage" />
		<Intrinsic Name="u32string_view" Expression="(std::u32string_view*)&amp;storage" />
		<Intrinsic Name="owning" Expression="mode_ &gt; 0 &amp;&amp; mode_ &lt; 128" />
		<DisplayString Condition="mode_ == 0">""</DisplayString>
		<DisplayString Condition="mode_ == 1">{*string(),na}</DisplayString>
		<DisplayString Condition="mode_ == 2">{*wstring(),su}</DisplayString>
		<DisplayString Condition="mode_ == 3">{*u8string(),s8}</DisplayString>
		<DisplayString Condition="mode_ == 4">{*u16string(),su}</DisplayString>
		<DisplayString Condition="mode_ == 5">{*u32string(),s32}</DisplayString>
		<DisplayString Condition="mode_ == 128+1">{*string_view(),na}</DisplayString>
		<DisplayString Condition="mode_ == 128+2">{*wstring_view(),su}</DisplayString>
		<DisplayString Condition="mode_ == 128+3">{*u8string_view(),s8}</DisplayString>
		<DisplayString Condition="mode_ == 128+4">{*u16string_view(),su}</DisplayString>
		<DisplayString Condition="mode_ == 128+5">{*u32string_view(),s32}</DisplayString>
		<DisplayString>NATVIS ERROR</DisplayString>
		<StringView Condition="mode_ == 1">*string(),na</StringView>
		<StringView Condition="mode_ == 2">*wstring(),su</StringView>
		<StringView Condition="mode_ == 3">*u8string(),s8</StringView>
		<StringView Condition="mode_ == 4">*u16string(),su</StringView>
		<StringView Condition="mode_ == 5">*u32string(),s32</StringView>
		<Expand>
			<Item Name="[mode]">(int)mode_</Item>
			<Item Name="[owning]">owning()</Item>
		</Expand>
	</Type>

	<Type Name="muu::fixed_string&lt;char,*&gt;">
		<DisplayString Condition="$T1 == 0">""</DisplayString>
		<DisplayString Condition="$T1 != 0">{_chars_,na}</DisplayString>
		<Expand>
			<Item Name="[size]" ExcludeView="simple">$T1</Item>
			<ArrayItems>
				<Size>$T1</Size>
				<ValuePointer>_chars_</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="muu::fixed_string&lt;wchar_t,*&gt;">
		<DisplayString Condition="$T1 == 0">""</DisplayString>
		<DisplayString Condition="$T1 != 0">{_chars_,su}</DisplayString>
		<Expand>
			<Item Name="[size]" ExcludeView="simple">$T1</Item>
			<ArrayItems>
				<Size>$T1</Size>
				<ValuePointer>_chars_</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="muu::fixed_string&lt;char8_t,*&gt;">
		<DisplayString Condition="$T1 == 0">""</DisplayString>
		<DisplayString Condition="$T1 != 0">{_chars_,s8}</DisplayString>
		<Expand>
			<Item Name="[size]" ExcludeView="simple">$T1</Item>
			<ArrayItems>
				<Size>$T1</Size>
				<ValuePointer>_chars_</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="muu::fixed_string&lt;char16_t,*&gt;">
		<DisplayString Condition="$T1 == 0">""</DisplayString>
		<DisplayString Condition="$T1 != 0">{_chars_,su}</DisplayString>
		<Expand>
			<Item Name="[size]" ExcludeView="simple">$T1</Item>
			<ArrayItems>
				<Size>$T1</Size>
				<ValuePointer>_chars_</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="muu::fixed_string&lt;char32_t,*&gt;">
		<DisplayString Condition="$T1 == 0">""</DisplayString>
		<DisplayString Condition="$T1 != 0">{_chars_,s32}</DisplayString>
		<Expand>
			<Item Name="[size]" ExcludeView="simple">$T1</Item>
			<ArrayItems>
				<Size>$T1</Size>
				<ValuePointer>_chars_</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="muu::vector&lt;*, 1&gt;">
		<DisplayString>{{ {x} }}</DisplayString>
		<Expand>
			<Item Name="x">x</Item>
		</Expand>
	</Type>

	<Type Name="muu::vector&lt;*, 2&gt;">
		<DisplayString>{{ {x}, {y} }}</DisplayString>
		<Expand>
			<Item Name="x">x</Item>
			<Item Name="y">y</Item>
		</Expand>
	</Type>

	<Type Name="muu::vector&lt;*, 3&gt;">
		<DisplayString>{{ {x}, {y}, {z} }}</DisplayString>
		<Expand>
			<Item Name="x">x</Item>
			<Item Name="y">y</Item>
			<Item Name="z">z</Item>
		</Expand>
	</Type>

	<Type Name="muu::vector&lt;*, 4&gt;">
		<DisplayString>{{ {x}, {y}, {z}, {w} }}</DisplayString>
		<Expand>
			<Item Name="x">x</Item>
			<Item Name="y">y</Item>
			<Item Name="z">z</Item>
			<Item Name="w">w</Item>
		</Expand>
	</Type>

	<Type Name="muu::vector&lt;*,*&gt;" Priority="Low">
		<Intrinsic Name="ptr" Expression="(($T1*)&amp;values)" />
		<DisplayString>{{ {*ptr()}, {*(ptr() + 1)}, {*(ptr() + 2)}, {*(ptr() + 3)}, ... }}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>$T2</Size>
				<ValuePointer>(($T1*)&amp;values)</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="muu::packed_unit_vector&lt;*,*&gt;">
		<Intrinsic Name="total_bits" Expression="(sizeof($T1) * 8ULL)" />
		<Intrinsic Name="sign_bits" Expression="((unsigned long long)$T2)" />
		<Intrinsic Name="value_bits" Expression="(total_bits() - sign_bits())" />
		<Intrinsic Name="x_bits" Expression="($T2 == 3ULL ? (value_bits() / 2ULL + 1ULL) : value_bits())" />
		<Intrinsic Name="y_bits" Expression="($T2 == 3ULL ? (value_bits() / 2ULL) : 0ULL)" />
		<Intrinsic Name="x_range" Expression="((1ULL &lt;&lt; x_bits()) - 1ULL)" />
		<Intrinsic Name="y_range" Expression="((1ULL &lt;&lt; y_bits()) - 1ULL)" />
		<Intrinsic Name="sign_mask" Expression="(((1ULL &lt;&lt; sign_bits()) - 1ULL) &lt;&lt; (x_bits() + y_bits()))" />
		<Intrinsic Name="x_mask" Expression="(x_range() &lt;&lt; y_bits())" />
		<Intrinsic Name="y_mask" Expression="y_range()" />
		<Intrinsic Name="x_sign_bit" Expression="(1ULL &lt;&lt; (total_bits() - 1ULL))" />
		<Intrinsic Name="y_sign_bit" Expression="(1ULL &lt;&lt; (total_bits() - 2ULL))" />
		<Intrinsic Name="z_sign_bit" Expression="(1ULL &lt;&lt; (total_bits() - 3ULL))" />

		<Intrinsic Name="x_range_div" Expression="(1.0f / (float)x_range())" />
		<Intrinsic Name="x_sign" Expression="((float)(1 - ((int)(!!(b() &amp; x_sign_bit())) * 2)))" />
		<Intrinsic Name="y_sign" Expression="((float)(1 - ((int)(!!(b() &amp; y_sign_bit())) * 2)))" />
		<Intrinsic Name="z_sign" Expression="((float)(1 - ((int)(!!(b() &amp; z_sign_bit())) * 2)))" />
		
		<Intrinsic Name="b" Expression="((unsigned long long)bits)" />
		<Intrinsic Name="ix" Expression="((b() &amp; x_mask()) &gt;&gt; y_bits())" />
		<Intrinsic Name="iy" Expression="(b() &amp; y_mask())" />
		
		<Intrinsic Name="inverted" Expression="($T2 == 3ULL &amp;&amp; ix() + iy() &gt; x_range())" />

		<Intrinsic Name="x_unsigned" Expression="(((float)(inverted() ? (x_range() - ix()) : ix())) * x_range_div())" />
		<Intrinsic Name="y_unsigned" Expression="(
			$T2 == 3ULL
			? (((float)(inverted() ? (x_range() - iy()) : iy())) * x_range_div())
			: (1.0f - x_unsigned())
		)" />
		<Intrinsic Name="z_unsigned" Expression="(1.0f - x_unsigned() - y_unsigned())" />

		<Intrinsic Name="x" Expression="(x_unsigned() * x_sign())" />
		<Intrinsic Name="y" Expression="(y_unsigned() * y_sign())" />
		<Intrinsic Name="z" Expression="($T2 == 3ULL ? (z_unsigned() * z_sign()) : 0.0f)" />

		<Intrinsic Name="dot" Expression="(v0 * v0 + v1 * v1 + v2 * v2)" >
			<Parameter Name="v0" Type="float"></Parameter>
			<Parameter Name="v1" Type="float"></Parameter>
			<Parameter Name="v2" Type="float"></Parameter>
		</Intrinsic>

		<Intrinsic Name="lensq" Expression="dot(x(), y(), z())" />

		<!-- xml inline Newton-Raphson lmao-->
		<Intrinsic Name="sqrt_iteration_0" Expression="(0.5f * (x + 1.0f))">
			<Parameter Name="x" Type="float"></Parameter>
		</Intrinsic>
		<Intrinsic Name="sqrt_iteration_1" Expression="(0.5f * (sqrt_iteration_0(x) + x / sqrt_iteration_0(x)))">
			<Parameter Name="x" Type="float"></Parameter>
		</Intrinsic>
		<Intrinsic Name="sqrt_iteration_2" Expression="(0.5f * (sqrt_iteration_1(x) + x / sqrt_iteration_1(x)))">
			<Parameter Name="x" Type="float"></Parameter>
		</Intrinsic>
		<Intrinsic Name="sqrt_iteration_3" Expression="(0.5f * (sqrt_iteration_2(x) + x / sqrt_iteration_2(x)))">
			<Parameter Name="x" Type="float"></Parameter>
		</Intrinsic>
		<Intrinsic Name="sqrt_iteration_4" Expression="(0.5f * (sqrt_iteration_3(x) + x / sqrt_iteration_3(x)))">
			<Parameter Name="x" Type="float"></Parameter>
		</Intrinsic>
		<Intrinsic Name="sqrt" Expression="(0.5f * (sqrt_iteration_4(x) + x / sqrt_iteration_4(x)))">
			<Parameter Name="x" Type="float"></Parameter>
		</Intrinsic>

		<Intrinsic Name="x_norm" Expression="(x() / sqrt(lensq()))" />
		<Intrinsic Name="y_norm" Expression="(y() / sqrt(lensq()))" />
		<Intrinsic Name="z_norm" Expression="(z() / sqrt(lensq()))" />

		<DisplayString Condition="$T2 == 2">{{ {x_norm()}, {y_norm()} }}</DisplayString>
		<DisplayString Condition="$T2 == 3">{{ {x_norm()}, {y_norm()}, {z_norm()} }}</DisplayString>
		<DisplayString>NATVIS ERROR</DisplayString>

		<Expand>
			<Item Name="x">x_norm()</Item>
			<Item Name="y">y_norm()</Item>
			<Item Name="z" Condition="$T2 == 3">z_norm()</Item>
		</Expand>

	</Type>

	<Type Name="muu::quaternion&lt;*&gt;">
		<DisplayString>{{ {s}, {v} }}</DisplayString>
		<Expand>
			<Item Name="s">s</Item>
			<Item Name="v">v</Item>
		</Expand>
	</Type>

	<Type Name="muu::matrix&lt;*, *, *&gt;">
		<Intrinsic Name="ptr" Expression="(($T1*)&amp;m)" />
		<Intrinsic Name="val" Expression="(*(ptr() + (c * $T2) + r))">
			<Parameter Name="r" Type="unsigned"></Parameter>
			<Parameter Name="c" Type="unsigned"></Parameter>
		</Intrinsic>
		<DisplayString>{{ {$T2} rows, {$T3} columns }}</DisplayString>
		<Expand>
			<Item Name="columns" ExcludeView="simple">m</Item>
			<CustomListItems MaxItemsPerView="5000" ExcludeView="simple">
				<Variable Name="r" InitialValue="0" />
				<Variable Name="c" InitialValue="0" />
				<Size>$T2 * $T3</Size>
				<Loop>
					<Item Name="[{r}, {c}]">val(r,c)</Item>
					<Exec>c++</Exec>
					<If Condition="(c % $T3) == 0">
						<Exec>r++</Exec>
						<Exec>c = 0</Exec>
					</If>
					<Break Condition="(r * c) >= ($T2 * $T3)" />
				</Loop>
			</CustomListItems>
		</Expand>
	</Type>

	<Type Name="muu::axis_angle&lt;*&gt;">
		<DisplayString>{{ {axis}, {angle} }}</DisplayString>
		<Expand>
			<Item Name="axis">axis</Item>
			<Item Name="angle">angle</Item>
		</Expand>
	</Type>

	<Type Name="muu::plane&lt;*&gt;">
		<DisplayString>{{ {n}, {d} }}</DisplayString>
		<Expand>
			<Item Name="n">n</Item>
			<Item Name="d">d</Item>
		</Expand>
	</Type>

	<Type Name="muu::line_segment&lt;*&gt;">
		<DisplayString>{{ {points[0]}, {points[1]} }}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>2</Size>
				<ValuePointer>points</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="muu::triangle&lt;*&gt;">
		<DisplayString>{{ {points[0]}, {points[1]}, {points[2]} }}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>3</Size>
				<ValuePointer>points</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="muu::bounding_box&lt;*&gt;">
		<DisplayString>{{ {center}, {extents} }}</DisplayString>
		<Expand>
			<Item Name="center">center</Item>
			<Item Name="extents">extents</Item>
		</Expand>
	</Type>

	<Type Name="muu::oriented_bounding_box&lt;*&gt;">
		<DisplayString>{{ {center}, {extents}, ... }}</DisplayString>
		<Expand>
			<Item Name="center">center</Item>
			<Item Name="extents">extents</Item>
			<Item Name="axes">axes</Item>
		</Expand>
	</Type>

	<Type Name="muu::euler_angles&lt;*&gt;">
		<DisplayString>{{ {yaw}, {pitch}, {roll} }}</DisplayString>
		<Expand>
			<Item Name="yaw">yaw</Item>
			<Item Name="pitch">pitch</Item>
			<Item Name="roll">roll</Item>
		</Expand>
	</Type>
	
	<Type Name="muu::strong_typedef&lt;*&gt;">
		<DisplayString>{value}</DisplayString>
		<Expand>
			<Item Name="value">value</Item>
		</Expand>
	</Type>


</AutoVisualizer>
