name: ci

on:
  push:
    branches-ignore:
      - 'gh-pages'
    paths:
      - '**.h'
      - '**.cpp'
      - '**.inl'
      - '**/meson.build'
      - '**/workflows/**.yaml'
  pull_request:
    branches-ignore:
      - 'gh-pages'
    paths:
      - '**.h'
      - '**.cpp'
      - '**.inl'
      - '**/meson.build'
      - '**/workflows/**.yaml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  clang_version: '14'
  gcc_version: '11'

jobs:
  linux:
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - 'clang++'
          - 'g++'
        linker:
          - 'lld'
        type:
          - 'debug'
          - 'release'

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
    - name: Install base dependencies
      run: |
        sudo apt -y update
        sudo apt -y install --no-install-recommends git python3 python3-pip ninja-build
        sudo -H pip3 install --no-cache-dir --upgrade meson

    - name: Update LLVM package repository
      if: ${{ startsWith(matrix.compiler, 'clang') || startsWith(matrix.linker, 'lld') }}
      run: |
        sudo apt -y install --no-install-recommends software-properties-common wget
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        codename=$(lsb_release -sc)
        sudo add-apt-repository --yes --no-update "deb http://apt.llvm.org/${codename}/ llvm-toolchain-${codename}-${{ env.clang_version }} main"
        sudo apt -y update

    - name: Install clang
      if: ${{ startsWith(matrix.compiler, 'clang')  }}
      run: |
        sudo apt -y install --no-install-recommends clang-${{ env.clang_version }}
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${{ env.clang_version }} 1000

    - name: Install g++
      if: ${{ startsWith(matrix.compiler, 'g++') }}
      run: |
        sudo apt -y install --no-install-recommends g++-${{ env.gcc_version }}
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{ env.gcc_version }} 1000

    - name: Install lld
      if: ${{ startsWith(matrix.linker, 'lld')  }}
      run: |
        sudo apt -y install --no-install-recommends lld-${{ env.clang_version }}
        sudo update-alternatives --install /usr/bin/ld.lld ld.lld /usr/bin/ld.lld-${{ env.clang_version }} 1000

    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Configure Meson
      run: |
        CXX=${{ matrix.compiler }} CXX_LD=${{ matrix.linker }} meson setup build --buildtype=${{ matrix.type }} -Dpedantic=true -Dbuild_tests=true

    - name: Build
      run: meson compile -C build

    - name: Test
      run: meson test -C build --verbose

  windows:
    strategy:
      fail-fast: false
      matrix:
        type:
          - 'debug'
          - 'release'

    runs-on: windows-2022

    defaults:
      run:
        shell: cmd

    steps:
    - name: Install dependencies
      run: |
        python3 -m pip install -U pip
        pip3 install --no-cache-dir --upgrade meson ninja

    - uses: actions/checkout@v3
      with:
        submodules: true

    - uses: ilammy/msvc-dev-cmd@v1

    - name: Configure Meson
      run: meson setup build --vsenv --buildtype=${{ matrix.type }} -Dpedantic=true -Dbuild_tests=true

    - name: Build
      run: meson compile -C build

    - name: Test
      run: meson test -C build --verbose
