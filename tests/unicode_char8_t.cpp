// This file is a part of muu and is subject to the the terms of the MIT license.
// Copyright (c) Mark Gillard <mark.gillard@outlook.com.au>
// See https://github.com/marzer/muu/blob/master/LICENSE for the full license text.
// SPDX-License-Identifier: MIT
//-----
// this file was generated by a script - do not modify it directly
//-----
// clang-format off

#include "tests.h"

#if MUU_HAS_CHAR8

#include "unicode.h"
#include "../include/muu/strings.h"

TEST_CASE("unicode - is_ascii_code_point (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_ascii_code_point);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ u8'\0', u8'\x7F' },
	};
	for (const auto& r : true_ranges)
	{
		REQUIRE(in(fn, r));
		REQUIRE(in_only<1>(fn, r));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ 0x80u, 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_ascii_hyphen (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_ascii_hyphen);
 
	// values which should return true
	static constexpr char8_t true_values[] = 
	{
		u8'-',
	};
	for (auto v : true_values)
	{
		REQUIRE(fn(v));
		REQUIRE(in_only<2>(fn, v));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ u8'\0', u8',' }, { u8'.', 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_ascii_letter (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_ascii_letter);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ u8'A', u8'Z' }, { u8'a', u8'z' },
	};
	for (const auto& r : true_ranges)
	{
		REQUIRE(in(fn, r));
		REQUIRE(in_only<3>(fn, r));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ u8'\0', u8'@' }, { u8'[', u8'`' }, { u8'{', 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_ascii_lowercase (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_ascii_lowercase);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ u8'a', u8'z' },
	};
	for (const auto& r : true_ranges)
	{
		REQUIRE(in(fn, r));
		REQUIRE(in_only<6>(fn, r));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ u8'\0', u8'`' }, { u8'{', 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_ascii_number (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_ascii_number);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ u8'0', u8'9' },
	};
	for (const auto& r : true_ranges)
	{
		REQUIRE(in(fn, r));
		REQUIRE(in_only<4>(fn, r));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ u8'\0', u8'/' }, { u8':', 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_ascii_uppercase (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_ascii_uppercase);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ u8'A', u8'Z' },
	};
	for (const auto& r : true_ranges)
	{
		REQUIRE(in(fn, r));
		REQUIRE(in_only<7>(fn, r));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ u8'\0', u8'@' }, { u8'[', 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_ascii_whitespace (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_ascii_whitespace);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ u8'\t', u8'\r' },
	};
	for (const auto& r : true_ranges)
	{
		REQUIRE(in(fn, r));
		REQUIRE(in_only<5>(fn, r));
	}
	static constexpr char8_t true_values[] = 
	{
		u8' ',
	};
	for (auto v : true_values)
	{
		REQUIRE(fn(v));
		REQUIRE(in_only<5>(fn, v));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ u8'\0', u8'\b' }, { u8'\x0E', u8'\x1F' }, { u8'!', 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_non_ascii_code_point (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_non_ascii_code_point);
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ u8'\0', 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_non_ascii_hyphen (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_non_ascii_hyphen);
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ u8'\0', 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_non_ascii_letter (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_non_ascii_letter);
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ u8'\0', 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_non_ascii_lowercase (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_non_ascii_lowercase);
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ u8'\0', 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_non_ascii_number (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_non_ascii_number);
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ u8'\0', 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_non_ascii_uppercase (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_non_ascii_uppercase);
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ u8'\0', 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_non_ascii_whitespace (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_non_ascii_whitespace);
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ u8'\0', 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_code_point (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_code_point);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ u8'\0', u8'\x7F' },
	};
	for (const auto& r : true_ranges)
		REQUIRE(in(fn, r));
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ 0x80u, 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_combining_mark (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_combining_mark);
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ u8'\0', 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_decimal_digit (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_decimal_digit);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ u8'0', u8'9' },
	};
	for (const auto& r : true_ranges)
		REQUIRE(in(fn, r));
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ u8'\0', u8'/' }, { u8':', 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_hexadecimal_digit (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_hexadecimal_digit);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ u8'0', u8'9' }, { u8'A', u8'F' }, { u8'a', u8'f' },
	};
	for (const auto& r : true_ranges)
		REQUIRE(in(fn, r));
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ u8'\0', u8'/' }, { u8':', u8'@' }, { u8'G', u8'`' },
		{ u8'g', 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_octal_digit (char8_t)")
{
	static constexpr auto fn = static_cast<code_unit_func<char8_t>*>(is_octal_digit);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ u8'0', u8'7' },
	};
	for (const auto& r : true_ranges)
		REQUIRE(in(fn, r));
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ u8'\0', u8'/' }, { u8'8', 0xFFu },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

template <>
struct code_unit_func_group<char8_t, 1>
{
	static constexpr code_unit_func<char8_t>* functions[] =
	{
		is_ascii_code_point,
		is_non_ascii_code_point,
		is_not_code_point,
	};
};

template <>
struct code_unit_func_group<char8_t, 2>
{
	static constexpr code_unit_func<char8_t>* functions[] =
	{
		is_ascii_hyphen,
		is_non_ascii_hyphen,
		is_not_hyphen,
	};
};

template <>
struct code_unit_func_group<char8_t, 3>
{
	static constexpr code_unit_func<char8_t>* functions[] =
	{
		is_ascii_letter,
		is_non_ascii_letter,
		is_not_letter,
	};
};

template <>
struct code_unit_func_group<char8_t, 4>
{
	static constexpr code_unit_func<char8_t>* functions[] =
	{
		is_ascii_number,
		is_non_ascii_number,
		is_not_number,
	};
};

template <>
struct code_unit_func_group<char8_t, 5>
{
	static constexpr code_unit_func<char8_t>* functions[] =
	{
		is_ascii_whitespace,
		is_non_ascii_whitespace,
		is_not_whitespace,
	};
};

template <>
struct code_unit_func_group<char8_t, 6>
{
	static constexpr code_unit_func<char8_t>* functions[] =
	{
		is_ascii_lowercase,
		is_non_ascii_lowercase,
		is_not_lowercase,
	};
};

template <>
struct code_unit_func_group<char8_t, 7>
{
	static constexpr code_unit_func<char8_t>* functions[] =
	{
		is_ascii_uppercase,
		is_non_ascii_uppercase,
		is_not_uppercase,
	};
};

#endif // MUU_HAS_CHAR8
// clang-format on

