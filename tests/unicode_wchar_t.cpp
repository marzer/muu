// This file is a part of muu and is subject to the the terms of the MIT license.
// Copyright (c) 2020 Mark Gillard <mark.gillard@outlook.com.au>
// See https://github.com/marzer/muu/blob/master/LICENSE for the full license text.
// SPDX-License-Identifier: MIT
//-----
// this file was generated by generate_unicode_functions.py - do not modify it directly

#include "tests.h"
#include "unicode.h"
#include "../include/muu/strings.h"

TEST_CASE("unicode - is_ascii (wchar_t)")
{
	using namespace impl;
	static constexpr auto fn = static_cast<code_unit_func<wchar_t>*>(is_ascii);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ L'\0', L'\x7F' },
	};
	for (const auto& r : true_ranges)
	{
		REQUIRE(in(fn, r));
		REQUIRE(in_only<1>(fn, r));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ L'\x80', L'\uFFFF' },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_unicode (wchar_t)")
{
	using namespace impl;
	static constexpr auto fn = static_cast<code_unit_func<wchar_t>*>(is_unicode);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ L'\x80', L'\uFFFF' },
	};
	for (const auto& r : true_ranges)
	{
		REQUIRE(in(fn, r));
		REQUIRE(in_only<1>(fn, r));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ L'\0', L'\x7F' },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_ascii_whitespace (wchar_t)")
{
	using namespace impl;
	static constexpr auto fn = static_cast<code_unit_func<wchar_t>*>(is_ascii_whitespace);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ L'\t', L'\r' },
	};
	for (const auto& r : true_ranges)
	{
		REQUIRE(in(fn, r));
		REQUIRE(in_only<2>(fn, r));
		REQUIRE(in_only<7>(fn, r));
	}
	static constexpr wchar_t true_values[] = 
	{
		L' ',
	};
	for (auto v : true_values)
	{
		REQUIRE(fn(v));
		REQUIRE(in_only<2>(fn, v));
		REQUIRE(in_only<7>(fn, v));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ L'\0', L'\b' }, { L'\x0E', L'\x1F' }, { L'!', L'\xFF' },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_unicode_whitespace (wchar_t)")
{
	using namespace impl;
	static constexpr auto fn = static_cast<code_unit_func<wchar_t>*>(is_unicode_whitespace);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ L'\u2000', L'\u200A' }, { L'\u2028', L'\u2029' },
	};
	for (const auto& r : true_ranges)
	{
		REQUIRE(in(fn, r));
		REQUIRE(in_only<2>(fn, r));
		REQUIRE(in_only<7>(fn, r));
	}
	static constexpr wchar_t true_values[] = 
	{
		L'\x85', L'\xA0', L'\u1680', L'\u202F', L'\u205F', L'\u3000',
	};
	for (auto v : true_values)
	{
		REQUIRE(fn(v));
		REQUIRE(in_only<2>(fn, v));
		REQUIRE(in_only<7>(fn, v));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ L'\0', L'\x84' }, { L'\x86', L'\x9F' }, { L'\xA1', L'\u167F' },
		{ L'\u1681', L'\u1FFF' }, { L'\u200B', L'\u2027' }, { L'\u202A', L'\u202E' },
		{ L'\u2030', L'\u205E' }, { L'\u2060', L'\u2FFF' }, { L'\u3001', L'\uFFFF' },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_ascii_letter (wchar_t)")
{
	using namespace impl;
	static constexpr auto fn = static_cast<code_unit_func<wchar_t>*>(is_ascii_letter);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ L'A', L'Z' }, { L'a', L'z' },
	};
	for (const auto& r : true_ranges)
	{
		REQUIRE(in(fn, r));
		REQUIRE(in_only<3>(fn, r));
		REQUIRE(in_only<7>(fn, r));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ L'\0', L'@' }, { L'[', L'`' }, { L'{', L'\xFF' },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_unicode_letter (wchar_t)")
{
	using namespace impl;
	static constexpr auto fn = static_cast<code_unit_func<wchar_t>*>(is_unicode_letter);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ L'\xC0', L'\xD6' }, { L'\xD8', L'\xF6' }, { L'\xF8', L'\u02C1' },
		{ L'\u02C6', L'\u02D1' }, { L'\u02E0', L'\u02E4' }, { L'\u0370', L'\u0374' },
		{ L'\u0376', L'\u0377' }, { L'\u037A', L'\u037D' }, { L'\u0388', L'\u038A' },
		{ L'\u038E', L'\u03A1' }, { L'\u03A3', L'\u03F5' }, { L'\u03F7', L'\u0481' },
		{ L'\u048A', L'\u052F' }, { L'\u0531', L'\u0556' }, { L'\u0560', L'\u0588' },
		{ L'\u05D0', L'\u05EA' }, { L'\u05EF', L'\u05F2' }, { L'\u0620', L'\u064A' },
		{ L'\u066E', L'\u066F' }, { L'\u0671', L'\u06D3' }, { L'\u06E5', L'\u06E6' },
		{ L'\u06EE', L'\u06EF' }, { L'\u06FA', L'\u06FC' }, { L'\u0712', L'\u072F' },
		{ L'\u074D', L'\u07A5' }, { L'\u07CA', L'\u07EA' }, { L'\u07F4', L'\u07F5' },
		{ L'\u0800', L'\u0815' }, { L'\u0840', L'\u0858' }, { L'\u0860', L'\u086A' },
		{ L'\u08A0', L'\u08B4' }, { L'\u08B6', L'\u08C7' }, { L'\u0904', L'\u0939' },
		{ L'\u0958', L'\u0961' }, { L'\u0971', L'\u0980' }, { L'\u0985', L'\u098C' },
		{ L'\u098F', L'\u0990' }, { L'\u0993', L'\u09A8' }, { L'\u09AA', L'\u09B0' },
		{ L'\u09B6', L'\u09B9' }, { L'\u09DC', L'\u09DD' }, { L'\u09DF', L'\u09E1' },
		{ L'\u09F0', L'\u09F1' }, { L'\u0A05', L'\u0A0A' }, { L'\u0A0F', L'\u0A10' },
		{ L'\u0A13', L'\u0A28' }, { L'\u0A2A', L'\u0A30' }, { L'\u0A32', L'\u0A33' },
		{ L'\u0A35', L'\u0A36' }, { L'\u0A38', L'\u0A39' }, { L'\u0A59', L'\u0A5C' },
		{ L'\u0A72', L'\u0A74' }, { L'\u0A85', L'\u0A8D' }, { L'\u0A8F', L'\u0A91' },
		{ L'\u0A93', L'\u0AA8' }, { L'\u0AAA', L'\u0AB0' }, { L'\u0AB2', L'\u0AB3' },
		{ L'\u0AB5', L'\u0AB9' }, { L'\u0AE0', L'\u0AE1' }, { L'\u0B05', L'\u0B0C' },
		{ L'\u0B0F', L'\u0B10' }, { L'\u0B13', L'\u0B28' }, { L'\u0B2A', L'\u0B30' },
		{ L'\u0B32', L'\u0B33' }, { L'\u0B35', L'\u0B39' }, { L'\u0B5C', L'\u0B5D' },
		{ L'\u0B5F', L'\u0B61' }, { L'\u0B85', L'\u0B8A' }, { L'\u0B8E', L'\u0B90' },
		{ L'\u0B92', L'\u0B95' }, { L'\u0B99', L'\u0B9A' }, { L'\u0B9E', L'\u0B9F' },
		{ L'\u0BA3', L'\u0BA4' }, { L'\u0BA8', L'\u0BAA' }, { L'\u0BAE', L'\u0BB9' },
		{ L'\u0C05', L'\u0C0C' }, { L'\u0C0E', L'\u0C10' }, { L'\u0C12', L'\u0C28' },
		{ L'\u0C2A', L'\u0C39' }, { L'\u0C58', L'\u0C5A' }, { L'\u0C60', L'\u0C61' },
		{ L'\u0C85', L'\u0C8C' }, { L'\u0C8E', L'\u0C90' }, { L'\u0C92', L'\u0CA8' },
		{ L'\u0CAA', L'\u0CB3' }, { L'\u0CB5', L'\u0CB9' }, { L'\u0CE0', L'\u0CE1' },
		{ L'\u0CF1', L'\u0CF2' }, { L'\u0D04', L'\u0D0C' }, { L'\u0D0E', L'\u0D10' },
		{ L'\u0D12', L'\u0D3A' }, { L'\u0D54', L'\u0D56' }, { L'\u0D5F', L'\u0D61' },
		{ L'\u0D7A', L'\u0D7F' }, { L'\u0D85', L'\u0D96' }, { L'\u0D9A', L'\u0DB1' },
		{ L'\u0DB3', L'\u0DBB' }, { L'\u0DC0', L'\u0DC6' }, { L'\u0E01', L'\u0E30' },
		{ L'\u0E32', L'\u0E33' }, { L'\u0E40', L'\u0E46' }, { L'\u0E81', L'\u0E82' },
		{ L'\u0E86', L'\u0E8A' }, { L'\u0E8C', L'\u0EA3' }, { L'\u0EA7', L'\u0EB0' },
		{ L'\u0EB2', L'\u0EB3' }, { L'\u0EC0', L'\u0EC4' }, { L'\u0EDC', L'\u0EDF' },
		{ L'\u0F40', L'\u0F47' }, { L'\u0F49', L'\u0F6C' }, { L'\u0F88', L'\u0F8C' },
		{ L'\u1000', L'\u102A' }, { L'\u1050', L'\u1055' }, { L'\u105A', L'\u105D' },
		{ L'\u1065', L'\u1066' }, { L'\u106E', L'\u1070' }, { L'\u1075', L'\u1081' },
		{ L'\u10A0', L'\u10C5' }, { L'\u10D0', L'\u10FA' }, { L'\u10FC', L'\u1248' },
		{ L'\u124A', L'\u124D' }, { L'\u1250', L'\u1256' }, { L'\u125A', L'\u125D' },
		{ L'\u1260', L'\u1288' }, { L'\u128A', L'\u128D' }, { L'\u1290', L'\u12B0' },
		{ L'\u12B2', L'\u12B5' }, { L'\u12B8', L'\u12BE' }, { L'\u12C2', L'\u12C5' },
		{ L'\u12C8', L'\u12D6' }, { L'\u12D8', L'\u1310' }, { L'\u1312', L'\u1315' },
		{ L'\u1318', L'\u135A' }, { L'\u1380', L'\u138F' }, { L'\u13A0', L'\u13F5' },
		{ L'\u13F8', L'\u13FD' }, { L'\u1401', L'\u166C' }, { L'\u166F', L'\u167F' },
		{ L'\u1681', L'\u169A' }, { L'\u16A0', L'\u16EA' }, { L'\u16F1', L'\u16F8' },
		{ L'\u1700', L'\u170C' }, { L'\u170E', L'\u1711' }, { L'\u1720', L'\u1731' },
		{ L'\u1740', L'\u1751' }, { L'\u1760', L'\u176C' }, { L'\u176E', L'\u1770' },
		{ L'\u1780', L'\u17B3' }, { L'\u1820', L'\u1878' }, { L'\u1880', L'\u1884' },
		{ L'\u1887', L'\u18A8' }, { L'\u18B0', L'\u18F5' }, { L'\u1900', L'\u191E' },
		{ L'\u1950', L'\u196D' }, { L'\u1970', L'\u1974' }, { L'\u1980', L'\u19AB' },
		{ L'\u19B0', L'\u19C9' }, { L'\u1A00', L'\u1A16' }, { L'\u1A20', L'\u1A54' },
		{ L'\u1B05', L'\u1B33' }, { L'\u1B45', L'\u1B4B' }, { L'\u1B83', L'\u1BA0' },
		{ L'\u1BAE', L'\u1BAF' }, { L'\u1BBA', L'\u1BE5' }, { L'\u1C00', L'\u1C23' },
		{ L'\u1C4D', L'\u1C4F' }, { L'\u1C5A', L'\u1C7D' }, { L'\u1C80', L'\u1C88' },
		{ L'\u1C90', L'\u1CBA' }, { L'\u1CBD', L'\u1CBF' }, { L'\u1CE9', L'\u1CEC' },
		{ L'\u1CEE', L'\u1CF3' }, { L'\u1CF5', L'\u1CF6' }, { L'\u1D00', L'\u1DBF' },
		{ L'\u1E00', L'\u1F15' }, { L'\u1F18', L'\u1F1D' }, { L'\u1F20', L'\u1F45' },
		{ L'\u1F48', L'\u1F4D' }, { L'\u1F50', L'\u1F57' }, { L'\u1F5F', L'\u1F7D' },
		{ L'\u1F80', L'\u1FB4' }, { L'\u1FB6', L'\u1FBC' }, { L'\u1FC2', L'\u1FC4' },
		{ L'\u1FC6', L'\u1FCC' }, { L'\u1FD0', L'\u1FD3' }, { L'\u1FD6', L'\u1FDB' },
		{ L'\u1FE0', L'\u1FEC' }, { L'\u1FF2', L'\u1FF4' }, { L'\u1FF6', L'\u1FFC' },
		{ L'\u2090', L'\u209C' }, { L'\u210A', L'\u2113' }, { L'\u2119', L'\u211D' },
		{ L'\u212A', L'\u212D' }, { L'\u212F', L'\u2139' }, { L'\u213C', L'\u213F' },
		{ L'\u2145', L'\u2149' }, { L'\u2183', L'\u2184' }, { L'\u2C00', L'\u2C2E' },
		{ L'\u2C30', L'\u2C5E' }, { L'\u2C60', L'\u2CE4' }, { L'\u2CEB', L'\u2CEE' },
		{ L'\u2CF2', L'\u2CF3' }, { L'\u2D00', L'\u2D25' }, { L'\u2D30', L'\u2D67' },
		{ L'\u2D80', L'\u2D96' }, { L'\u2DA0', L'\u2DA6' }, { L'\u2DA8', L'\u2DAE' },
		{ L'\u2DB0', L'\u2DB6' }, { L'\u2DB8', L'\u2DBE' }, { L'\u2DC0', L'\u2DC6' },
		{ L'\u2DC8', L'\u2DCE' }, { L'\u2DD0', L'\u2DD6' }, { L'\u2DD8', L'\u2DDE' },
		{ L'\u3005', L'\u3006' }, { L'\u3031', L'\u3035' }, { L'\u303B', L'\u303C' },
		{ L'\u3041', L'\u3096' }, { L'\u309D', L'\u309F' }, { L'\u30A1', L'\u30FA' },
		{ L'\u30FC', L'\u30FF' }, { L'\u3105', L'\u312F' }, { L'\u3131', L'\u318E' },
		{ L'\u31A0', L'\u31BF' }, { L'\u31F0', L'\u31FF' }, { L'\u3400', L'\u4DBF' },
		{ L'\u4E00', L'\u9FFC' }, { L'\uA000', L'\uA48C' }, { L'\uA4D0', L'\uA4FD' },
		{ L'\uA500', L'\uA60C' }, { L'\uA610', L'\uA61F' }, { L'\uA62A', L'\uA62B' },
		{ L'\uA640', L'\uA66E' }, { L'\uA67F', L'\uA69D' }, { L'\uA6A0', L'\uA6E5' },
		{ L'\uA717', L'\uA71F' }, { L'\uA722', L'\uA788' }, { L'\uA78B', L'\uA7BF' },
		{ L'\uA7C2', L'\uA7CA' }, { L'\uA7F5', L'\uA801' }, { L'\uA803', L'\uA805' },
		{ L'\uA807', L'\uA80A' }, { L'\uA80C', L'\uA822' }, { L'\uA840', L'\uA873' },
		{ L'\uA882', L'\uA8B3' }, { L'\uA8F2', L'\uA8F7' }, { L'\uA8FD', L'\uA8FE' },
		{ L'\uA90A', L'\uA925' }, { L'\uA930', L'\uA946' }, { L'\uA960', L'\uA97C' },
		{ L'\uA984', L'\uA9B2' }, { L'\uA9E0', L'\uA9E4' }, { L'\uA9E6', L'\uA9EF' },
		{ L'\uA9FA', L'\uA9FE' }, { L'\uAA00', L'\uAA28' }, { L'\uAA40', L'\uAA42' },
		{ L'\uAA44', L'\uAA4B' }, { L'\uAA60', L'\uAA76' }, { L'\uAA7E', L'\uAAAF' },
		{ L'\uAAB5', L'\uAAB6' }, { L'\uAAB9', L'\uAABD' }, { L'\uAADB', L'\uAADD' },
		{ L'\uAAE0', L'\uAAEA' }, { L'\uAAF2', L'\uAAF4' }, { L'\uAB01', L'\uAB06' },
		{ L'\uAB09', L'\uAB0E' }, { L'\uAB11', L'\uAB16' }, { L'\uAB20', L'\uAB26' },
		{ L'\uAB28', L'\uAB2E' }, { L'\uAB30', L'\uAB5A' }, { L'\uAB5C', L'\uAB69' },
		{ L'\uAB70', L'\uABE2' }, { L'\uAC00', L'\uD7A3' }, { L'\uD7B0', L'\uD7C6' },
		{ L'\uD7CB', L'\uD7FB' }, { L'\uF900', L'\uFA6D' }, { L'\uFA70', L'\uFAD9' },
		{ L'\uFB00', L'\uFB06' }, { L'\uFB13', L'\uFB17' }, { L'\uFB1F', L'\uFB28' },
		{ L'\uFB2A', L'\uFB36' }, { L'\uFB38', L'\uFB3C' }, { L'\uFB40', L'\uFB41' },
		{ L'\uFB43', L'\uFB44' }, { L'\uFB46', L'\uFBB1' }, { L'\uFBD3', L'\uFD3D' },
		{ L'\uFD50', L'\uFD8F' }, { L'\uFD92', L'\uFDC7' }, { L'\uFDF0', L'\uFDFB' },
		{ L'\uFE70', L'\uFE74' }, { L'\uFE76', L'\uFEFC' }, { L'\uFF21', L'\uFF3A' },
		{ L'\uFF41', L'\uFF5A' }, { L'\uFF66', L'\uFFBE' }, { L'\uFFC2', L'\uFFC7' },
		{ L'\uFFCA', L'\uFFCF' }, { L'\uFFD2', L'\uFFD7' }, { L'\uFFDA', L'\uFFDC' },
	};
	for (const auto& r : true_ranges)
	{
		REQUIRE(in(fn, r));
		REQUIRE(in_only<3>(fn, r));
		REQUIRE(in_only<7>(fn, r));
	}
	static constexpr wchar_t true_values[] = 
	{
		L'\xAA', L'\xB5', L'\xBA', L'\u02EC', L'\u02EE', L'\u037F',
		L'\u0386', L'\u038C', L'\u0559', L'\u06D5', L'\u06FF', L'\u0710',
		L'\u07B1', L'\u07FA', L'\u081A', L'\u0824', L'\u0828', L'\u093D',
		L'\u0950', L'\u09B2', L'\u09BD', L'\u09CE', L'\u09FC', L'\u0A5E',
		L'\u0ABD', L'\u0AD0', L'\u0AF9', L'\u0B3D', L'\u0B71', L'\u0B83',
		L'\u0B9C', L'\u0BD0', L'\u0C3D', L'\u0C80', L'\u0CBD', L'\u0CDE',
		L'\u0D3D', L'\u0D4E', L'\u0DBD', L'\u0E84', L'\u0EA5', L'\u0EBD',
		L'\u0EC6', L'\u0F00', L'\u103F', L'\u1061', L'\u108E', L'\u10C7',
		L'\u10CD', L'\u1258', L'\u12C0', L'\u17D7', L'\u17DC', L'\u18AA',
		L'\u1AA7', L'\u1CFA', L'\u1F59', L'\u1F5B', L'\u1F5D', L'\u1FBE',
		L'\u2071', L'\u207F', L'\u2102', L'\u2107', L'\u2115', L'\u2124',
		L'\u2126', L'\u2128', L'\u214E', L'\u2D27', L'\u2D2D', L'\u2D6F',
		L'\u2E2F', L'\uA8FB', L'\uA9CF', L'\uAA7A', L'\uAAB1', L'\uAAC0',
		L'\uAAC2', L'\uFB1D', L'\uFB3E',
	};
	for (auto v : true_values)
	{
		REQUIRE(fn(v));
		REQUIRE(in_only<3>(fn, v));
		REQUIRE(in_only<7>(fn, v));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ L'\0', L'\xA9' }, { L'\xAB', L'\xB4' }, { L'\xB6', L'\xB9' },
		{ L'\xBB', L'\xBF' }, { L'\u02C2', L'\u02C5' }, { L'\u02D2', L'\u02DF' },
		{ L'\u02E5', L'\u02EB' }, { L'\u02EF', L'\u036F' }, { L'\u0378', L'\u0379' },
		{ L'\u0380', L'\u0385' }, { L'\u0482', L'\u0489' }, { L'\u0557', L'\u0558' },
		{ L'\u055A', L'\u055F' }, { L'\u0589', L'\u05CF' }, { L'\u05EB', L'\u05EE' },
		{ L'\u05F3', L'\u061F' }, { L'\u064B', L'\u066D' }, { L'\u06D6', L'\u06E4' },
		{ L'\u06E7', L'\u06ED' }, { L'\u06F0', L'\u06F9' }, { L'\u06FD', L'\u06FE' },
		{ L'\u0700', L'\u070F' }, { L'\u0730', L'\u074C' }, { L'\u07A6', L'\u07B0' },
		{ L'\u07B2', L'\u07C9' }, { L'\u07EB', L'\u07F3' }, { L'\u07F6', L'\u07F9' },
		{ L'\u07FB', L'\u07FF' }, { L'\u0816', L'\u0819' }, { L'\u081B', L'\u0823' },
		{ L'\u0825', L'\u0827' }, { L'\u0829', L'\u083F' }, { L'\u0859', L'\u085F' },
		{ L'\u086B', L'\u089F' }, { L'\u08C8', L'\u0903' }, { L'\u093A', L'\u093C' },
		{ L'\u093E', L'\u094F' }, { L'\u0951', L'\u0957' }, { L'\u0962', L'\u0970' },
		{ L'\u0981', L'\u0984' }, { L'\u098D', L'\u098E' }, { L'\u0991', L'\u0992' },
		{ L'\u09B3', L'\u09B5' }, { L'\u09BA', L'\u09BC' }, { L'\u09BE', L'\u09CD' },
		{ L'\u09CF', L'\u09DB' }, { L'\u09E2', L'\u09EF' }, { L'\u09F2', L'\u09FB' },
		{ L'\u09FD', L'\u0A04' }, { L'\u0A0B', L'\u0A0E' }, { L'\u0A11', L'\u0A12' },
		{ L'\u0A3A', L'\u0A58' }, { L'\u0A5F', L'\u0A71' }, { L'\u0A75', L'\u0A84' },
		{ L'\u0ABA', L'\u0ABC' }, { L'\u0ABE', L'\u0ACF' }, { L'\u0AD1', L'\u0ADF' },
		{ L'\u0AE2', L'\u0AF8' }, { L'\u0AFA', L'\u0B04' }, { L'\u0B0D', L'\u0B0E' },
		{ L'\u0B11', L'\u0B12' }, { L'\u0B3A', L'\u0B3C' }, { L'\u0B3E', L'\u0B5B' },
		{ L'\u0B62', L'\u0B70' }, { L'\u0B72', L'\u0B82' }, { L'\u0B8B', L'\u0B8D' },
		{ L'\u0B96', L'\u0B98' }, { L'\u0BA0', L'\u0BA2' }, { L'\u0BA5', L'\u0BA7' },
		{ L'\u0BAB', L'\u0BAD' }, { L'\u0BBA', L'\u0BCF' }, { L'\u0BD1', L'\u0C04' },
		{ L'\u0C3A', L'\u0C3C' }, { L'\u0C3E', L'\u0C57' }, { L'\u0C5B', L'\u0C5F' },
		{ L'\u0C62', L'\u0C7F' }, { L'\u0C81', L'\u0C84' }, { L'\u0CBA', L'\u0CBC' },
		{ L'\u0CBE', L'\u0CDD' }, { L'\u0CE2', L'\u0CF0' }, { L'\u0CF3', L'\u0D03' },
		{ L'\u0D3B', L'\u0D3C' }, { L'\u0D3E', L'\u0D4D' }, { L'\u0D4F', L'\u0D53' },
		{ L'\u0D57', L'\u0D5E' }, { L'\u0D62', L'\u0D79' }, { L'\u0D80', L'\u0D84' },
		{ L'\u0D97', L'\u0D99' }, { L'\u0DBE', L'\u0DBF' }, { L'\u0DC7', L'\u0E00' },
		{ L'\u0E34', L'\u0E3F' }, { L'\u0E47', L'\u0E80' }, { L'\u0EB4', L'\u0EBC' },
		{ L'\u0EBE', L'\u0EBF' }, { L'\u0EC7', L'\u0EDB' }, { L'\u0EE0', L'\u0EFF' },
		{ L'\u0F01', L'\u0F3F' }, { L'\u0F6D', L'\u0F87' }, { L'\u0F8D', L'\u0FFF' },
		{ L'\u102B', L'\u103E' }, { L'\u1040', L'\u104F' }, { L'\u1056', L'\u1059' },
		{ L'\u105E', L'\u1060' }, { L'\u1062', L'\u1064' }, { L'\u1067', L'\u106D' },
		{ L'\u1071', L'\u1074' }, { L'\u1082', L'\u108D' }, { L'\u108F', L'\u109F' },
		{ L'\u10C8', L'\u10CC' }, { L'\u10CE', L'\u10CF' }, { L'\u124E', L'\u124F' },
		{ L'\u125E', L'\u125F' }, { L'\u128E', L'\u128F' }, { L'\u12B6', L'\u12B7' },
		{ L'\u12C6', L'\u12C7' }, { L'\u1316', L'\u1317' }, { L'\u135B', L'\u137F' },
		{ L'\u1390', L'\u139F' }, { L'\u13F6', L'\u13F7' }, { L'\u13FE', L'\u1400' },
		{ L'\u166D', L'\u166E' }, { L'\u169B', L'\u169F' }, { L'\u16EB', L'\u16F0' },
		{ L'\u16F9', L'\u16FF' }, { L'\u1712', L'\u171F' }, { L'\u1732', L'\u173F' },
		{ L'\u1752', L'\u175F' }, { L'\u1771', L'\u177F' }, { L'\u17B4', L'\u17D6' },
		{ L'\u17D8', L'\u17DB' }, { L'\u17DD', L'\u181F' }, { L'\u1879', L'\u187F' },
		{ L'\u1885', L'\u1886' }, { L'\u18AB', L'\u18AF' }, { L'\u18F6', L'\u18FF' },
		{ L'\u191F', L'\u194F' }, { L'\u196E', L'\u196F' }, { L'\u1975', L'\u197F' },
		{ L'\u19AC', L'\u19AF' }, { L'\u19CA', L'\u19FF' }, { L'\u1A17', L'\u1A1F' },
		{ L'\u1A55', L'\u1AA6' }, { L'\u1AA8', L'\u1B04' }, { L'\u1B34', L'\u1B44' },
		{ L'\u1B4C', L'\u1B82' }, { L'\u1BA1', L'\u1BAD' }, { L'\u1BB0', L'\u1BB9' },
		{ L'\u1BE6', L'\u1BFF' }, { L'\u1C24', L'\u1C4C' }, { L'\u1C50', L'\u1C59' },
		{ L'\u1C7E', L'\u1C7F' }, { L'\u1C89', L'\u1C8F' }, { L'\u1CBB', L'\u1CBC' },
		{ L'\u1CC0', L'\u1CE8' }, { L'\u1CF7', L'\u1CF9' }, { L'\u1CFB', L'\u1CFF' },
		{ L'\u1DC0', L'\u1DFF' }, { L'\u1F16', L'\u1F17' }, { L'\u1F1E', L'\u1F1F' },
		{ L'\u1F46', L'\u1F47' }, { L'\u1F4E', L'\u1F4F' }, { L'\u1F7E', L'\u1F7F' },
		{ L'\u1FBF', L'\u1FC1' }, { L'\u1FCD', L'\u1FCF' }, { L'\u1FD4', L'\u1FD5' },
		{ L'\u1FDC', L'\u1FDF' }, { L'\u1FED', L'\u1FF1' }, { L'\u1FFD', L'\u2070' },
		{ L'\u2072', L'\u207E' }, { L'\u2080', L'\u208F' }, { L'\u209D', L'\u2101' },
		{ L'\u2103', L'\u2106' }, { L'\u2108', L'\u2109' }, { L'\u2116', L'\u2118' },
		{ L'\u211E', L'\u2123' }, { L'\u213A', L'\u213B' }, { L'\u2140', L'\u2144' },
		{ L'\u214A', L'\u214D' }, { L'\u214F', L'\u2182' }, { L'\u2185', L'\u2BFF' },
		{ L'\u2CE5', L'\u2CEA' }, { L'\u2CEF', L'\u2CF1' }, { L'\u2CF4', L'\u2CFF' },
		{ L'\u2D28', L'\u2D2C' }, { L'\u2D2E', L'\u2D2F' }, { L'\u2D68', L'\u2D6E' },
		{ L'\u2D70', L'\u2D7F' }, { L'\u2D97', L'\u2D9F' }, { L'\u2DDF', L'\u2E2E' },
		{ L'\u2E30', L'\u3004' }, { L'\u3007', L'\u3030' }, { L'\u3036', L'\u303A' },
		{ L'\u303D', L'\u3040' }, { L'\u3097', L'\u309C' }, { L'\u3100', L'\u3104' },
		{ L'\u318F', L'\u319F' }, { L'\u31C0', L'\u31EF' }, { L'\u3200', L'\u33FF' },
		{ L'\u4DC0', L'\u4DFF' }, { L'\u9FFD', L'\u9FFF' }, { L'\uA48D', L'\uA4CF' },
		{ L'\uA4FE', L'\uA4FF' }, { L'\uA60D', L'\uA60F' }, { L'\uA620', L'\uA629' },
		{ L'\uA62C', L'\uA63F' }, { L'\uA66F', L'\uA67E' }, { L'\uA69E', L'\uA69F' },
		{ L'\uA6E6', L'\uA716' }, { L'\uA720', L'\uA721' }, { L'\uA789', L'\uA78A' },
		{ L'\uA7C0', L'\uA7C1' }, { L'\uA7CB', L'\uA7F4' }, { L'\uA823', L'\uA83F' },
		{ L'\uA874', L'\uA881' }, { L'\uA8B4', L'\uA8F1' }, { L'\uA8F8', L'\uA8FA' },
		{ L'\uA8FF', L'\uA909' }, { L'\uA926', L'\uA92F' }, { L'\uA947', L'\uA95F' },
		{ L'\uA97D', L'\uA983' }, { L'\uA9B3', L'\uA9CE' }, { L'\uA9D0', L'\uA9DF' },
		{ L'\uA9F0', L'\uA9F9' }, { L'\uAA29', L'\uAA3F' }, { L'\uAA4C', L'\uAA5F' },
		{ L'\uAA77', L'\uAA79' }, { L'\uAA7B', L'\uAA7D' }, { L'\uAAB2', L'\uAAB4' },
		{ L'\uAAB7', L'\uAAB8' }, { L'\uAABE', L'\uAABF' }, { L'\uAAC3', L'\uAADA' },
		{ L'\uAADE', L'\uAADF' }, { L'\uAAEB', L'\uAAF1' }, { L'\uAAF5', L'\uAB00' },
		{ L'\uAB07', L'\uAB08' }, { L'\uAB0F', L'\uAB10' }, { L'\uAB17', L'\uAB1F' },
		{ L'\uAB6A', L'\uAB6F' }, { L'\uABE3', L'\uABFF' }, { L'\uD7A4', L'\uD7AF' },
		{ L'\uD7C7', L'\uD7CA' }, { L'\uD7FC', L'\uF8FF' }, { L'\uFA6E', L'\uFA6F' },
		{ L'\uFADA', L'\uFAFF' }, { L'\uFB07', L'\uFB12' }, { L'\uFB18', L'\uFB1C' },
		{ L'\uFBB2', L'\uFBD2' }, { L'\uFD3E', L'\uFD4F' }, { L'\uFD90', L'\uFD91' },
		{ L'\uFDC8', L'\uFDEF' }, { L'\uFDFC', L'\uFE6F' }, { L'\uFEFD', L'\uFF20' },
		{ L'\uFF3B', L'\uFF40' }, { L'\uFF5B', L'\uFF65' }, { L'\uFFBF', L'\uFFC1' },
		{ L'\uFFC8', L'\uFFC9' }, { L'\uFFD0', L'\uFFD1' }, { L'\uFFD8', L'\uFFD9' },
		{ L'\uFFDD', L'\uFFFF' },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
	static constexpr wchar_t false_values[] = 
	{
		L'\xD7', L'\xF7', L'\u02ED', L'\u0375', L'\u037E', L'\u0387',
		L'\u038B', L'\u038D', L'\u03A2', L'\u03F6', L'\u0530', L'\u0670',
		L'\u06D4', L'\u0711', L'\u08B5', L'\u09A9', L'\u09B1', L'\u09DE',
		L'\u0A29', L'\u0A31', L'\u0A34', L'\u0A37', L'\u0A5D', L'\u0A8E',
		L'\u0A92', L'\u0AA9', L'\u0AB1', L'\u0AB4', L'\u0B29', L'\u0B31',
		L'\u0B34', L'\u0B5E', L'\u0B84', L'\u0B91', L'\u0B9B', L'\u0B9D',
		L'\u0C0D', L'\u0C11', L'\u0C29', L'\u0C8D', L'\u0C91', L'\u0CA9',
		L'\u0CB4', L'\u0CDF', L'\u0D0D', L'\u0D11', L'\u0DB2', L'\u0DBC',
		L'\u0E31', L'\u0E83', L'\u0E85', L'\u0E8B', L'\u0EA4', L'\u0EA6',
		L'\u0EB1', L'\u0EC5', L'\u0F48', L'\u10C6', L'\u10FB', L'\u1249',
		L'\u1257', L'\u1259', L'\u1289', L'\u12B1', L'\u12BF', L'\u12C1',
		L'\u12D7', L'\u1311', L'\u1680', L'\u170D', L'\u176D', L'\u18A9',
		L'\u1CED', L'\u1CF4', L'\u1F58', L'\u1F5A', L'\u1F5C', L'\u1F5E',
		L'\u1FB5', L'\u1FBD', L'\u1FC5', L'\u1FF5', L'\u2114', L'\u2125',
		L'\u2127', L'\u2129', L'\u212E', L'\u2C2F', L'\u2C5F', L'\u2D26',
		L'\u2DA7', L'\u2DAF', L'\u2DB7', L'\u2DBF', L'\u2DC7', L'\u2DCF',
		L'\u2DD7', L'\u30A0', L'\u30FB', L'\u3130', L'\uA802', L'\uA806',
		L'\uA80B', L'\uA8FC', L'\uA9E5', L'\uA9FF', L'\uAA43', L'\uAAB0',
		L'\uAAC1', L'\uAB27', L'\uAB2F', L'\uAB5B', L'\uFB1E', L'\uFB29',
		L'\uFB37', L'\uFB3D', L'\uFB3F', L'\uFB42', L'\uFB45', L'\uFE75',
	};
	for (auto v : false_values)
		REQUIRE(!fn(v));
}

TEST_CASE("unicode - is_ascii_number (wchar_t)")
{
	using namespace impl;
	static constexpr auto fn = static_cast<code_unit_func<wchar_t>*>(is_ascii_number);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ L'0', L'9' },
	};
	for (const auto& r : true_ranges)
	{
		REQUIRE(in(fn, r));
		REQUIRE(in_only<4>(fn, r));
		REQUIRE(in_only<7>(fn, r));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ L'\0', L'/' }, { L':', L'\xFF' },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_unicode_number (wchar_t)")
{
	using namespace impl;
	static constexpr auto fn = static_cast<code_unit_func<wchar_t>*>(is_unicode_number);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ L'\u0660', L'\u0669' }, { L'\u06F0', L'\u06F9' }, { L'\u07C0', L'\u07C9' },
		{ L'\u0966', L'\u096F' }, { L'\u09E6', L'\u09EF' }, { L'\u0A66', L'\u0A6F' },
		{ L'\u0AE6', L'\u0AEF' }, { L'\u0B66', L'\u0B6F' }, { L'\u0BE6', L'\u0BEF' },
		{ L'\u0C66', L'\u0C6F' }, { L'\u0CE6', L'\u0CEF' }, { L'\u0D66', L'\u0D6F' },
		{ L'\u0DE6', L'\u0DEF' }, { L'\u0E50', L'\u0E59' }, { L'\u0ED0', L'\u0ED9' },
		{ L'\u0F20', L'\u0F29' }, { L'\u1040', L'\u1049' }, { L'\u1090', L'\u1099' },
		{ L'\u16EE', L'\u16F0' }, { L'\u17E0', L'\u17E9' }, { L'\u1810', L'\u1819' },
		{ L'\u1946', L'\u194F' }, { L'\u19D0', L'\u19D9' }, { L'\u1A80', L'\u1A89' },
		{ L'\u1A90', L'\u1A99' }, { L'\u1B50', L'\u1B59' }, { L'\u1BB0', L'\u1BB9' },
		{ L'\u1C40', L'\u1C49' }, { L'\u1C50', L'\u1C59' }, { L'\u2160', L'\u2182' },
		{ L'\u2185', L'\u2188' }, { L'\u3021', L'\u3029' }, { L'\u3038', L'\u303A' },
		{ L'\uA620', L'\uA629' }, { L'\uA6E6', L'\uA6EF' }, { L'\uA8D0', L'\uA8D9' },
		{ L'\uA900', L'\uA909' }, { L'\uA9D0', L'\uA9D9' }, { L'\uA9F0', L'\uA9F9' },
		{ L'\uAA50', L'\uAA59' }, { L'\uABF0', L'\uABF9' }, { L'\uFF10', L'\uFF19' },
	};
	for (const auto& r : true_ranges)
	{
		REQUIRE(in(fn, r));
		REQUIRE(in_only<4>(fn, r));
		REQUIRE(in_only<7>(fn, r));
	}
	static constexpr wchar_t true_values[] = 
	{
		L'\u3007',
	};
	for (auto v : true_values)
	{
		REQUIRE(fn(v));
		REQUIRE(in_only<4>(fn, v));
		REQUIRE(in_only<7>(fn, v));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ L'\0', L'\u065F' }, { L'\u066A', L'\u06EF' }, { L'\u06FA', L'\u07BF' },
		{ L'\u07CA', L'\u0965' }, { L'\u0970', L'\u09E5' }, { L'\u09F0', L'\u0A65' },
		{ L'\u0A70', L'\u0AE5' }, { L'\u0AF0', L'\u0B65' }, { L'\u0B70', L'\u0BE5' },
		{ L'\u0BF0', L'\u0C65' }, { L'\u0C70', L'\u0CE5' }, { L'\u0CF0', L'\u0D65' },
		{ L'\u0D70', L'\u0DE5' }, { L'\u0DF0', L'\u0E4F' }, { L'\u0E5A', L'\u0ECF' },
		{ L'\u0EDA', L'\u0F1F' }, { L'\u0F2A', L'\u103F' }, { L'\u104A', L'\u108F' },
		{ L'\u109A', L'\u16ED' }, { L'\u16F1', L'\u17DF' }, { L'\u17EA', L'\u180F' },
		{ L'\u181A', L'\u1945' }, { L'\u1950', L'\u19CF' }, { L'\u19DA', L'\u1A7F' },
		{ L'\u1A8A', L'\u1A8F' }, { L'\u1A9A', L'\u1B4F' }, { L'\u1B5A', L'\u1BAF' },
		{ L'\u1BBA', L'\u1C3F' }, { L'\u1C4A', L'\u1C4F' }, { L'\u1C5A', L'\u215F' },
		{ L'\u2183', L'\u2184' }, { L'\u2189', L'\u3006' }, { L'\u3008', L'\u3020' },
		{ L'\u302A', L'\u3037' }, { L'\u303B', L'\uA61F' }, { L'\uA62A', L'\uA6E5' },
		{ L'\uA6F0', L'\uA8CF' }, { L'\uA8DA', L'\uA8FF' }, { L'\uA90A', L'\uA9CF' },
		{ L'\uA9DA', L'\uA9EF' }, { L'\uA9FA', L'\uAA4F' }, { L'\uAA5A', L'\uABEF' },
		{ L'\uABFA', L'\uFF0F' }, { L'\uFF1A', L'\uFFFF' },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_ascii_hyphen (wchar_t)")
{
	using namespace impl;
	static constexpr auto fn = static_cast<code_unit_func<wchar_t>*>(is_ascii_hyphen);
 
	// values which should return true
	static constexpr wchar_t true_values[] = 
	{
		L'-',
	};
	for (auto v : true_values)
	{
		REQUIRE(fn(v));
		REQUIRE(in_only<5>(fn, v));
		REQUIRE(in_only<7>(fn, v));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ L'\0', L',' }, { L'.', L'\xFF' },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_unicode_hyphen (wchar_t)")
{
	using namespace impl;
	static constexpr auto fn = static_cast<code_unit_func<wchar_t>*>(is_unicode_hyphen);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ L'\u2010', L'\u2011' },
	};
	for (const auto& r : true_ranges)
	{
		REQUIRE(in(fn, r));
		REQUIRE(in_only<5>(fn, r));
		REQUIRE(in_only<7>(fn, r));
	}
	static constexpr wchar_t true_values[] = 
	{
		L'\xAD', L'\u058A', L'\u1806', L'\u2E17', L'\u30FB', L'\uFE63',
		L'\uFF0D', L'\uFF65',
	};
	for (auto v : true_values)
	{
		REQUIRE(fn(v));
		REQUIRE(in_only<5>(fn, v));
		REQUIRE(in_only<7>(fn, v));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ L'\0', L'\xAC' }, { L'\xAE', L'\u0589' }, { L'\u058B', L'\u1805' },
		{ L'\u1807', L'\u200F' }, { L'\u2012', L'\u2E16' }, { L'\u2E18', L'\u30FA' },
		{ L'\u30FC', L'\uFE62' }, { L'\uFE64', L'\uFF0C' }, { L'\uFF0E', L'\uFF64' },
		{ L'\uFF66', L'\uFFFF' },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_combining_mark (wchar_t)")
{
	using namespace impl;
	static constexpr auto fn = static_cast<code_unit_func<wchar_t>*>(is_combining_mark);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ L'\u0300', L'\u036F' }, { L'\u0483', L'\u0487' }, { L'\u0591', L'\u05BD' },
		{ L'\u05C1', L'\u05C2' }, { L'\u05C4', L'\u05C5' }, { L'\u0610', L'\u061A' },
		{ L'\u064B', L'\u065F' }, { L'\u06D6', L'\u06DC' }, { L'\u06DF', L'\u06E4' },
		{ L'\u06E7', L'\u06E8' }, { L'\u06EA', L'\u06ED' }, { L'\u0730', L'\u074A' },
		{ L'\u07A6', L'\u07B0' }, { L'\u07EB', L'\u07F3' }, { L'\u0816', L'\u0819' },
		{ L'\u081B', L'\u0823' }, { L'\u0825', L'\u0827' }, { L'\u0829', L'\u082D' },
		{ L'\u0859', L'\u085B' }, { L'\u08D3', L'\u08E1' }, { L'\u08E3', L'\u0903' },
		{ L'\u093A', L'\u093C' }, { L'\u093E', L'\u094F' }, { L'\u0951', L'\u0957' },
		{ L'\u0962', L'\u0963' }, { L'\u0981', L'\u0983' }, { L'\u09BE', L'\u09C4' },
		{ L'\u09C7', L'\u09C8' }, { L'\u09CB', L'\u09CD' }, { L'\u09E2', L'\u09E3' },
		{ L'\u0A01', L'\u0A03' }, { L'\u0A3E', L'\u0A42' }, { L'\u0A47', L'\u0A48' },
		{ L'\u0A4B', L'\u0A4D' }, { L'\u0A70', L'\u0A71' }, { L'\u0A81', L'\u0A83' },
		{ L'\u0ABE', L'\u0AC5' }, { L'\u0AC7', L'\u0AC9' }, { L'\u0ACB', L'\u0ACD' },
		{ L'\u0AE2', L'\u0AE3' }, { L'\u0AFA', L'\u0AFF' }, { L'\u0B01', L'\u0B03' },
		{ L'\u0B3E', L'\u0B44' }, { L'\u0B47', L'\u0B48' }, { L'\u0B4B', L'\u0B4D' },
		{ L'\u0B55', L'\u0B57' }, { L'\u0B62', L'\u0B63' }, { L'\u0BBE', L'\u0BC2' },
		{ L'\u0BC6', L'\u0BC8' }, { L'\u0BCA', L'\u0BCD' }, { L'\u0C00', L'\u0C04' },
		{ L'\u0C3E', L'\u0C44' }, { L'\u0C46', L'\u0C48' }, { L'\u0C4A', L'\u0C4D' },
		{ L'\u0C55', L'\u0C56' }, { L'\u0C62', L'\u0C63' }, { L'\u0C81', L'\u0C83' },
		{ L'\u0CBE', L'\u0CC4' }, { L'\u0CC6', L'\u0CC8' }, { L'\u0CCA', L'\u0CCD' },
		{ L'\u0CD5', L'\u0CD6' }, { L'\u0CE2', L'\u0CE3' }, { L'\u0D00', L'\u0D03' },
		{ L'\u0D3B', L'\u0D3C' }, { L'\u0D3E', L'\u0D44' }, { L'\u0D46', L'\u0D48' },
		{ L'\u0D4A', L'\u0D4D' }, { L'\u0D62', L'\u0D63' }, { L'\u0D81', L'\u0D83' },
		{ L'\u0DCF', L'\u0DD4' }, { L'\u0DD8', L'\u0DDF' }, { L'\u0DF2', L'\u0DF3' },
		{ L'\u0E34', L'\u0E3A' }, { L'\u0E47', L'\u0E4E' }, { L'\u0EB4', L'\u0EBC' },
		{ L'\u0EC8', L'\u0ECD' }, { L'\u0F18', L'\u0F19' }, { L'\u0F3E', L'\u0F3F' },
		{ L'\u0F71', L'\u0F84' }, { L'\u0F86', L'\u0F87' }, { L'\u0F8D', L'\u0F97' },
		{ L'\u0F99', L'\u0FBC' }, { L'\u102B', L'\u103E' }, { L'\u1056', L'\u1059' },
		{ L'\u105E', L'\u1060' }, { L'\u1062', L'\u1064' }, { L'\u1067', L'\u106D' },
		{ L'\u1071', L'\u1074' }, { L'\u1082', L'\u108D' }, { L'\u109A', L'\u109D' },
		{ L'\u135D', L'\u135F' }, { L'\u1712', L'\u1714' }, { L'\u1732', L'\u1734' },
		{ L'\u1752', L'\u1753' }, { L'\u1772', L'\u1773' }, { L'\u17B4', L'\u17D3' },
		{ L'\u180B', L'\u180D' }, { L'\u1885', L'\u1886' }, { L'\u1920', L'\u192B' },
		{ L'\u1930', L'\u193B' }, { L'\u1A17', L'\u1A1B' }, { L'\u1A55', L'\u1A5E' },
		{ L'\u1A60', L'\u1A7C' }, { L'\u1AB0', L'\u1ABD' }, { L'\u1ABF', L'\u1AC0' },
		{ L'\u1B00', L'\u1B04' }, { L'\u1B34', L'\u1B44' }, { L'\u1B6B', L'\u1B73' },
		{ L'\u1B80', L'\u1B82' }, { L'\u1BA1', L'\u1BAD' }, { L'\u1BE6', L'\u1BF3' },
		{ L'\u1C24', L'\u1C37' }, { L'\u1CD0', L'\u1CD2' }, { L'\u1CD4', L'\u1CE8' },
		{ L'\u1CF7', L'\u1CF9' }, { L'\u1DC0', L'\u1DF9' }, { L'\u1DFB', L'\u1DFF' },
		{ L'\u20D0', L'\u20DC' }, { L'\u20E5', L'\u20F0' }, { L'\u2CEF', L'\u2CF1' },
		{ L'\u2DE0', L'\u2DFF' }, { L'\u302A', L'\u302F' }, { L'\u3099', L'\u309A' },
		{ L'\uA674', L'\uA67D' }, { L'\uA69E', L'\uA69F' }, { L'\uA6F0', L'\uA6F1' },
		{ L'\uA823', L'\uA827' }, { L'\uA880', L'\uA881' }, { L'\uA8B4', L'\uA8C5' },
		{ L'\uA8E0', L'\uA8F1' }, { L'\uA926', L'\uA92D' }, { L'\uA947', L'\uA953' },
		{ L'\uA980', L'\uA983' }, { L'\uA9B3', L'\uA9C0' }, { L'\uAA29', L'\uAA36' },
		{ L'\uAA4C', L'\uAA4D' }, { L'\uAA7B', L'\uAA7D' }, { L'\uAAB2', L'\uAAB4' },
		{ L'\uAAB7', L'\uAAB8' }, { L'\uAABE', L'\uAABF' }, { L'\uAAEB', L'\uAAEF' },
		{ L'\uAAF5', L'\uAAF6' }, { L'\uABE3', L'\uABEA' }, { L'\uABEC', L'\uABED' },
		{ L'\uFE00', L'\uFE0F' }, { L'\uFE20', L'\uFE2F' },
	};
	for (const auto& r : true_ranges)
	{
		REQUIRE(in(fn, r));
		REQUIRE(in_only<7>(fn, r));
	}
	static constexpr wchar_t true_values[] = 
	{
		L'\u05BF', L'\u05C7', L'\u0670', L'\u0711', L'\u07FD', L'\u09BC',
		L'\u09D7', L'\u09FE', L'\u0A3C', L'\u0A51', L'\u0A75', L'\u0ABC',
		L'\u0B3C', L'\u0B82', L'\u0BD7', L'\u0CBC', L'\u0D57', L'\u0DCA',
		L'\u0DD6', L'\u0E31', L'\u0EB1', L'\u0F35', L'\u0F37', L'\u0F39',
		L'\u0FC6', L'\u108F', L'\u17DD', L'\u18A9', L'\u1A7F', L'\u1CED',
		L'\u1CF4', L'\u20E1', L'\u2D7F', L'\uA66F', L'\uA802', L'\uA806',
		L'\uA80B', L'\uA82C', L'\uA8FF', L'\uA9E5', L'\uAA43', L'\uAAB0',
		L'\uAAC1', L'\uFB1E',
	};
	for (auto v : true_values)
	{
		REQUIRE(fn(v));
		REQUIRE(in_only<7>(fn, v));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ L'\0', L'\u02FF' }, { L'\u0370', L'\u0482' }, { L'\u0488', L'\u0590' },
		{ L'\u05C8', L'\u060F' }, { L'\u061B', L'\u064A' }, { L'\u0660', L'\u066F' },
		{ L'\u0671', L'\u06D5' }, { L'\u06DD', L'\u06DE' }, { L'\u06E5', L'\u06E6' },
		{ L'\u06EE', L'\u0710' }, { L'\u0712', L'\u072F' }, { L'\u074B', L'\u07A5' },
		{ L'\u07B1', L'\u07EA' }, { L'\u07F4', L'\u07FC' }, { L'\u07FE', L'\u0815' },
		{ L'\u082E', L'\u0858' }, { L'\u085C', L'\u08D2' }, { L'\u0904', L'\u0939' },
		{ L'\u0958', L'\u0961' }, { L'\u0964', L'\u0980' }, { L'\u0984', L'\u09BB' },
		{ L'\u09C5', L'\u09C6' }, { L'\u09C9', L'\u09CA' }, { L'\u09CE', L'\u09D6' },
		{ L'\u09D8', L'\u09E1' }, { L'\u09E4', L'\u09FD' }, { L'\u09FF', L'\u0A00' },
		{ L'\u0A04', L'\u0A3B' }, { L'\u0A43', L'\u0A46' }, { L'\u0A49', L'\u0A4A' },
		{ L'\u0A4E', L'\u0A50' }, { L'\u0A52', L'\u0A6F' }, { L'\u0A72', L'\u0A74' },
		{ L'\u0A76', L'\u0A80' }, { L'\u0A84', L'\u0ABB' }, { L'\u0ACE', L'\u0AE1' },
		{ L'\u0AE4', L'\u0AF9' }, { L'\u0B04', L'\u0B3B' }, { L'\u0B45', L'\u0B46' },
		{ L'\u0B49', L'\u0B4A' }, { L'\u0B4E', L'\u0B54' }, { L'\u0B58', L'\u0B61' },
		{ L'\u0B64', L'\u0B81' }, { L'\u0B83', L'\u0BBD' }, { L'\u0BC3', L'\u0BC5' },
		{ L'\u0BCE', L'\u0BD6' }, { L'\u0BD8', L'\u0BFF' }, { L'\u0C05', L'\u0C3D' },
		{ L'\u0C4E', L'\u0C54' }, { L'\u0C57', L'\u0C61' }, { L'\u0C64', L'\u0C80' },
		{ L'\u0C84', L'\u0CBB' }, { L'\u0CCE', L'\u0CD4' }, { L'\u0CD7', L'\u0CE1' },
		{ L'\u0CE4', L'\u0CFF' }, { L'\u0D04', L'\u0D3A' }, { L'\u0D4E', L'\u0D56' },
		{ L'\u0D58', L'\u0D61' }, { L'\u0D64', L'\u0D80' }, { L'\u0D84', L'\u0DC9' },
		{ L'\u0DCB', L'\u0DCE' }, { L'\u0DE0', L'\u0DF1' }, { L'\u0DF4', L'\u0E30' },
		{ L'\u0E32', L'\u0E33' }, { L'\u0E3B', L'\u0E46' }, { L'\u0E4F', L'\u0EB0' },
		{ L'\u0EB2', L'\u0EB3' }, { L'\u0EBD', L'\u0EC7' }, { L'\u0ECE', L'\u0F17' },
		{ L'\u0F1A', L'\u0F34' }, { L'\u0F3A', L'\u0F3D' }, { L'\u0F40', L'\u0F70' },
		{ L'\u0F88', L'\u0F8C' }, { L'\u0FBD', L'\u0FC5' }, { L'\u0FC7', L'\u102A' },
		{ L'\u103F', L'\u1055' }, { L'\u105A', L'\u105D' }, { L'\u1065', L'\u1066' },
		{ L'\u106E', L'\u1070' }, { L'\u1075', L'\u1081' }, { L'\u1090', L'\u1099' },
		{ L'\u109E', L'\u135C' }, { L'\u1360', L'\u1711' }, { L'\u1715', L'\u1731' },
		{ L'\u1735', L'\u1751' }, { L'\u1754', L'\u1771' }, { L'\u1774', L'\u17B3' },
		{ L'\u17D4', L'\u17DC' }, { L'\u17DE', L'\u180A' }, { L'\u180E', L'\u1884' },
		{ L'\u1887', L'\u18A8' }, { L'\u18AA', L'\u191F' }, { L'\u192C', L'\u192F' },
		{ L'\u193C', L'\u1A16' }, { L'\u1A1C', L'\u1A54' }, { L'\u1A7D', L'\u1A7E' },
		{ L'\u1A80', L'\u1AAF' }, { L'\u1AC1', L'\u1AFF' }, { L'\u1B05', L'\u1B33' },
		{ L'\u1B45', L'\u1B6A' }, { L'\u1B74', L'\u1B7F' }, { L'\u1B83', L'\u1BA0' },
		{ L'\u1BAE', L'\u1BE5' }, { L'\u1BF4', L'\u1C23' }, { L'\u1C38', L'\u1CCF' },
		{ L'\u1CE9', L'\u1CEC' }, { L'\u1CEE', L'\u1CF3' }, { L'\u1CF5', L'\u1CF6' },
		{ L'\u1CFA', L'\u1DBF' }, { L'\u1E00', L'\u20CF' }, { L'\u20DD', L'\u20E0' },
		{ L'\u20E2', L'\u20E4' }, { L'\u20F1', L'\u2CEE' }, { L'\u2CF2', L'\u2D7E' },
		{ L'\u2D80', L'\u2DDF' }, { L'\u2E00', L'\u3029' }, { L'\u3030', L'\u3098' },
		{ L'\u309B', L'\uA66E' }, { L'\uA670', L'\uA673' }, { L'\uA67E', L'\uA69D' },
		{ L'\uA6A0', L'\uA6EF' }, { L'\uA6F2', L'\uA801' }, { L'\uA803', L'\uA805' },
		{ L'\uA807', L'\uA80A' }, { L'\uA80C', L'\uA822' }, { L'\uA828', L'\uA82B' },
		{ L'\uA82D', L'\uA87F' }, { L'\uA882', L'\uA8B3' }, { L'\uA8C6', L'\uA8DF' },
		{ L'\uA8F2', L'\uA8FE' }, { L'\uA900', L'\uA925' }, { L'\uA92E', L'\uA946' },
		{ L'\uA954', L'\uA97F' }, { L'\uA984', L'\uA9B2' }, { L'\uA9C1', L'\uA9E4' },
		{ L'\uA9E6', L'\uAA28' }, { L'\uAA37', L'\uAA42' }, { L'\uAA44', L'\uAA4B' },
		{ L'\uAA4E', L'\uAA7A' }, { L'\uAA7E', L'\uAAAF' }, { L'\uAAB5', L'\uAAB6' },
		{ L'\uAAB9', L'\uAABD' }, { L'\uAAC2', L'\uAAEA' }, { L'\uAAF0', L'\uAAF4' },
		{ L'\uAAF7', L'\uABE2' }, { L'\uABEE', L'\uFB1D' }, { L'\uFB1F', L'\uFDFF' },
		{ L'\uFE10', L'\uFE1F' }, { L'\uFE30', L'\uFFFF' },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
	static constexpr wchar_t false_values[] = 
	{
		L'\u05BE', L'\u05C0', L'\u05C3', L'\u05C6', L'\u06E9', L'\u081A',
		L'\u0824', L'\u0828', L'\u08E2', L'\u093D', L'\u0950', L'\u09BD',
		L'\u0A3D', L'\u0ABD', L'\u0AC6', L'\u0ACA', L'\u0B00', L'\u0B3D',
		L'\u0BC9', L'\u0C45', L'\u0C49', L'\u0CBD', L'\u0CC5', L'\u0CC9',
		L'\u0D3D', L'\u0D45', L'\u0D49', L'\u0DD5', L'\u0DD7', L'\u0F36',
		L'\u0F38', L'\u0F85', L'\u0F98', L'\u1061', L'\u108E', L'\u1A5F',
		L'\u1ABE', L'\u1CD3', L'\u1DFA', L'\uAAB1', L'\uAAC0', L'\uABEB',
	};
	for (auto v : false_values)
		REQUIRE(!fn(v));
}

TEST_CASE("unicode - is_octal_digit (wchar_t)")
{
	using namespace impl;
	static constexpr auto fn = static_cast<code_unit_func<wchar_t>*>(is_octal_digit);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ L'0', L'7' },
	};
	for (const auto& r : true_ranges)
		REQUIRE(in(fn, r));
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ L'\0', L'/' }, { L'8', L'\uFFFF' },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_decimal_digit (wchar_t)")
{
	using namespace impl;
	static constexpr auto fn = static_cast<code_unit_func<wchar_t>*>(is_decimal_digit);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ L'0', L'9' },
	};
	for (const auto& r : true_ranges)
		REQUIRE(in(fn, r));
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ L'\0', L'/' }, { L':', L'\uFFFF' },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_hexadecimal_digit (wchar_t)")
{
	using namespace impl;
	static constexpr auto fn = static_cast<code_unit_func<wchar_t>*>(is_hexadecimal_digit);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ L'0', L'9' }, { L'A', L'F' }, { L'a', L'f' },
	};
	for (const auto& r : true_ranges)
		REQUIRE(in(fn, r));
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ L'\0', L'/' }, { L':', L'@' }, { L'G', L'`' },
		{ L'g', L'\uFFFF' },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
}

TEST_CASE("unicode - is_uppercase (wchar_t)")
{
	using namespace impl;
	static constexpr auto fn = static_cast<code_unit_func<wchar_t>*>(is_uppercase);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ L'A', L'Z' }, { L'\xC0', L'\xD6' }, { L'\xD8', L'\xDE' },
		{ L'\u0178', L'\u0179' }, { L'\u0181', L'\u0182' }, { L'\u0186', L'\u0187' },
		{ L'\u0189', L'\u018B' }, { L'\u018E', L'\u0191' }, { L'\u0193', L'\u0194' },
		{ L'\u0196', L'\u0198' }, { L'\u019C', L'\u019D' }, { L'\u019F', L'\u01A0' },
		{ L'\u01A6', L'\u01A7' }, { L'\u01AE', L'\u01AF' }, { L'\u01B1', L'\u01B3' },
		{ L'\u01B7', L'\u01B8' }, { L'\u01F6', L'\u01F8' }, { L'\u023A', L'\u023B' },
		{ L'\u023D', L'\u023E' }, { L'\u0243', L'\u0246' }, { L'\u0388', L'\u038A' },
		{ L'\u038E', L'\u038F' }, { L'\u0391', L'\u03A1' }, { L'\u03A3', L'\u03AB' },
		{ L'\u03D2', L'\u03D4' }, { L'\u03F9', L'\u03FA' }, { L'\u03FD', L'\u042F' },
		{ L'\u04C0', L'\u04C1' }, { L'\u0531', L'\u0556' }, { L'\u10A0', L'\u10C5' },
		{ L'\u13A0', L'\u13F5' }, { L'\u1C90', L'\u1CBA' }, { L'\u1CBD', L'\u1CBF' },
		{ L'\u1F08', L'\u1F0F' }, { L'\u1F18', L'\u1F1D' }, { L'\u1F28', L'\u1F2F' },
		{ L'\u1F38', L'\u1F3F' }, { L'\u1F48', L'\u1F4D' }, { L'\u1F68', L'\u1F6F' },
		{ L'\u1FB8', L'\u1FBB' }, { L'\u1FC8', L'\u1FCB' }, { L'\u1FD8', L'\u1FDB' },
		{ L'\u1FE8', L'\u1FEC' }, { L'\u1FF8', L'\u1FFB' }, { L'\u210B', L'\u210D' },
		{ L'\u2110', L'\u2112' }, { L'\u2119', L'\u211D' }, { L'\u212A', L'\u212D' },
		{ L'\u2130', L'\u2133' }, { L'\u213E', L'\u213F' }, { L'\u2160', L'\u216F' },
		{ L'\u24B6', L'\u24CF' }, { L'\u2C00', L'\u2C2E' }, { L'\u2C62', L'\u2C64' },
		{ L'\u2C6D', L'\u2C70' }, { L'\u2C7E', L'\u2C80' }, { L'\uA77D', L'\uA77E' },
		{ L'\uA7AA', L'\uA7AE' }, { L'\uA7B0', L'\uA7B4' }, { L'\uA7C4', L'\uA7C7' },
		{ L'\uFF21', L'\uFF3A' },
	};
	for (const auto& r : true_ranges)
	{
		REQUIRE(in(fn, r));
		REQUIRE(in_only<6>(fn, r));
	}
	static constexpr wchar_t true_values[] = 
	{
		L'\u0100', L'\u0102', L'\u0104', L'\u0106', L'\u0108', L'\u010A',
		L'\u010C', L'\u010E', L'\u0110', L'\u0112', L'\u0114', L'\u0116',
		L'\u0118', L'\u011A', L'\u011C', L'\u011E', L'\u0120', L'\u0122',
		L'\u0124', L'\u0126', L'\u0128', L'\u012A', L'\u012C', L'\u012E',
		L'\u0130', L'\u0132', L'\u0134', L'\u0136', L'\u0139', L'\u013B',
		L'\u013D', L'\u013F', L'\u0141', L'\u0143', L'\u0145', L'\u0147',
		L'\u014A', L'\u014C', L'\u014E', L'\u0150', L'\u0152', L'\u0154',
		L'\u0156', L'\u0158', L'\u015A', L'\u015C', L'\u015E', L'\u0160',
		L'\u0162', L'\u0164', L'\u0166', L'\u0168', L'\u016A', L'\u016C',
		L'\u016E', L'\u0170', L'\u0172', L'\u0174', L'\u0176', L'\u017B',
		L'\u017D', L'\u0184', L'\u01A2', L'\u01A4', L'\u01A9', L'\u01AC',
		L'\u01B5', L'\u01BC', L'\u01C4', L'\u01C7', L'\u01CA', L'\u01CD',
		L'\u01CF', L'\u01D1', L'\u01D3', L'\u01D5', L'\u01D7', L'\u01D9',
		L'\u01DB', L'\u01DE', L'\u01E0', L'\u01E2', L'\u01E4', L'\u01E6',
		L'\u01E8', L'\u01EA', L'\u01EC', L'\u01EE', L'\u01F1', L'\u01F4',
		L'\u01FA', L'\u01FC', L'\u01FE', L'\u0200', L'\u0202', L'\u0204',
		L'\u0206', L'\u0208', L'\u020A', L'\u020C', L'\u020E', L'\u0210',
		L'\u0212', L'\u0214', L'\u0216', L'\u0218', L'\u021A', L'\u021C',
		L'\u021E', L'\u0220', L'\u0222', L'\u0224', L'\u0226', L'\u0228',
		L'\u022A', L'\u022C', L'\u022E', L'\u0230', L'\u0232', L'\u0241',
		L'\u0248', L'\u024A', L'\u024C', L'\u024E', L'\u0370', L'\u0372',
		L'\u0376', L'\u037F', L'\u0386', L'\u038C', L'\u03CF', L'\u03D8',
		L'\u03DA', L'\u03DC', L'\u03DE', L'\u03E0', L'\u03E2', L'\u03E4',
		L'\u03E6', L'\u03E8', L'\u03EA', L'\u03EC', L'\u03EE', L'\u03F4',
		L'\u03F7', L'\u0460', L'\u0462', L'\u0464', L'\u0466', L'\u0468',
		L'\u046A', L'\u046C', L'\u046E', L'\u0470', L'\u0472', L'\u0474',
		L'\u0476', L'\u0478', L'\u047A', L'\u047C', L'\u047E', L'\u0480',
		L'\u048A', L'\u048C', L'\u048E', L'\u0490', L'\u0492', L'\u0494',
		L'\u0496', L'\u0498', L'\u049A', L'\u049C', L'\u049E', L'\u04A0',
		L'\u04A2', L'\u04A4', L'\u04A6', L'\u04A8', L'\u04AA', L'\u04AC',
		L'\u04AE', L'\u04B0', L'\u04B2', L'\u04B4', L'\u04B6', L'\u04B8',
		L'\u04BA', L'\u04BC', L'\u04BE', L'\u04C3', L'\u04C5', L'\u04C7',
		L'\u04C9', L'\u04CB', L'\u04CD', L'\u04D0', L'\u04D2', L'\u04D4',
		L'\u04D6', L'\u04D8', L'\u04DA', L'\u04DC', L'\u04DE', L'\u04E0',
		L'\u04E2', L'\u04E4', L'\u04E6', L'\u04E8', L'\u04EA', L'\u04EC',
		L'\u04EE', L'\u04F0', L'\u04F2', L'\u04F4', L'\u04F6', L'\u04F8',
		L'\u04FA', L'\u04FC', L'\u04FE', L'\u0500', L'\u0502', L'\u0504',
		L'\u0506', L'\u0508', L'\u050A', L'\u050C', L'\u050E', L'\u0510',
		L'\u0512', L'\u0514', L'\u0516', L'\u0518', L'\u051A', L'\u051C',
		L'\u051E', L'\u0520', L'\u0522', L'\u0524', L'\u0526', L'\u0528',
		L'\u052A', L'\u052C', L'\u052E', L'\u10C7', L'\u10CD', L'\u1E00',
		L'\u1E02', L'\u1E04', L'\u1E06', L'\u1E08', L'\u1E0A', L'\u1E0C',
		L'\u1E0E', L'\u1E10', L'\u1E12', L'\u1E14', L'\u1E16', L'\u1E18',
		L'\u1E1A', L'\u1E1C', L'\u1E1E', L'\u1E20', L'\u1E22', L'\u1E24',
		L'\u1E26', L'\u1E28', L'\u1E2A', L'\u1E2C', L'\u1E2E', L'\u1E30',
		L'\u1E32', L'\u1E34', L'\u1E36', L'\u1E38', L'\u1E3A', L'\u1E3C',
		L'\u1E3E', L'\u1E40', L'\u1E42', L'\u1E44', L'\u1E46', L'\u1E48',
		L'\u1E4A', L'\u1E4C', L'\u1E4E', L'\u1E50', L'\u1E52', L'\u1E54',
		L'\u1E56', L'\u1E58', L'\u1E5A', L'\u1E5C', L'\u1E5E', L'\u1E60',
		L'\u1E62', L'\u1E64', L'\u1E66', L'\u1E68', L'\u1E6A', L'\u1E6C',
		L'\u1E6E', L'\u1E70', L'\u1E72', L'\u1E74', L'\u1E76', L'\u1E78',
		L'\u1E7A', L'\u1E7C', L'\u1E7E', L'\u1E80', L'\u1E82', L'\u1E84',
		L'\u1E86', L'\u1E88', L'\u1E8A', L'\u1E8C', L'\u1E8E', L'\u1E90',
		L'\u1E92', L'\u1E94', L'\u1E9E', L'\u1EA0', L'\u1EA2', L'\u1EA4',
		L'\u1EA6', L'\u1EA8', L'\u1EAA', L'\u1EAC', L'\u1EAE', L'\u1EB0',
		L'\u1EB2', L'\u1EB4', L'\u1EB6', L'\u1EB8', L'\u1EBA', L'\u1EBC',
		L'\u1EBE', L'\u1EC0', L'\u1EC2', L'\u1EC4', L'\u1EC6', L'\u1EC8',
		L'\u1ECA', L'\u1ECC', L'\u1ECE', L'\u1ED0', L'\u1ED2', L'\u1ED4',
		L'\u1ED6', L'\u1ED8', L'\u1EDA', L'\u1EDC', L'\u1EDE', L'\u1EE0',
		L'\u1EE2', L'\u1EE4', L'\u1EE6', L'\u1EE8', L'\u1EEA', L'\u1EEC',
		L'\u1EEE', L'\u1EF0', L'\u1EF2', L'\u1EF4', L'\u1EF6', L'\u1EF8',
		L'\u1EFA', L'\u1EFC', L'\u1EFE', L'\u1F59', L'\u1F5B', L'\u1F5D',
		L'\u1F5F', L'\u2102', L'\u2107', L'\u2115', L'\u2124', L'\u2126',
		L'\u2128', L'\u2145', L'\u2183', L'\u2C60', L'\u2C67', L'\u2C69',
		L'\u2C6B', L'\u2C72', L'\u2C75', L'\u2C82', L'\u2C84', L'\u2C86',
		L'\u2C88', L'\u2C8A', L'\u2C8C', L'\u2C8E', L'\u2C90', L'\u2C92',
		L'\u2C94', L'\u2C96', L'\u2C98', L'\u2C9A', L'\u2C9C', L'\u2C9E',
		L'\u2CA0', L'\u2CA2', L'\u2CA4', L'\u2CA6', L'\u2CA8', L'\u2CAA',
		L'\u2CAC', L'\u2CAE', L'\u2CB0', L'\u2CB2', L'\u2CB4', L'\u2CB6',
		L'\u2CB8', L'\u2CBA', L'\u2CBC', L'\u2CBE', L'\u2CC0', L'\u2CC2',
		L'\u2CC4', L'\u2CC6', L'\u2CC8', L'\u2CCA', L'\u2CCC', L'\u2CCE',
		L'\u2CD0', L'\u2CD2', L'\u2CD4', L'\u2CD6', L'\u2CD8', L'\u2CDA',
		L'\u2CDC', L'\u2CDE', L'\u2CE0', L'\u2CE2', L'\u2CEB', L'\u2CED',
		L'\u2CF2', L'\uA640', L'\uA642', L'\uA644', L'\uA646', L'\uA648',
		L'\uA64A', L'\uA64C', L'\uA64E', L'\uA650', L'\uA652', L'\uA654',
		L'\uA656', L'\uA658', L'\uA65A', L'\uA65C', L'\uA65E', L'\uA660',
		L'\uA662', L'\uA664', L'\uA666', L'\uA668', L'\uA66A', L'\uA66C',
		L'\uA680', L'\uA682', L'\uA684', L'\uA686', L'\uA688', L'\uA68A',
		L'\uA68C', L'\uA68E', L'\uA690', L'\uA692', L'\uA694', L'\uA696',
		L'\uA698', L'\uA69A', L'\uA722', L'\uA724', L'\uA726', L'\uA728',
		L'\uA72A', L'\uA72C', L'\uA72E', L'\uA732', L'\uA734', L'\uA736',
		L'\uA738', L'\uA73A', L'\uA73C', L'\uA73E', L'\uA740', L'\uA742',
		L'\uA744', L'\uA746', L'\uA748', L'\uA74A', L'\uA74C', L'\uA74E',
		L'\uA750', L'\uA752', L'\uA754', L'\uA756', L'\uA758', L'\uA75A',
		L'\uA75C', L'\uA75E', L'\uA760', L'\uA762', L'\uA764', L'\uA766',
		L'\uA768', L'\uA76A', L'\uA76C', L'\uA76E', L'\uA779', L'\uA77B',
		L'\uA780', L'\uA782', L'\uA784', L'\uA786', L'\uA78B', L'\uA78D',
		L'\uA790', L'\uA792', L'\uA796', L'\uA798', L'\uA79A', L'\uA79C',
		L'\uA79E', L'\uA7A0', L'\uA7A2', L'\uA7A4', L'\uA7A6', L'\uA7A8',
		L'\uA7B6', L'\uA7B8', L'\uA7BA', L'\uA7BC', L'\uA7BE', L'\uA7C2',
		L'\uA7C9', L'\uA7F5',
	};
	for (auto v : true_values)
	{
		REQUIRE(fn(v));
		REQUIRE(in_only<6>(fn, v));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ L'\0', L'@' }, { L'[', L'\xBF' }, { L'\xDF', L'\xFF' },
		{ L'\u0137', L'\u0138' }, { L'\u0148', L'\u0149' }, { L'\u017E', L'\u0180' },
		{ L'\u018C', L'\u018D' }, { L'\u0199', L'\u019B' }, { L'\u01AA', L'\u01AB' },
		{ L'\u01B9', L'\u01BB' }, { L'\u01BD', L'\u01C3' }, { L'\u01C5', L'\u01C6' },
		{ L'\u01C8', L'\u01C9' }, { L'\u01CB', L'\u01CC' }, { L'\u01DC', L'\u01DD' },
		{ L'\u01EF', L'\u01F0' }, { L'\u01F2', L'\u01F3' }, { L'\u0233', L'\u0239' },
		{ L'\u023F', L'\u0240' }, { L'\u024F', L'\u036F' }, { L'\u0373', L'\u0375' },
		{ L'\u0377', L'\u037E' }, { L'\u0380', L'\u0385' }, { L'\u03AC', L'\u03CE' },
		{ L'\u03D0', L'\u03D1' }, { L'\u03D5', L'\u03D7' }, { L'\u03EF', L'\u03F3' },
		{ L'\u03F5', L'\u03F6' }, { L'\u03FB', L'\u03FC' }, { L'\u0430', L'\u045F' },
		{ L'\u0481', L'\u0489' }, { L'\u04CE', L'\u04CF' }, { L'\u052F', L'\u0530' },
		{ L'\u0557', L'\u109F' }, { L'\u10C8', L'\u10CC' }, { L'\u10CE', L'\u139F' },
		{ L'\u13F6', L'\u1C8F' }, { L'\u1CBB', L'\u1CBC' }, { L'\u1CC0', L'\u1DFF' },
		{ L'\u1E95', L'\u1E9D' }, { L'\u1EFF', L'\u1F07' }, { L'\u1F10', L'\u1F17' },
		{ L'\u1F1E', L'\u1F27' }, { L'\u1F30', L'\u1F37' }, { L'\u1F40', L'\u1F47' },
		{ L'\u1F4E', L'\u1F58' }, { L'\u1F60', L'\u1F67' }, { L'\u1F70', L'\u1FB7' },
		{ L'\u1FBC', L'\u1FC7' }, { L'\u1FCC', L'\u1FD7' }, { L'\u1FDC', L'\u1FE7' },
		{ L'\u1FED', L'\u1FF7' }, { L'\u1FFC', L'\u2101' }, { L'\u2103', L'\u2106' },
		{ L'\u2108', L'\u210A' }, { L'\u210E', L'\u210F' }, { L'\u2113', L'\u2114' },
		{ L'\u2116', L'\u2118' }, { L'\u211E', L'\u2123' }, { L'\u212E', L'\u212F' },
		{ L'\u2134', L'\u213D' }, { L'\u2140', L'\u2144' }, { L'\u2146', L'\u215F' },
		{ L'\u2170', L'\u2182' }, { L'\u2184', L'\u24B5' }, { L'\u24D0', L'\u2BFF' },
		{ L'\u2C2F', L'\u2C5F' }, { L'\u2C65', L'\u2C66' }, { L'\u2C73', L'\u2C74' },
		{ L'\u2C76', L'\u2C7D' }, { L'\u2CE3', L'\u2CEA' }, { L'\u2CEE', L'\u2CF1' },
		{ L'\u2CF3', L'\uA63F' }, { L'\uA66D', L'\uA67F' }, { L'\uA69B', L'\uA721' },
		{ L'\uA72F', L'\uA731' }, { L'\uA76F', L'\uA778' }, { L'\uA787', L'\uA78A' },
		{ L'\uA78E', L'\uA78F' }, { L'\uA793', L'\uA795' }, { L'\uA7BF', L'\uA7C1' },
		{ L'\uA7CA', L'\uA7F4' }, { L'\uA7F6', L'\uFF20' }, { L'\uFF3B', L'\uFFFF' },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
	static constexpr wchar_t false_values[] = 
	{
		L'\xD7', L'\u0101', L'\u0103', L'\u0105', L'\u0107', L'\u0109',
		L'\u010B', L'\u010D', L'\u010F', L'\u0111', L'\u0113', L'\u0115',
		L'\u0117', L'\u0119', L'\u011B', L'\u011D', L'\u011F', L'\u0121',
		L'\u0123', L'\u0125', L'\u0127', L'\u0129', L'\u012B', L'\u012D',
		L'\u012F', L'\u0131', L'\u0133', L'\u0135', L'\u013A', L'\u013C',
		L'\u013E', L'\u0140', L'\u0142', L'\u0144', L'\u0146', L'\u014B',
		L'\u014D', L'\u014F', L'\u0151', L'\u0153', L'\u0155', L'\u0157',
		L'\u0159', L'\u015B', L'\u015D', L'\u015F', L'\u0161', L'\u0163',
		L'\u0165', L'\u0167', L'\u0169', L'\u016B', L'\u016D', L'\u016F',
		L'\u0171', L'\u0173', L'\u0175', L'\u0177', L'\u017A', L'\u017C',
		L'\u0183', L'\u0185', L'\u0188', L'\u0192', L'\u0195', L'\u019E',
		L'\u01A1', L'\u01A3', L'\u01A5', L'\u01A8', L'\u01AD', L'\u01B0',
		L'\u01B4', L'\u01B6', L'\u01CE', L'\u01D0', L'\u01D2', L'\u01D4',
		L'\u01D6', L'\u01D8', L'\u01DA', L'\u01DF', L'\u01E1', L'\u01E3',
		L'\u01E5', L'\u01E7', L'\u01E9', L'\u01EB', L'\u01ED', L'\u01F5',
		L'\u01F9', L'\u01FB', L'\u01FD', L'\u01FF', L'\u0201', L'\u0203',
		L'\u0205', L'\u0207', L'\u0209', L'\u020B', L'\u020D', L'\u020F',
		L'\u0211', L'\u0213', L'\u0215', L'\u0217', L'\u0219', L'\u021B',
		L'\u021D', L'\u021F', L'\u0221', L'\u0223', L'\u0225', L'\u0227',
		L'\u0229', L'\u022B', L'\u022D', L'\u022F', L'\u0231', L'\u023C',
		L'\u0242', L'\u0247', L'\u0249', L'\u024B', L'\u024D', L'\u0371',
		L'\u0387', L'\u038B', L'\u038D', L'\u0390', L'\u03A2', L'\u03D9',
		L'\u03DB', L'\u03DD', L'\u03DF', L'\u03E1', L'\u03E3', L'\u03E5',
		L'\u03E7', L'\u03E9', L'\u03EB', L'\u03ED', L'\u03F8', L'\u0461',
		L'\u0463', L'\u0465', L'\u0467', L'\u0469', L'\u046B', L'\u046D',
		L'\u046F', L'\u0471', L'\u0473', L'\u0475', L'\u0477', L'\u0479',
		L'\u047B', L'\u047D', L'\u047F', L'\u048B', L'\u048D', L'\u048F',
		L'\u0491', L'\u0493', L'\u0495', L'\u0497', L'\u0499', L'\u049B',
		L'\u049D', L'\u049F', L'\u04A1', L'\u04A3', L'\u04A5', L'\u04A7',
		L'\u04A9', L'\u04AB', L'\u04AD', L'\u04AF', L'\u04B1', L'\u04B3',
		L'\u04B5', L'\u04B7', L'\u04B9', L'\u04BB', L'\u04BD', L'\u04BF',
		L'\u04C2', L'\u04C4', L'\u04C6', L'\u04C8', L'\u04CA', L'\u04CC',
		L'\u04D1', L'\u04D3', L'\u04D5', L'\u04D7', L'\u04D9', L'\u04DB',
		L'\u04DD', L'\u04DF', L'\u04E1', L'\u04E3', L'\u04E5', L'\u04E7',
		L'\u04E9', L'\u04EB', L'\u04ED', L'\u04EF', L'\u04F1', L'\u04F3',
		L'\u04F5', L'\u04F7', L'\u04F9', L'\u04FB', L'\u04FD', L'\u04FF',
		L'\u0501', L'\u0503', L'\u0505', L'\u0507', L'\u0509', L'\u050B',
		L'\u050D', L'\u050F', L'\u0511', L'\u0513', L'\u0515', L'\u0517',
		L'\u0519', L'\u051B', L'\u051D', L'\u051F', L'\u0521', L'\u0523',
		L'\u0525', L'\u0527', L'\u0529', L'\u052B', L'\u052D', L'\u10C6',
		L'\u1E01', L'\u1E03', L'\u1E05', L'\u1E07', L'\u1E09', L'\u1E0B',
		L'\u1E0D', L'\u1E0F', L'\u1E11', L'\u1E13', L'\u1E15', L'\u1E17',
		L'\u1E19', L'\u1E1B', L'\u1E1D', L'\u1E1F', L'\u1E21', L'\u1E23',
		L'\u1E25', L'\u1E27', L'\u1E29', L'\u1E2B', L'\u1E2D', L'\u1E2F',
		L'\u1E31', L'\u1E33', L'\u1E35', L'\u1E37', L'\u1E39', L'\u1E3B',
		L'\u1E3D', L'\u1E3F', L'\u1E41', L'\u1E43', L'\u1E45', L'\u1E47',
		L'\u1E49', L'\u1E4B', L'\u1E4D', L'\u1E4F', L'\u1E51', L'\u1E53',
		L'\u1E55', L'\u1E57', L'\u1E59', L'\u1E5B', L'\u1E5D', L'\u1E5F',
		L'\u1E61', L'\u1E63', L'\u1E65', L'\u1E67', L'\u1E69', L'\u1E6B',
		L'\u1E6D', L'\u1E6F', L'\u1E71', L'\u1E73', L'\u1E75', L'\u1E77',
		L'\u1E79', L'\u1E7B', L'\u1E7D', L'\u1E7F', L'\u1E81', L'\u1E83',
		L'\u1E85', L'\u1E87', L'\u1E89', L'\u1E8B', L'\u1E8D', L'\u1E8F',
		L'\u1E91', L'\u1E93', L'\u1E9F', L'\u1EA1', L'\u1EA3', L'\u1EA5',
		L'\u1EA7', L'\u1EA9', L'\u1EAB', L'\u1EAD', L'\u1EAF', L'\u1EB1',
		L'\u1EB3', L'\u1EB5', L'\u1EB7', L'\u1EB9', L'\u1EBB', L'\u1EBD',
		L'\u1EBF', L'\u1EC1', L'\u1EC3', L'\u1EC5', L'\u1EC7', L'\u1EC9',
		L'\u1ECB', L'\u1ECD', L'\u1ECF', L'\u1ED1', L'\u1ED3', L'\u1ED5',
		L'\u1ED7', L'\u1ED9', L'\u1EDB', L'\u1EDD', L'\u1EDF', L'\u1EE1',
		L'\u1EE3', L'\u1EE5', L'\u1EE7', L'\u1EE9', L'\u1EEB', L'\u1EED',
		L'\u1EEF', L'\u1EF1', L'\u1EF3', L'\u1EF5', L'\u1EF7', L'\u1EF9',
		L'\u1EFB', L'\u1EFD', L'\u1F5A', L'\u1F5C', L'\u1F5E', L'\u2125',
		L'\u2127', L'\u2129', L'\u2C61', L'\u2C68', L'\u2C6A', L'\u2C6C',
		L'\u2C71', L'\u2C81', L'\u2C83', L'\u2C85', L'\u2C87', L'\u2C89',
		L'\u2C8B', L'\u2C8D', L'\u2C8F', L'\u2C91', L'\u2C93', L'\u2C95',
		L'\u2C97', L'\u2C99', L'\u2C9B', L'\u2C9D', L'\u2C9F', L'\u2CA1',
		L'\u2CA3', L'\u2CA5', L'\u2CA7', L'\u2CA9', L'\u2CAB', L'\u2CAD',
		L'\u2CAF', L'\u2CB1', L'\u2CB3', L'\u2CB5', L'\u2CB7', L'\u2CB9',
		L'\u2CBB', L'\u2CBD', L'\u2CBF', L'\u2CC1', L'\u2CC3', L'\u2CC5',
		L'\u2CC7', L'\u2CC9', L'\u2CCB', L'\u2CCD', L'\u2CCF', L'\u2CD1',
		L'\u2CD3', L'\u2CD5', L'\u2CD7', L'\u2CD9', L'\u2CDB', L'\u2CDD',
		L'\u2CDF', L'\u2CE1', L'\u2CEC', L'\uA641', L'\uA643', L'\uA645',
		L'\uA647', L'\uA649', L'\uA64B', L'\uA64D', L'\uA64F', L'\uA651',
		L'\uA653', L'\uA655', L'\uA657', L'\uA659', L'\uA65B', L'\uA65D',
		L'\uA65F', L'\uA661', L'\uA663', L'\uA665', L'\uA667', L'\uA669',
		L'\uA66B', L'\uA681', L'\uA683', L'\uA685', L'\uA687', L'\uA689',
		L'\uA68B', L'\uA68D', L'\uA68F', L'\uA691', L'\uA693', L'\uA695',
		L'\uA697', L'\uA699', L'\uA723', L'\uA725', L'\uA727', L'\uA729',
		L'\uA72B', L'\uA72D', L'\uA733', L'\uA735', L'\uA737', L'\uA739',
		L'\uA73B', L'\uA73D', L'\uA73F', L'\uA741', L'\uA743', L'\uA745',
		L'\uA747', L'\uA749', L'\uA74B', L'\uA74D', L'\uA74F', L'\uA751',
		L'\uA753', L'\uA755', L'\uA757', L'\uA759', L'\uA75B', L'\uA75D',
		L'\uA75F', L'\uA761', L'\uA763', L'\uA765', L'\uA767', L'\uA769',
		L'\uA76B', L'\uA76D', L'\uA77A', L'\uA77C', L'\uA77F', L'\uA781',
		L'\uA783', L'\uA785', L'\uA78C', L'\uA791', L'\uA797', L'\uA799',
		L'\uA79B', L'\uA79D', L'\uA79F', L'\uA7A1', L'\uA7A3', L'\uA7A5',
		L'\uA7A7', L'\uA7A9', L'\uA7AF', L'\uA7B5', L'\uA7B7', L'\uA7B9',
		L'\uA7BB', L'\uA7BD', L'\uA7C3', L'\uA7C8',
	};
	for (auto v : false_values)
		REQUIRE(!fn(v));
}

TEST_CASE("unicode - is_lowercase (wchar_t)")
{
	using namespace impl;
	static constexpr auto fn = static_cast<code_unit_func<wchar_t>*>(is_lowercase);
 
	// values which should return true
	static constexpr code_unit_range<uint32_t> true_ranges[] = 
	{
		{ L'a', L'z' }, { L'\xDF', L'\xF6' }, { L'\xF8', L'\xFF' },
		{ L'\u0137', L'\u0138' }, { L'\u0148', L'\u0149' }, { L'\u017E', L'\u0180' },
		{ L'\u018C', L'\u018D' }, { L'\u0199', L'\u019B' }, { L'\u01AA', L'\u01AB' },
		{ L'\u01B9', L'\u01BA' }, { L'\u01BD', L'\u01BF' }, { L'\u01DC', L'\u01DD' },
		{ L'\u01EF', L'\u01F0' }, { L'\u0233', L'\u0239' }, { L'\u023F', L'\u0240' },
		{ L'\u024F', L'\u0293' }, { L'\u0295', L'\u02B8' }, { L'\u02C0', L'\u02C1' },
		{ L'\u02E0', L'\u02E4' }, { L'\u037A', L'\u037D' }, { L'\u03AC', L'\u03CE' },
		{ L'\u03D0', L'\u03D1' }, { L'\u03D5', L'\u03D7' }, { L'\u03EF', L'\u03F3' },
		{ L'\u03FB', L'\u03FC' }, { L'\u0430', L'\u045F' }, { L'\u04CE', L'\u04CF' },
		{ L'\u0560', L'\u0588' }, { L'\u10D0', L'\u10FA' }, { L'\u10FD', L'\u10FF' },
		{ L'\u13F8', L'\u13FD' }, { L'\u1C80', L'\u1C88' }, { L'\u1D00', L'\u1DBF' },
		{ L'\u1E95', L'\u1E9D' }, { L'\u1EFF', L'\u1F07' }, { L'\u1F10', L'\u1F15' },
		{ L'\u1F20', L'\u1F27' }, { L'\u1F30', L'\u1F37' }, { L'\u1F40', L'\u1F45' },
		{ L'\u1F50', L'\u1F57' }, { L'\u1F60', L'\u1F67' }, { L'\u1F70', L'\u1F7D' },
		{ L'\u1F80', L'\u1F87' }, { L'\u1F90', L'\u1F97' }, { L'\u1FA0', L'\u1FA7' },
		{ L'\u1FB0', L'\u1FB4' }, { L'\u1FB6', L'\u1FB7' }, { L'\u1FC2', L'\u1FC4' },
		{ L'\u1FC6', L'\u1FC7' }, { L'\u1FD0', L'\u1FD3' }, { L'\u1FD6', L'\u1FD7' },
		{ L'\u1FE0', L'\u1FE7' }, { L'\u1FF2', L'\u1FF4' }, { L'\u1FF6', L'\u1FF7' },
		{ L'\u2090', L'\u209C' }, { L'\u210E', L'\u210F' }, { L'\u213C', L'\u213D' },
		{ L'\u2146', L'\u2149' }, { L'\u2170', L'\u217F' }, { L'\u24D0', L'\u24E9' },
		{ L'\u2C30', L'\u2C5E' }, { L'\u2C65', L'\u2C66' }, { L'\u2C73', L'\u2C74' },
		{ L'\u2C76', L'\u2C7D' }, { L'\u2CE3', L'\u2CE4' }, { L'\u2D00', L'\u2D25' },
		{ L'\uA69B', L'\uA69D' }, { L'\uA72F', L'\uA731' }, { L'\uA76F', L'\uA778' },
		{ L'\uA793', L'\uA795' }, { L'\uA7F8', L'\uA7FA' }, { L'\uAB30', L'\uAB5A' },
		{ L'\uAB5C', L'\uAB68' }, { L'\uAB70', L'\uABBF' }, { L'\uFB00', L'\uFB06' },
		{ L'\uFB13', L'\uFB17' }, { L'\uFF41', L'\uFF5A' },
	};
	for (const auto& r : true_ranges)
	{
		REQUIRE(in(fn, r));
		REQUIRE(in_only<6>(fn, r));
	}
	static constexpr wchar_t true_values[] = 
	{
		L'\xAA', L'\xB5', L'\xBA', L'\u0101', L'\u0103', L'\u0105',
		L'\u0107', L'\u0109', L'\u010B', L'\u010D', L'\u010F', L'\u0111',
		L'\u0113', L'\u0115', L'\u0117', L'\u0119', L'\u011B', L'\u011D',
		L'\u011F', L'\u0121', L'\u0123', L'\u0125', L'\u0127', L'\u0129',
		L'\u012B', L'\u012D', L'\u012F', L'\u0131', L'\u0133', L'\u0135',
		L'\u013A', L'\u013C', L'\u013E', L'\u0140', L'\u0142', L'\u0144',
		L'\u0146', L'\u014B', L'\u014D', L'\u014F', L'\u0151', L'\u0153',
		L'\u0155', L'\u0157', L'\u0159', L'\u015B', L'\u015D', L'\u015F',
		L'\u0161', L'\u0163', L'\u0165', L'\u0167', L'\u0169', L'\u016B',
		L'\u016D', L'\u016F', L'\u0171', L'\u0173', L'\u0175', L'\u0177',
		L'\u017A', L'\u017C', L'\u0183', L'\u0185', L'\u0188', L'\u0192',
		L'\u0195', L'\u019E', L'\u01A1', L'\u01A3', L'\u01A5', L'\u01A8',
		L'\u01AD', L'\u01B0', L'\u01B4', L'\u01B6', L'\u01C6', L'\u01C9',
		L'\u01CC', L'\u01CE', L'\u01D0', L'\u01D2', L'\u01D4', L'\u01D6',
		L'\u01D8', L'\u01DA', L'\u01DF', L'\u01E1', L'\u01E3', L'\u01E5',
		L'\u01E7', L'\u01E9', L'\u01EB', L'\u01ED', L'\u01F3', L'\u01F5',
		L'\u01F9', L'\u01FB', L'\u01FD', L'\u01FF', L'\u0201', L'\u0203',
		L'\u0205', L'\u0207', L'\u0209', L'\u020B', L'\u020D', L'\u020F',
		L'\u0211', L'\u0213', L'\u0215', L'\u0217', L'\u0219', L'\u021B',
		L'\u021D', L'\u021F', L'\u0221', L'\u0223', L'\u0225', L'\u0227',
		L'\u0229', L'\u022B', L'\u022D', L'\u022F', L'\u0231', L'\u023C',
		L'\u0242', L'\u0247', L'\u0249', L'\u024B', L'\u024D', L'\u0345',
		L'\u0371', L'\u0373', L'\u0377', L'\u0390', L'\u03D9', L'\u03DB',
		L'\u03DD', L'\u03DF', L'\u03E1', L'\u03E3', L'\u03E5', L'\u03E7',
		L'\u03E9', L'\u03EB', L'\u03ED', L'\u03F5', L'\u03F8', L'\u0461',
		L'\u0463', L'\u0465', L'\u0467', L'\u0469', L'\u046B', L'\u046D',
		L'\u046F', L'\u0471', L'\u0473', L'\u0475', L'\u0477', L'\u0479',
		L'\u047B', L'\u047D', L'\u047F', L'\u0481', L'\u048B', L'\u048D',
		L'\u048F', L'\u0491', L'\u0493', L'\u0495', L'\u0497', L'\u0499',
		L'\u049B', L'\u049D', L'\u049F', L'\u04A1', L'\u04A3', L'\u04A5',
		L'\u04A7', L'\u04A9', L'\u04AB', L'\u04AD', L'\u04AF', L'\u04B1',
		L'\u04B3', L'\u04B5', L'\u04B7', L'\u04B9', L'\u04BB', L'\u04BD',
		L'\u04BF', L'\u04C2', L'\u04C4', L'\u04C6', L'\u04C8', L'\u04CA',
		L'\u04CC', L'\u04D1', L'\u04D3', L'\u04D5', L'\u04D7', L'\u04D9',
		L'\u04DB', L'\u04DD', L'\u04DF', L'\u04E1', L'\u04E3', L'\u04E5',
		L'\u04E7', L'\u04E9', L'\u04EB', L'\u04ED', L'\u04EF', L'\u04F1',
		L'\u04F3', L'\u04F5', L'\u04F7', L'\u04F9', L'\u04FB', L'\u04FD',
		L'\u04FF', L'\u0501', L'\u0503', L'\u0505', L'\u0507', L'\u0509',
		L'\u050B', L'\u050D', L'\u050F', L'\u0511', L'\u0513', L'\u0515',
		L'\u0517', L'\u0519', L'\u051B', L'\u051D', L'\u051F', L'\u0521',
		L'\u0523', L'\u0525', L'\u0527', L'\u0529', L'\u052B', L'\u052D',
		L'\u052F', L'\u1E01', L'\u1E03', L'\u1E05', L'\u1E07', L'\u1E09',
		L'\u1E0B', L'\u1E0D', L'\u1E0F', L'\u1E11', L'\u1E13', L'\u1E15',
		L'\u1E17', L'\u1E19', L'\u1E1B', L'\u1E1D', L'\u1E1F', L'\u1E21',
		L'\u1E23', L'\u1E25', L'\u1E27', L'\u1E29', L'\u1E2B', L'\u1E2D',
		L'\u1E2F', L'\u1E31', L'\u1E33', L'\u1E35', L'\u1E37', L'\u1E39',
		L'\u1E3B', L'\u1E3D', L'\u1E3F', L'\u1E41', L'\u1E43', L'\u1E45',
		L'\u1E47', L'\u1E49', L'\u1E4B', L'\u1E4D', L'\u1E4F', L'\u1E51',
		L'\u1E53', L'\u1E55', L'\u1E57', L'\u1E59', L'\u1E5B', L'\u1E5D',
		L'\u1E5F', L'\u1E61', L'\u1E63', L'\u1E65', L'\u1E67', L'\u1E69',
		L'\u1E6B', L'\u1E6D', L'\u1E6F', L'\u1E71', L'\u1E73', L'\u1E75',
		L'\u1E77', L'\u1E79', L'\u1E7B', L'\u1E7D', L'\u1E7F', L'\u1E81',
		L'\u1E83', L'\u1E85', L'\u1E87', L'\u1E89', L'\u1E8B', L'\u1E8D',
		L'\u1E8F', L'\u1E91', L'\u1E93', L'\u1E9F', L'\u1EA1', L'\u1EA3',
		L'\u1EA5', L'\u1EA7', L'\u1EA9', L'\u1EAB', L'\u1EAD', L'\u1EAF',
		L'\u1EB1', L'\u1EB3', L'\u1EB5', L'\u1EB7', L'\u1EB9', L'\u1EBB',
		L'\u1EBD', L'\u1EBF', L'\u1EC1', L'\u1EC3', L'\u1EC5', L'\u1EC7',
		L'\u1EC9', L'\u1ECB', L'\u1ECD', L'\u1ECF', L'\u1ED1', L'\u1ED3',
		L'\u1ED5', L'\u1ED7', L'\u1ED9', L'\u1EDB', L'\u1EDD', L'\u1EDF',
		L'\u1EE1', L'\u1EE3', L'\u1EE5', L'\u1EE7', L'\u1EE9', L'\u1EEB',
		L'\u1EED', L'\u1EEF', L'\u1EF1', L'\u1EF3', L'\u1EF5', L'\u1EF7',
		L'\u1EF9', L'\u1EFB', L'\u1EFD', L'\u1FBE', L'\u2071', L'\u207F',
		L'\u210A', L'\u2113', L'\u212F', L'\u2134', L'\u2139', L'\u214E',
		L'\u2184', L'\u2C61', L'\u2C68', L'\u2C6A', L'\u2C6C', L'\u2C71',
		L'\u2C81', L'\u2C83', L'\u2C85', L'\u2C87', L'\u2C89', L'\u2C8B',
		L'\u2C8D', L'\u2C8F', L'\u2C91', L'\u2C93', L'\u2C95', L'\u2C97',
		L'\u2C99', L'\u2C9B', L'\u2C9D', L'\u2C9F', L'\u2CA1', L'\u2CA3',
		L'\u2CA5', L'\u2CA7', L'\u2CA9', L'\u2CAB', L'\u2CAD', L'\u2CAF',
		L'\u2CB1', L'\u2CB3', L'\u2CB5', L'\u2CB7', L'\u2CB9', L'\u2CBB',
		L'\u2CBD', L'\u2CBF', L'\u2CC1', L'\u2CC3', L'\u2CC5', L'\u2CC7',
		L'\u2CC9', L'\u2CCB', L'\u2CCD', L'\u2CCF', L'\u2CD1', L'\u2CD3',
		L'\u2CD5', L'\u2CD7', L'\u2CD9', L'\u2CDB', L'\u2CDD', L'\u2CDF',
		L'\u2CE1', L'\u2CEC', L'\u2CEE', L'\u2CF3', L'\u2D27', L'\u2D2D',
		L'\uA641', L'\uA643', L'\uA645', L'\uA647', L'\uA649', L'\uA64B',
		L'\uA64D', L'\uA64F', L'\uA651', L'\uA653', L'\uA655', L'\uA657',
		L'\uA659', L'\uA65B', L'\uA65D', L'\uA65F', L'\uA661', L'\uA663',
		L'\uA665', L'\uA667', L'\uA669', L'\uA66B', L'\uA66D', L'\uA681',
		L'\uA683', L'\uA685', L'\uA687', L'\uA689', L'\uA68B', L'\uA68D',
		L'\uA68F', L'\uA691', L'\uA693', L'\uA695', L'\uA697', L'\uA699',
		L'\uA723', L'\uA725', L'\uA727', L'\uA729', L'\uA72B', L'\uA72D',
		L'\uA733', L'\uA735', L'\uA737', L'\uA739', L'\uA73B', L'\uA73D',
		L'\uA73F', L'\uA741', L'\uA743', L'\uA745', L'\uA747', L'\uA749',
		L'\uA74B', L'\uA74D', L'\uA74F', L'\uA751', L'\uA753', L'\uA755',
		L'\uA757', L'\uA759', L'\uA75B', L'\uA75D', L'\uA75F', L'\uA761',
		L'\uA763', L'\uA765', L'\uA767', L'\uA769', L'\uA76B', L'\uA76D',
		L'\uA77A', L'\uA77C', L'\uA77F', L'\uA781', L'\uA783', L'\uA785',
		L'\uA787', L'\uA78C', L'\uA78E', L'\uA791', L'\uA797', L'\uA799',
		L'\uA79B', L'\uA79D', L'\uA79F', L'\uA7A1', L'\uA7A3', L'\uA7A5',
		L'\uA7A7', L'\uA7A9', L'\uA7AF', L'\uA7B5', L'\uA7B7', L'\uA7B9',
		L'\uA7BB', L'\uA7BD', L'\uA7BF', L'\uA7C3', L'\uA7C8', L'\uA7CA',
		L'\uA7F6',
	};
	for (auto v : true_values)
	{
		REQUIRE(fn(v));
		REQUIRE(in_only<6>(fn, v));
	}
 
	// values which should return false
	static constexpr code_unit_range<uint32_t> false_ranges[] = 
	{
		{ L'\0', L'`' }, { L'{', L'\xA9' }, { L'\xAB', L'\xB4' },
		{ L'\xB6', L'\xB9' }, { L'\xBB', L'\xDE' }, { L'\u0178', L'\u0179' },
		{ L'\u0181', L'\u0182' }, { L'\u0186', L'\u0187' }, { L'\u0189', L'\u018B' },
		{ L'\u018E', L'\u0191' }, { L'\u0193', L'\u0194' }, { L'\u0196', L'\u0198' },
		{ L'\u019C', L'\u019D' }, { L'\u019F', L'\u01A0' }, { L'\u01A6', L'\u01A7' },
		{ L'\u01AE', L'\u01AF' }, { L'\u01B1', L'\u01B3' }, { L'\u01B7', L'\u01B8' },
		{ L'\u01BB', L'\u01BC' }, { L'\u01C0', L'\u01C5' }, { L'\u01C7', L'\u01C8' },
		{ L'\u01CA', L'\u01CB' }, { L'\u01F1', L'\u01F2' }, { L'\u01F6', L'\u01F8' },
		{ L'\u023A', L'\u023B' }, { L'\u023D', L'\u023E' }, { L'\u0243', L'\u0246' },
		{ L'\u02B9', L'\u02BF' }, { L'\u02C2', L'\u02DF' }, { L'\u02E5', L'\u0344' },
		{ L'\u0346', L'\u0370' }, { L'\u0374', L'\u0376' }, { L'\u0378', L'\u0379' },
		{ L'\u037E', L'\u038F' }, { L'\u0391', L'\u03AB' }, { L'\u03D2', L'\u03D4' },
		{ L'\u03F6', L'\u03F7' }, { L'\u03F9', L'\u03FA' }, { L'\u03FD', L'\u042F' },
		{ L'\u0482', L'\u048A' }, { L'\u04C0', L'\u04C1' }, { L'\u0530', L'\u055F' },
		{ L'\u0589', L'\u10CF' }, { L'\u10FB', L'\u10FC' }, { L'\u1100', L'\u13F7' },
		{ L'\u13FE', L'\u1C7F' }, { L'\u1C89', L'\u1CFF' }, { L'\u1DC0', L'\u1E00' },
		{ L'\u1F08', L'\u1F0F' }, { L'\u1F16', L'\u1F1F' }, { L'\u1F28', L'\u1F2F' },
		{ L'\u1F38', L'\u1F3F' }, { L'\u1F46', L'\u1F4F' }, { L'\u1F58', L'\u1F5F' },
		{ L'\u1F68', L'\u1F6F' }, { L'\u1F7E', L'\u1F7F' }, { L'\u1F88', L'\u1F8F' },
		{ L'\u1F98', L'\u1F9F' }, { L'\u1FA8', L'\u1FAF' }, { L'\u1FB8', L'\u1FBD' },
		{ L'\u1FBF', L'\u1FC1' }, { L'\u1FC8', L'\u1FCF' }, { L'\u1FD4', L'\u1FD5' },
		{ L'\u1FD8', L'\u1FDF' }, { L'\u1FE8', L'\u1FF1' }, { L'\u1FF8', L'\u2070' },
		{ L'\u2072', L'\u207E' }, { L'\u2080', L'\u208F' }, { L'\u209D', L'\u2109' },
		{ L'\u210B', L'\u210D' }, { L'\u2110', L'\u2112' }, { L'\u2114', L'\u212E' },
		{ L'\u2130', L'\u2133' }, { L'\u2135', L'\u2138' }, { L'\u213A', L'\u213B' },
		{ L'\u213E', L'\u2145' }, { L'\u214A', L'\u214D' }, { L'\u214F', L'\u216F' },
		{ L'\u2180', L'\u2183' }, { L'\u2185', L'\u24CF' }, { L'\u24EA', L'\u2C2F' },
		{ L'\u2C5F', L'\u2C60' }, { L'\u2C62', L'\u2C64' }, { L'\u2C6D', L'\u2C70' },
		{ L'\u2C7E', L'\u2C80' }, { L'\u2CE5', L'\u2CEB' }, { L'\u2CEF', L'\u2CF2' },
		{ L'\u2CF4', L'\u2CFF' }, { L'\u2D28', L'\u2D2C' }, { L'\u2D2E', L'\uA640' },
		{ L'\uA66E', L'\uA680' }, { L'\uA69E', L'\uA722' }, { L'\uA77D', L'\uA77E' },
		{ L'\uA788', L'\uA78B' }, { L'\uA78F', L'\uA790' }, { L'\uA7AA', L'\uA7AE' },
		{ L'\uA7B0', L'\uA7B4' }, { L'\uA7C0', L'\uA7C2' }, { L'\uA7C4', L'\uA7C7' },
		{ L'\uA7CB', L'\uA7F5' }, { L'\uA7FB', L'\uAB2F' }, { L'\uAB69', L'\uAB6F' },
		{ L'\uABC0', L'\uFAFF' }, { L'\uFB07', L'\uFB12' }, { L'\uFB18', L'\uFF40' },
		{ L'\uFF5B', L'\uFFFF' },
	};
	for (const auto& r : false_ranges)
		REQUIRE(not_in(fn, r));
	static constexpr wchar_t false_values[] = 
	{
		L'\xF7', L'\u0100', L'\u0102', L'\u0104', L'\u0106', L'\u0108',
		L'\u010A', L'\u010C', L'\u010E', L'\u0110', L'\u0112', L'\u0114',
		L'\u0116', L'\u0118', L'\u011A', L'\u011C', L'\u011E', L'\u0120',
		L'\u0122', L'\u0124', L'\u0126', L'\u0128', L'\u012A', L'\u012C',
		L'\u012E', L'\u0130', L'\u0132', L'\u0134', L'\u0136', L'\u0139',
		L'\u013B', L'\u013D', L'\u013F', L'\u0141', L'\u0143', L'\u0145',
		L'\u0147', L'\u014A', L'\u014C', L'\u014E', L'\u0150', L'\u0152',
		L'\u0154', L'\u0156', L'\u0158', L'\u015A', L'\u015C', L'\u015E',
		L'\u0160', L'\u0162', L'\u0164', L'\u0166', L'\u0168', L'\u016A',
		L'\u016C', L'\u016E', L'\u0170', L'\u0172', L'\u0174', L'\u0176',
		L'\u017B', L'\u017D', L'\u0184', L'\u01A2', L'\u01A4', L'\u01A9',
		L'\u01AC', L'\u01B5', L'\u01CD', L'\u01CF', L'\u01D1', L'\u01D3',
		L'\u01D5', L'\u01D7', L'\u01D9', L'\u01DB', L'\u01DE', L'\u01E0',
		L'\u01E2', L'\u01E4', L'\u01E6', L'\u01E8', L'\u01EA', L'\u01EC',
		L'\u01EE', L'\u01F4', L'\u01FA', L'\u01FC', L'\u01FE', L'\u0200',
		L'\u0202', L'\u0204', L'\u0206', L'\u0208', L'\u020A', L'\u020C',
		L'\u020E', L'\u0210', L'\u0212', L'\u0214', L'\u0216', L'\u0218',
		L'\u021A', L'\u021C', L'\u021E', L'\u0220', L'\u0222', L'\u0224',
		L'\u0226', L'\u0228', L'\u022A', L'\u022C', L'\u022E', L'\u0230',
		L'\u0232', L'\u0241', L'\u0248', L'\u024A', L'\u024C', L'\u024E',
		L'\u0294', L'\u0372', L'\u03CF', L'\u03D8', L'\u03DA', L'\u03DC',
		L'\u03DE', L'\u03E0', L'\u03E2', L'\u03E4', L'\u03E6', L'\u03E8',
		L'\u03EA', L'\u03EC', L'\u03EE', L'\u03F4', L'\u0460', L'\u0462',
		L'\u0464', L'\u0466', L'\u0468', L'\u046A', L'\u046C', L'\u046E',
		L'\u0470', L'\u0472', L'\u0474', L'\u0476', L'\u0478', L'\u047A',
		L'\u047C', L'\u047E', L'\u0480', L'\u048C', L'\u048E', L'\u0490',
		L'\u0492', L'\u0494', L'\u0496', L'\u0498', L'\u049A', L'\u049C',
		L'\u049E', L'\u04A0', L'\u04A2', L'\u04A4', L'\u04A6', L'\u04A8',
		L'\u04AA', L'\u04AC', L'\u04AE', L'\u04B0', L'\u04B2', L'\u04B4',
		L'\u04B6', L'\u04B8', L'\u04BA', L'\u04BC', L'\u04BE', L'\u04C3',
		L'\u04C5', L'\u04C7', L'\u04C9', L'\u04CB', L'\u04CD', L'\u04D0',
		L'\u04D2', L'\u04D4', L'\u04D6', L'\u04D8', L'\u04DA', L'\u04DC',
		L'\u04DE', L'\u04E0', L'\u04E2', L'\u04E4', L'\u04E6', L'\u04E8',
		L'\u04EA', L'\u04EC', L'\u04EE', L'\u04F0', L'\u04F2', L'\u04F4',
		L'\u04F6', L'\u04F8', L'\u04FA', L'\u04FC', L'\u04FE', L'\u0500',
		L'\u0502', L'\u0504', L'\u0506', L'\u0508', L'\u050A', L'\u050C',
		L'\u050E', L'\u0510', L'\u0512', L'\u0514', L'\u0516', L'\u0518',
		L'\u051A', L'\u051C', L'\u051E', L'\u0520', L'\u0522', L'\u0524',
		L'\u0526', L'\u0528', L'\u052A', L'\u052C', L'\u052E', L'\u1E02',
		L'\u1E04', L'\u1E06', L'\u1E08', L'\u1E0A', L'\u1E0C', L'\u1E0E',
		L'\u1E10', L'\u1E12', L'\u1E14', L'\u1E16', L'\u1E18', L'\u1E1A',
		L'\u1E1C', L'\u1E1E', L'\u1E20', L'\u1E22', L'\u1E24', L'\u1E26',
		L'\u1E28', L'\u1E2A', L'\u1E2C', L'\u1E2E', L'\u1E30', L'\u1E32',
		L'\u1E34', L'\u1E36', L'\u1E38', L'\u1E3A', L'\u1E3C', L'\u1E3E',
		L'\u1E40', L'\u1E42', L'\u1E44', L'\u1E46', L'\u1E48', L'\u1E4A',
		L'\u1E4C', L'\u1E4E', L'\u1E50', L'\u1E52', L'\u1E54', L'\u1E56',
		L'\u1E58', L'\u1E5A', L'\u1E5C', L'\u1E5E', L'\u1E60', L'\u1E62',
		L'\u1E64', L'\u1E66', L'\u1E68', L'\u1E6A', L'\u1E6C', L'\u1E6E',
		L'\u1E70', L'\u1E72', L'\u1E74', L'\u1E76', L'\u1E78', L'\u1E7A',
		L'\u1E7C', L'\u1E7E', L'\u1E80', L'\u1E82', L'\u1E84', L'\u1E86',
		L'\u1E88', L'\u1E8A', L'\u1E8C', L'\u1E8E', L'\u1E90', L'\u1E92',
		L'\u1E94', L'\u1E9E', L'\u1EA0', L'\u1EA2', L'\u1EA4', L'\u1EA6',
		L'\u1EA8', L'\u1EAA', L'\u1EAC', L'\u1EAE', L'\u1EB0', L'\u1EB2',
		L'\u1EB4', L'\u1EB6', L'\u1EB8', L'\u1EBA', L'\u1EBC', L'\u1EBE',
		L'\u1EC0', L'\u1EC2', L'\u1EC4', L'\u1EC6', L'\u1EC8', L'\u1ECA',
		L'\u1ECC', L'\u1ECE', L'\u1ED0', L'\u1ED2', L'\u1ED4', L'\u1ED6',
		L'\u1ED8', L'\u1EDA', L'\u1EDC', L'\u1EDE', L'\u1EE0', L'\u1EE2',
		L'\u1EE4', L'\u1EE6', L'\u1EE8', L'\u1EEA', L'\u1EEC', L'\u1EEE',
		L'\u1EF0', L'\u1EF2', L'\u1EF4', L'\u1EF6', L'\u1EF8', L'\u1EFA',
		L'\u1EFC', L'\u1EFE', L'\u1FB5', L'\u1FC5', L'\u1FF5', L'\u2C67',
		L'\u2C69', L'\u2C6B', L'\u2C72', L'\u2C75', L'\u2C82', L'\u2C84',
		L'\u2C86', L'\u2C88', L'\u2C8A', L'\u2C8C', L'\u2C8E', L'\u2C90',
		L'\u2C92', L'\u2C94', L'\u2C96', L'\u2C98', L'\u2C9A', L'\u2C9C',
		L'\u2C9E', L'\u2CA0', L'\u2CA2', L'\u2CA4', L'\u2CA6', L'\u2CA8',
		L'\u2CAA', L'\u2CAC', L'\u2CAE', L'\u2CB0', L'\u2CB2', L'\u2CB4',
		L'\u2CB6', L'\u2CB8', L'\u2CBA', L'\u2CBC', L'\u2CBE', L'\u2CC0',
		L'\u2CC2', L'\u2CC4', L'\u2CC6', L'\u2CC8', L'\u2CCA', L'\u2CCC',
		L'\u2CCE', L'\u2CD0', L'\u2CD2', L'\u2CD4', L'\u2CD6', L'\u2CD8',
		L'\u2CDA', L'\u2CDC', L'\u2CDE', L'\u2CE0', L'\u2CE2', L'\u2CED',
		L'\u2D26', L'\uA642', L'\uA644', L'\uA646', L'\uA648', L'\uA64A',
		L'\uA64C', L'\uA64E', L'\uA650', L'\uA652', L'\uA654', L'\uA656',
		L'\uA658', L'\uA65A', L'\uA65C', L'\uA65E', L'\uA660', L'\uA662',
		L'\uA664', L'\uA666', L'\uA668', L'\uA66A', L'\uA66C', L'\uA682',
		L'\uA684', L'\uA686', L'\uA688', L'\uA68A', L'\uA68C', L'\uA68E',
		L'\uA690', L'\uA692', L'\uA694', L'\uA696', L'\uA698', L'\uA69A',
		L'\uA724', L'\uA726', L'\uA728', L'\uA72A', L'\uA72C', L'\uA72E',
		L'\uA732', L'\uA734', L'\uA736', L'\uA738', L'\uA73A', L'\uA73C',
		L'\uA73E', L'\uA740', L'\uA742', L'\uA744', L'\uA746', L'\uA748',
		L'\uA74A', L'\uA74C', L'\uA74E', L'\uA750', L'\uA752', L'\uA754',
		L'\uA756', L'\uA758', L'\uA75A', L'\uA75C', L'\uA75E', L'\uA760',
		L'\uA762', L'\uA764', L'\uA766', L'\uA768', L'\uA76A', L'\uA76C',
		L'\uA76E', L'\uA779', L'\uA77B', L'\uA780', L'\uA782', L'\uA784',
		L'\uA786', L'\uA78D', L'\uA792', L'\uA796', L'\uA798', L'\uA79A',
		L'\uA79C', L'\uA79E', L'\uA7A0', L'\uA7A2', L'\uA7A4', L'\uA7A6',
		L'\uA7A8', L'\uA7B6', L'\uA7B8', L'\uA7BA', L'\uA7BC', L'\uA7BE',
		L'\uA7C9', L'\uA7F7', L'\uAB5B',
	};
	for (auto v : false_values)
		REQUIRE(!fn(v));
}

template <>
struct code_unit_func_group<wchar_t, 1>
{
	static constexpr code_unit_func<wchar_t>* functions[] =
	{
		is_ascii,
		is_unicode,
	};
};

template <>
struct code_unit_func_group<wchar_t, 2>
{
	static constexpr code_unit_func<wchar_t>* functions[] =
	{
		is_ascii_whitespace,
		is_unicode_whitespace,
	};
};

template <>
struct code_unit_func_group<wchar_t, 7>
{
	static constexpr code_unit_func<wchar_t>* functions[] =
	{
		is_ascii_hyphen,
		is_ascii_letter,
		is_ascii_number,
		is_ascii_whitespace,
		is_combining_mark,
		is_unicode_hyphen,
		is_unicode_letter,
		is_unicode_number,
		is_unicode_whitespace,
	};
};

template <>
struct code_unit_func_group<wchar_t, 3>
{
	static constexpr code_unit_func<wchar_t>* functions[] =
	{
		is_ascii_letter,
		is_unicode_letter,
	};
};

template <>
struct code_unit_func_group<wchar_t, 4>
{
	static constexpr code_unit_func<wchar_t>* functions[] =
	{
		is_ascii_number,
		is_unicode_number,
	};
};

template <>
struct code_unit_func_group<wchar_t, 5>
{
	static constexpr code_unit_func<wchar_t>* functions[] =
	{
		is_ascii_hyphen,
		is_unicode_hyphen,
	};
};

template <>
struct code_unit_func_group<wchar_t, 6>
{
	static constexpr code_unit_func<wchar_t>* functions[] =
	{
		is_lowercase,
		is_uppercase,
	};
};

