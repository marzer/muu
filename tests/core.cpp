// This file is a part of muu and is subject to the the terms of the MIT license.
// Copyright (c) 2020 Mark Gillard <mark.gillard@outlook.com.au>
// See https://github.com/marzer/muu/blob/master/LICENSE for the full license text.
// SPDX-License-Identifier: MIT

#include "tests.h"
#include "../include/muu/half.h"

TEST_CASE("is_constant_evaluated")
{
	static_assert(is_constant_evaluated() == build::supports_is_constant_evaluated);
	volatile bool val = is_constant_evaluated();
	CHECK(val == false);
}

//TEST_CASE("launder")
//{
//	// todo?? kinda impossible to test, without being the compiler itself.
//}

TEST_CASE("unwrap")
{
	enum class scoped_enum : uint32_t
	{
		zero, one, two
	};
	const auto se_val = scoped_enum{};
	static_assert(std::is_same_v<uint32_t, decltype(unwrap(se_val))>);
	static_assert(std::is_same_v<uint32_t, decltype(unwrap(std::declval<scoped_enum&>()))>);
	static_assert(std::is_same_v<uint32_t, decltype(unwrap(std::declval<const scoped_enum&>()))>);
	static_assert(std::is_same_v<uint32_t, decltype(unwrap(std::declval<volatile scoped_enum&>()))>);
	static_assert(std::is_same_v<uint32_t, decltype(unwrap(std::declval<const volatile scoped_enum&>()))>);
	static_assert(std::is_same_v<uint32_t, decltype(unwrap(std::declval<scoped_enum&&>()))>);
	static_assert(std::is_same_v<uint32_t, decltype(unwrap(std::declval<const scoped_enum&&>()))>);
	static_assert(std::is_same_v<uint32_t, decltype(unwrap(std::declval<volatile scoped_enum&&>()))>);
	static_assert(std::is_same_v<uint32_t, decltype(unwrap(std::declval<const volatile scoped_enum&&>()))>);

	CHECK_AND_STATIC_ASSERT(unwrap(scoped_enum::zero) == 0u);
	CHECK_AND_STATIC_ASSERT(unwrap(scoped_enum::one) == 1u);
	CHECK_AND_STATIC_ASSERT(unwrap(scoped_enum::two) == 2u);

	enum unscoped_enum : uint32_t
	{
		ue_zero, ue_one, ue_two
	};
	const auto ue_val = unscoped_enum{};
	static_assert(std::is_same_v<uint32_t, decltype(unwrap(ue_val))>);
	static_assert(std::is_same_v<uint32_t, decltype(unwrap(std::declval<unscoped_enum&>()))>);
	static_assert(std::is_same_v<uint32_t, decltype(unwrap(std::declval<const unscoped_enum&>()))>);
	static_assert(std::is_same_v<uint32_t, decltype(unwrap(std::declval<volatile unscoped_enum&>()))>);
	static_assert(std::is_same_v<uint32_t, decltype(unwrap(std::declval<const volatile unscoped_enum&>()))>);
	static_assert(std::is_same_v<uint32_t, decltype(unwrap(std::declval<unscoped_enum&&>()))>);
	static_assert(std::is_same_v<uint32_t, decltype(unwrap(std::declval<const unscoped_enum&&>()))>);
	static_assert(std::is_same_v<uint32_t, decltype(unwrap(std::declval<volatile unscoped_enum&&>()))>);
	static_assert(std::is_same_v<uint32_t, decltype(unwrap(std::declval<const volatile unscoped_enum&&>()))>);

	CHECK_AND_STATIC_ASSERT(unwrap(unscoped_enum::ue_zero) == 0u);
	CHECK_AND_STATIC_ASSERT(unwrap(unscoped_enum::ue_one) == 1u);
	CHECK_AND_STATIC_ASSERT(unwrap(unscoped_enum::ue_two) == 2u);

	struct not_an_enum {};
	const auto ne_val = not_an_enum{};
	static_assert(std::is_same_v<const not_an_enum&, decltype(unwrap(ne_val))>);
	static_assert(std::is_same_v<not_an_enum&, decltype(unwrap(std::declval<not_an_enum&>()))>);
	static_assert(std::is_same_v<const not_an_enum&, decltype(unwrap(std::declval<const not_an_enum&>()))>);
	static_assert(std::is_same_v<volatile not_an_enum&, decltype(unwrap(std::declval<volatile not_an_enum&>()))>);
	static_assert(std::is_same_v<const volatile not_an_enum&, decltype(unwrap(std::declval<const volatile not_an_enum&>()))>);
	static_assert(std::is_same_v<not_an_enum&&, decltype(unwrap(std::declval<not_an_enum&&>()))>);
	static_assert(std::is_same_v<const not_an_enum&&, decltype(unwrap(std::declval<const not_an_enum&&>()))>);
	static_assert(std::is_same_v<volatile not_an_enum&&, decltype(unwrap(std::declval<volatile not_an_enum&&>()))>);
	static_assert(std::is_same_v<const volatile not_an_enum&&, decltype(unwrap(std::declval<const volatile not_an_enum&&>()))>);

}

TEST_CASE("countl_zero")
{
	#if MUU_HAS_INT128
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000000000000_u64)) == 128);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000000000001_u64)) == 127);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000000000011_u64)) == 126);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000000000111_u64)) == 125);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000000001111_u64)) == 124);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000000011111_u64)) == 123);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000000111111_u64)) == 122);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000001111111_u64)) == 121);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000011111111_u64)) == 120);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000111111111_u64)) == 119);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000001111111111_u64)) == 118);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000011111111111_u64)) == 117);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000111111111111_u64)) == 116);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000001111111111111_u64)) == 115);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000011111111111111_u64)) == 114);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000111111111111111_u64)) == 113);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000001111111111111111_u64)) == 112);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000011111111111111111_u64)) == 111);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000111111111111111111_u64)) == 110);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000001111111111111111111_u64)) == 109);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000011111111111111111111_u64)) == 108);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000111111111111111111111_u64)) == 107);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000001111111111111111111111_u64)) == 106);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000011111111111111111111111_u64)) == 105);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000111111111111111111111111_u64)) == 104);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000001111111111111111111111111_u64)) == 103);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000011111111111111111111111111_u64)) == 102);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000111111111111111111111111111_u64)) == 101);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000001111111111111111111111111111_u64)) == 100);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000011111111111111111111111111111_u64)) == 99);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000111111111111111111111111111111_u64)) == 98);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000001111111111111111111111111111111_u64)) == 97);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000011111111111111111111111111111111_u64)) == 96);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000000111111111111111111111111111111111_u64)) == 95);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000001111111111111111111111111111111111_u64)) == 94);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000011111111111111111111111111111111111_u64)) == 93);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000000111111111111111111111111111111111111_u64)) == 92);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000001111111111111111111111111111111111111_u64)) == 91);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000011111111111111111111111111111111111111_u64)) == 90);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000000111111111111111111111111111111111111111_u64)) == 89);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000001111111111111111111111111111111111111111_u64)) == 88);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000011111111111111111111111111111111111111111_u64)) == 87);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000000111111111111111111111111111111111111111111_u64)) == 86);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000001111111111111111111111111111111111111111111_u64)) == 85);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000011111111111111111111111111111111111111111111_u64)) == 84);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000000111111111111111111111111111111111111111111111_u64)) == 83);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000001111111111111111111111111111111111111111111111_u64)) == 82);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000011111111111111111111111111111111111111111111111_u64)) == 81);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000000111111111111111111111111111111111111111111111111_u64)) == 80);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000001111111111111111111111111111111111111111111111111_u64)) == 79);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000011111111111111111111111111111111111111111111111111_u64)) == 78);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000000111111111111111111111111111111111111111111111111111_u64)) == 77);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000001111111111111111111111111111111111111111111111111111_u64)) == 76);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000011111111111111111111111111111111111111111111111111111_u64)) == 75);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000000111111111111111111111111111111111111111111111111111111_u64)) == 74);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000001111111111111111111111111111111111111111111111111111111_u64)) == 73);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000011111111111111111111111111111111111111111111111111111111_u64)) == 72);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000000111111111111111111111111111111111111111111111111111111111_u64)) == 71);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000001111111111111111111111111111111111111111111111111111111111_u64)) == 70);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000011111111111111111111111111111111111111111111111111111111111_u64)) == 69);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0000111111111111111111111111111111111111111111111111111111111111_u64)) == 68);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0001111111111111111111111111111111111111111111111111111111111111_u64)) == 67);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0011111111111111111111111111111111111111111111111111111111111111_u64)) == 66);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0x0000000000000000_u64, 0b0111111111111111111111111111111111111111111111111111111111111111_u64)) == 65);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000000000000000000000_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 64);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000000000000000000001_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 63);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000000000000000000011_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 62);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000000000000000000111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 61);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000000000000000001111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 60);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000000000000000011111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 59);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000000000000000111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 58);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000000000000001111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 57);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000000000000011111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 56);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000000000000111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 55);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000000000001111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 54);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000000000011111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 53);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000000000111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 52);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000000001111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 51);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000000011111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 50);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000000111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 49);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000001111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 48);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000011111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 47);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000000111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 46);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000001111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 45);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000011111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 44);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000000111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 43);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000001111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 42);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000011111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 41);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000000111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 40);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000001111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 39);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000011111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 38);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000000111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 37);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000001111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 36);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000011111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 35);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000000111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 34);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000001111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 33);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000011111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 32);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000000111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 31);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000001111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 30);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000011111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 29);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000000111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 28);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000001111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 27);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000011111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 26);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000000111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 25);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000001111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 24);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000011111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 23);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000000111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 22);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000001111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 21);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000011111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 20);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000000111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 19);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000001111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 18);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000011111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 17);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000000111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 16);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000001111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 15);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000011111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 14);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000000111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 13);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000001111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 12);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000011111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 11);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000000111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 10);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000001111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 9);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000011111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 8);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000000111111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 7);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000001111111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 6);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000011111111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 5);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0000111111111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 4);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0001111111111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 3);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0011111111111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 2);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b0111111111111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 1);
	CHECK_AND_STATIC_ASSERT(countl_zero(pack(0b1111111111111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64)) == 0);
	#endif

	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000000000000000000000_u64) == 64);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000000000000000000001_u64) == 63);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000000000000000000011_u64) == 62);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000000000000000000111_u64) == 61);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000000000000000001111_u64) == 60);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000000000000000011111_u64) == 59);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000000000000000111111_u64) == 58);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000000000000001111111_u64) == 57);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000000000000011111111_u64) == 56);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000000000000111111111_u64) == 55);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000000000001111111111_u64) == 54);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000000000011111111111_u64) == 53);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000000000111111111111_u64) == 52);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000000001111111111111_u64) == 51);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000000011111111111111_u64) == 50);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000000111111111111111_u64) == 49);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000001111111111111111_u64) == 48);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000011111111111111111_u64) == 47);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000000111111111111111111_u64) == 46);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000001111111111111111111_u64) == 45);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000011111111111111111111_u64) == 44);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000000111111111111111111111_u64) == 43);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000001111111111111111111111_u64) == 42);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000011111111111111111111111_u64) == 41);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000000111111111111111111111111_u64) == 40);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000001111111111111111111111111_u64) == 39);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000011111111111111111111111111_u64) == 38);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000000111111111111111111111111111_u64) == 37);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000001111111111111111111111111111_u64) == 36);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000011111111111111111111111111111_u64) == 35);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000000111111111111111111111111111111_u64) == 34);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000001111111111111111111111111111111_u64) == 33);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000011111111111111111111111111111111_u64) == 32);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000000111111111111111111111111111111111_u64) == 31);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000001111111111111111111111111111111111_u64) == 30);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000011111111111111111111111111111111111_u64) == 29);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000000111111111111111111111111111111111111_u64) == 28);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000001111111111111111111111111111111111111_u64) == 27);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000011111111111111111111111111111111111111_u64) == 26);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000000111111111111111111111111111111111111111_u64) == 25);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000001111111111111111111111111111111111111111_u64) == 24);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000011111111111111111111111111111111111111111_u64) == 23);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000000111111111111111111111111111111111111111111_u64) == 22);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000001111111111111111111111111111111111111111111_u64) == 21);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000011111111111111111111111111111111111111111111_u64) == 20);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000000111111111111111111111111111111111111111111111_u64) == 19);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000001111111111111111111111111111111111111111111111_u64) == 18);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000011111111111111111111111111111111111111111111111_u64) == 17);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000111111111111111111111111111111111111111111111111_u64) == 16);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000001111111111111111111111111111111111111111111111111_u64) == 15);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000011111111111111111111111111111111111111111111111111_u64) == 14);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000111111111111111111111111111111111111111111111111111_u64) == 13);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000001111111111111111111111111111111111111111111111111111_u64) == 12);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000011111111111111111111111111111111111111111111111111111_u64) == 11);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000111111111111111111111111111111111111111111111111111111_u64) == 10);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000001111111111111111111111111111111111111111111111111111111_u64) == 9);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000011111111111111111111111111111111111111111111111111111111_u64) == 8);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000111111111111111111111111111111111111111111111111111111111_u64) == 7);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000001111111111111111111111111111111111111111111111111111111111_u64) == 6);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000011111111111111111111111111111111111111111111111111111111111_u64) == 5);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000111111111111111111111111111111111111111111111111111111111111_u64) == 4);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0001111111111111111111111111111111111111111111111111111111111111_u64) == 3);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0011111111111111111111111111111111111111111111111111111111111111_u64) == 2);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0111111111111111111111111111111111111111111111111111111111111111_u64) == 1);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b1111111111111111111111111111111111111111111111111111111111111111_u64) == 0);

	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000000000000000000000_u32) == 32);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000000000000000000001_u32) == 31);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000000000000000000011_u32) == 30);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000000000000000000111_u32) == 29);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000000000000000001111_u32) == 28);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000000000000000011111_u32) == 27);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000000000000000111111_u32) == 26);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000000000000001111111_u32) == 25);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000000000000011111111_u32) == 24);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000000000000111111111_u32) == 23);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000000000001111111111_u32) == 22);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000000000011111111111_u32) == 21);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000000000111111111111_u32) == 20);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000000001111111111111_u32) == 19);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000000011111111111111_u32) == 18);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000000111111111111111_u32) == 17);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000001111111111111111_u32) == 16);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000011111111111111111_u32) == 15);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000000111111111111111111_u32) == 14);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000001111111111111111111_u32) == 13);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000011111111111111111111_u32) == 12);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000000111111111111111111111_u32) == 11);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000001111111111111111111111_u32) == 10);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000011111111111111111111111_u32) == 9);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000111111111111111111111111_u32) == 8);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000001111111111111111111111111_u32) == 7);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000011111111111111111111111111_u32) == 6);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000111111111111111111111111111_u32) == 5);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00001111111111111111111111111111_u32) == 4);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00011111111111111111111111111111_u32) == 3);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00111111111111111111111111111111_u32) == 2);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b01111111111111111111111111111111_u32) == 1);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b11111111111111111111111111111111_u32) == 0);

	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000000_u16) == 16);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000001_u16) == 15);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000011_u16) == 14);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000000111_u16) == 13);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000001111_u16) == 12);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000011111_u16) == 11);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000000111111_u16) == 10);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000001111111_u16) == 9);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000011111111_u16) == 8);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000000111111111_u16) == 7);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000001111111111_u16) == 6);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000011111111111_u16) == 5);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0000111111111111_u16) == 4);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0001111111111111_u16) == 3);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0011111111111111_u16) == 2);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b0111111111111111_u16) == 1);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b1111111111111111_u16) == 0);

	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000000_u8) == 8);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000001_u8) == 7);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000011_u8) == 6);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00000111_u8) == 5);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00001111_u8) == 4);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00011111_u8) == 3);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b00111111_u8) == 2);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b01111111_u8) == 1);
	CHECK_AND_STATIC_ASSERT(countl_zero(0b11111111_u8) == 0);
}

TEST_CASE("countr_zero")
{
	#if MUU_HAS_INT128
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b0000000000000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 128);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1000000000000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 127);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1100000000000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 126);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1110000000000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 125);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111000000000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 124);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111100000000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 123);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111110000000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 122);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111000000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 121);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111100000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 120);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111110000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 119);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 118);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111100000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 117);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111110000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 116);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 115);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111100000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 114);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111110000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 113);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 112);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111100000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 111);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111110000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 110);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 109);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111100000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 108);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111110000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 107);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 106);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111100000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 105);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111110000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 104);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111000000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 103);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111100000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 102);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111110000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 101);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111000000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 100);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111100000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 99);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111110000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 98);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111000000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 97);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111100000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 96);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111110000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 95);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111000000000000000000000000000000_u64, 0x0000000000000000_u64)) == 94);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111100000000000000000000000000000_u64, 0x0000000000000000_u64)) == 93);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111110000000000000000000000000000_u64, 0x0000000000000000_u64)) == 92);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111000000000000000000000000000_u64, 0x0000000000000000_u64)) == 91);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111100000000000000000000000000_u64, 0x0000000000000000_u64)) == 90);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111110000000000000000000000000_u64, 0x0000000000000000_u64)) == 89);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111000000000000000000000000_u64, 0x0000000000000000_u64)) == 88);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111100000000000000000000000_u64, 0x0000000000000000_u64)) == 87);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111110000000000000000000000_u64, 0x0000000000000000_u64)) == 86);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111000000000000000000000_u64, 0x0000000000000000_u64)) == 85);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111100000000000000000000_u64, 0x0000000000000000_u64)) == 84);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111110000000000000000000_u64, 0x0000000000000000_u64)) == 83);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111000000000000000000_u64, 0x0000000000000000_u64)) == 82);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111100000000000000000_u64, 0x0000000000000000_u64)) == 81);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111110000000000000000_u64, 0x0000000000000000_u64)) == 80);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111111000000000000000_u64, 0x0000000000000000_u64)) == 79);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111111100000000000000_u64, 0x0000000000000000_u64)) == 78);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111111110000000000000_u64, 0x0000000000000000_u64)) == 77);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111111111000000000000_u64, 0x0000000000000000_u64)) == 76);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111111111100000000000_u64, 0x0000000000000000_u64)) == 75);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111111111110000000000_u64, 0x0000000000000000_u64)) == 74);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111111111111000000000_u64, 0x0000000000000000_u64)) == 73);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111111111111100000000_u64, 0x0000000000000000_u64)) == 72);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111111111111110000000_u64, 0x0000000000000000_u64)) == 71);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111111111111111000000_u64, 0x0000000000000000_u64)) == 70);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111111111111111100000_u64, 0x0000000000000000_u64)) == 69);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111111111111111110000_u64, 0x0000000000000000_u64)) == 68);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111111111111111111000_u64, 0x0000000000000000_u64)) == 67);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111111111111111111100_u64, 0x0000000000000000_u64)) == 66);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111111111111111111110_u64, 0x0000000000000000_u64)) == 65);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0b1111111111111111111111111111111111111111111111111111111111111111_u64, 0x0000000000000000_u64)) == 64);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1000000000000000000000000000000000000000000000000000000000000000_u64)) == 63);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1100000000000000000000000000000000000000000000000000000000000000_u64)) == 62);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1110000000000000000000000000000000000000000000000000000000000000_u64)) == 61);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111000000000000000000000000000000000000000000000000000000000000_u64)) == 60);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111100000000000000000000000000000000000000000000000000000000000_u64)) == 59);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111110000000000000000000000000000000000000000000000000000000000_u64)) == 58);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111000000000000000000000000000000000000000000000000000000000_u64)) == 57);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111100000000000000000000000000000000000000000000000000000000_u64)) == 56);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111110000000000000000000000000000000000000000000000000000000_u64)) == 55);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111000000000000000000000000000000000000000000000000000000_u64)) == 54);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111100000000000000000000000000000000000000000000000000000_u64)) == 53);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111110000000000000000000000000000000000000000000000000000_u64)) == 52);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111000000000000000000000000000000000000000000000000000_u64)) == 51);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111100000000000000000000000000000000000000000000000000_u64)) == 50);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111110000000000000000000000000000000000000000000000000_u64)) == 49);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111000000000000000000000000000000000000000000000000_u64)) == 48);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111100000000000000000000000000000000000000000000000_u64)) == 47);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111110000000000000000000000000000000000000000000000_u64)) == 46);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111000000000000000000000000000000000000000000000_u64)) == 45);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111100000000000000000000000000000000000000000000_u64)) == 44);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111110000000000000000000000000000000000000000000_u64)) == 43);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111000000000000000000000000000000000000000000_u64)) == 42);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111100000000000000000000000000000000000000000_u64)) == 41);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111110000000000000000000000000000000000000000_u64)) == 40);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111000000000000000000000000000000000000000_u64)) == 39);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111100000000000000000000000000000000000000_u64)) == 38);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111110000000000000000000000000000000000000_u64)) == 37);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111000000000000000000000000000000000000_u64)) == 36);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111100000000000000000000000000000000000_u64)) == 35);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111110000000000000000000000000000000000_u64)) == 34);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111000000000000000000000000000000000_u64)) == 33);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111100000000000000000000000000000000_u64)) == 32);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111110000000000000000000000000000000_u64)) == 31);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111000000000000000000000000000000_u64)) == 30);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111100000000000000000000000000000_u64)) == 29);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111110000000000000000000000000000_u64)) == 28);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111000000000000000000000000000_u64)) == 27);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111100000000000000000000000000_u64)) == 26);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111110000000000000000000000000_u64)) == 25);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111000000000000000000000000_u64)) == 24);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111100000000000000000000000_u64)) == 23);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111110000000000000000000000_u64)) == 22);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111000000000000000000000_u64)) == 21);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111100000000000000000000_u64)) == 20);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111110000000000000000000_u64)) == 19);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111000000000000000000_u64)) == 18);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111100000000000000000_u64)) == 17);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111110000000000000000_u64)) == 16);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111000000000000000_u64)) == 15);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111100000000000000_u64)) == 14);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111110000000000000_u64)) == 13);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111000000000000_u64)) == 12);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111100000000000_u64)) == 11);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111110000000000_u64)) == 10);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111000000000_u64)) == 9);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111100000000_u64)) == 8);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111110000000_u64)) == 7);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111111000000_u64)) == 6);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111111100000_u64)) == 5);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111111110000_u64)) == 4);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111111111000_u64)) == 3);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111111111100_u64)) == 2);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111111111110_u64)) == 1);
	CHECK_AND_STATIC_ASSERT(countr_zero(pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111111111111_u64)) == 0);
	#endif

	CHECK_AND_STATIC_ASSERT(countr_zero(0b0000000000000000000000000000000000000000000000000000000000000000_u64) == 64);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1000000000000000000000000000000000000000000000000000000000000000_u64) == 63);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1100000000000000000000000000000000000000000000000000000000000000_u64) == 62);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1110000000000000000000000000000000000000000000000000000000000000_u64) == 61);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111000000000000000000000000000000000000000000000000000000000000_u64) == 60);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111100000000000000000000000000000000000000000000000000000000000_u64) == 59);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111110000000000000000000000000000000000000000000000000000000000_u64) == 58);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111000000000000000000000000000000000000000000000000000000000_u64) == 57);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111100000000000000000000000000000000000000000000000000000000_u64) == 56);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111110000000000000000000000000000000000000000000000000000000_u64) == 55);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111000000000000000000000000000000000000000000000000000000_u64) == 54);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111100000000000000000000000000000000000000000000000000000_u64) == 53);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111110000000000000000000000000000000000000000000000000000_u64) == 52);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111000000000000000000000000000000000000000000000000000_u64) == 51);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111100000000000000000000000000000000000000000000000000_u64) == 50);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111110000000000000000000000000000000000000000000000000_u64) == 49);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111000000000000000000000000000000000000000000000000_u64) == 48);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111100000000000000000000000000000000000000000000000_u64) == 47);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111110000000000000000000000000000000000000000000000_u64) == 46);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111000000000000000000000000000000000000000000000_u64) == 45);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111100000000000000000000000000000000000000000000_u64) == 44);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111110000000000000000000000000000000000000000000_u64) == 43);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111000000000000000000000000000000000000000000_u64) == 42);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111100000000000000000000000000000000000000000_u64) == 41);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111110000000000000000000000000000000000000000_u64) == 40);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111000000000000000000000000000000000000000_u64) == 39);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111100000000000000000000000000000000000000_u64) == 38);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111110000000000000000000000000000000000000_u64) == 37);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111000000000000000000000000000000000000_u64) == 36);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111100000000000000000000000000000000000_u64) == 35);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111110000000000000000000000000000000000_u64) == 34);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111000000000000000000000000000000000_u64) == 33);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111100000000000000000000000000000000_u64) == 32);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111110000000000000000000000000000000_u64) == 31);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111000000000000000000000000000000_u64) == 30);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111100000000000000000000000000000_u64) == 29);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111110000000000000000000000000000_u64) == 28);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111000000000000000000000000000_u64) == 27);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111100000000000000000000000000_u64) == 26);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111110000000000000000000000000_u64) == 25);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111000000000000000000000000_u64) == 24);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111100000000000000000000000_u64) == 23);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111110000000000000000000000_u64) == 22);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111000000000000000000000_u64) == 21);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111100000000000000000000_u64) == 20);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111110000000000000000000_u64) == 19);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111000000000000000000_u64) == 18);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111100000000000000000_u64) == 17);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111110000000000000000_u64) == 16);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111111000000000000000_u64) == 15);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111111100000000000000_u64) == 14);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111111110000000000000_u64) == 13);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111111111000000000000_u64) == 12);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111111111100000000000_u64) == 11);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111111111110000000000_u64) == 10);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111111111111000000000_u64) == 9);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111111111111100000000_u64) == 8);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111111111111110000000_u64) == 7);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111111111111111000000_u64) == 6);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111111111111111100000_u64) == 5);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111111111111111110000_u64) == 4);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111111111111111111000_u64) == 3);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111111111111111111100_u64) == 2);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111111111111111111110_u64) == 1);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111111111111111111111111111111111111111111111111111_u64) == 0);

	CHECK_AND_STATIC_ASSERT(countr_zero(0b00000000000000000000000000000000_u32) == 32);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b10000000000000000000000000000000_u32) == 31);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11000000000000000000000000000000_u32) == 30);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11100000000000000000000000000000_u32) == 29);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11110000000000000000000000000000_u32) == 28);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111000000000000000000000000000_u32) == 27);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111100000000000000000000000000_u32) == 26);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111110000000000000000000000000_u32) == 25);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111000000000000000000000000_u32) == 24);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111100000000000000000000000_u32) == 23);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111110000000000000000000000_u32) == 22);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111000000000000000000000_u32) == 21);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111100000000000000000000_u32) == 20);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111110000000000000000000_u32) == 19);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111000000000000000000_u32) == 18);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111100000000000000000_u32) == 17);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111110000000000000000_u32) == 16);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111111000000000000000_u32) == 15);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111111100000000000000_u32) == 14);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111111110000000000000_u32) == 13);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111111111000000000000_u32) == 12);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111111111100000000000_u32) == 11);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111111111110000000000_u32) == 10);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111111111111000000000_u32) == 9);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111111111111100000000_u32) == 8);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111111111111110000000_u32) == 7);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111111111111111000000_u32) == 6);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111111111111111100000_u32) == 5);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111111111111111110000_u32) == 4);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111111111111111111000_u32) == 3);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111111111111111111100_u32) == 2);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111111111111111111110_u32) == 1);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111111111111111111111111111_u32) == 0);

	CHECK_AND_STATIC_ASSERT(countr_zero(0b0000000000000000_u16) == 16);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1000000000000000_u16) == 15);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1100000000000000_u16) == 14);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1110000000000000_u16) == 13);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111000000000000_u16) == 12);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111100000000000_u16) == 11);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111110000000000_u16) == 10);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111000000000_u16) == 9);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111100000000_u16) == 8);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111110000000_u16) == 7);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111000000_u16) == 6);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111100000_u16) == 5);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111110000_u16) == 4);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111000_u16) == 3);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111100_u16) == 2);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111110_u16) == 1);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b1111111111111111_u16) == 0);

	CHECK_AND_STATIC_ASSERT(countr_zero(0b00000000_u8) == 8);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b10000000_u8) == 7);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11000000_u8) == 6);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11100000_u8) == 5);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11110000_u8) == 4);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111000_u8) == 3);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111100_u8) == 2);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111110_u8) == 1);
	CHECK_AND_STATIC_ASSERT(countr_zero(0b11111111_u8) == 0);
}

TEST_CASE("bit_ceil")
{
	CHECK_AND_STATIC_ASSERT(bit_ceil(1u) == 1u);
	CHECK_AND_STATIC_ASSERT(bit_ceil(2u) == 2u);
	CHECK_AND_STATIC_ASSERT(bit_ceil(3u) == 4u);
	CHECK_AND_STATIC_ASSERT(bit_ceil(4u) == 4u);
	CHECK_AND_STATIC_ASSERT(bit_ceil(5u) == 8u);
	CHECK_AND_STATIC_ASSERT(bit_ceil(6u) == 8u);
	CHECK_AND_STATIC_ASSERT(bit_ceil(7u) == 8u);
	CHECK_AND_STATIC_ASSERT(bit_ceil(8u) == 8u);
	CHECK_AND_STATIC_ASSERT(bit_ceil(9u) == 16u);
	CHECK_AND_STATIC_ASSERT(bit_ceil(10u) == 16u);
}

TEST_CASE("pack")
{
	CHECK_AND_STATIC_ASSERT(pack(0xFEDCBA98_u32, 0x76543210_u32) == 0xFEDCBA9876543210_u64);
	CHECK_AND_STATIC_ASSERT(pack(0xFEDC_u16, 0xBA98_u16, 0x76543210_u32) == 0xFEDCBA9876543210_u64);
	CHECK_AND_STATIC_ASSERT(pack(0xFEDC_u16, 0xBA98_u16, 0x7654_u16, 0x3210_u16) == 0xFEDCBA9876543210_u64);
	CHECK_AND_STATIC_ASSERT(pack(0xFEDC_u16, 0xBA_u8, 0x98_u8, 0x7654_u16, 0x32_u8, 0x10_u8) == 0xFEDCBA9876543210_u64);
}

//TEST_CASE("bit_cast")
//{
//	// todo
//}

namespace
{
	static int test_val = 0;
	MUU_NEVER_INLINE int func1() { return test_val = 1; }
	MUU_NEVER_INLINE int func2() noexcept { return test_val = 2; }

	struct base { virtual ~base() noexcept = default; };
	struct derived1 : base {};
	struct derived2 : base {};
}

TEST_CASE("pointer_cast")
{
	using int_ptr = int*;

	// same input and output types (no-op)
	CHECK(pointer_cast<int*>(&test_val) == &test_val);

	// nullptr -> *
	CHECK(pointer_cast<int*>(nullptr) == int_ptr{});

	// pointer -> integer
	// integer -> pointer
	CHECK(pointer_cast<intptr_t>(&test_val) == reinterpret_cast<intptr_t>(&test_val));
	CHECK(pointer_cast<uintptr_t>(&test_val) == reinterpret_cast<uintptr_t>(&test_val));

	// function pointers
	if constexpr (sizeof(void*) == sizeof(void(*)()))
	{
		// function -> void
		CHECK(pointer_cast<void*>(func1) == reinterpret_cast<void*>(func1));
		CHECK(pointer_cast<void*>(func2) == reinterpret_cast<void*>(func2));

		// void -> function
		// function -> function (noexcept)
		// function (noexcept) -> function
		{
			void* ptr1 = pointer_cast<void*>(func1);
			CHECK(pointer_cast<int(*)()>(ptr1) == reinterpret_cast<int(*)()>(ptr1));
			CHECK(pointer_cast<int(*)()>(ptr1) == func1);
			pointer_cast<int(*)()>(ptr1)();
			CHECK(test_val == 1);

			void* ptr2 = pointer_cast<void*>(func2);
			CHECK(pointer_cast<int(*)()noexcept>(ptr2) == reinterpret_cast<int(*)()noexcept>(ptr2));
			CHECK(pointer_cast<int(*)()noexcept>(ptr2) == func2);
			pointer_cast<int(*)()noexcept>(ptr2)();
			CHECK(test_val == 2);

			test_val = 0;

			pointer_cast<int(*)()noexcept>(func1)();
			CHECK(test_val == 1);
			pointer_cast<int(*)()>(func2)();
			CHECK(test_val == 2);

			test_val = 0;
		}
	}

	// void -> void (different cv)
	CHECK(pointer_cast<void*>(static_cast<const void*>(&test_val)) == &test_val);
	CHECK(pointer_cast<const void*>(static_cast<volatile void*>(&test_val)) == &test_val);
	CHECK(pointer_cast<volatile void*>(static_cast<const void*>(&test_val)) == &test_val);
	CHECK(pointer_cast<const volatile void*>(static_cast<volatile void*>(&test_val)) == &test_val);

	// * -> void
	CHECK(pointer_cast<void*>(&test_val) == &test_val);
	CHECK(pointer_cast<const void*>(&test_val) == &test_val);
	CHECK(pointer_cast<volatile void*>(&test_val) == &test_val);
	CHECK(pointer_cast<const volatile void*>(&test_val) == &test_val);

	// void -> *
	CHECK(pointer_cast<int*>(static_cast<void*>(&test_val)) == &test_val);
	CHECK(pointer_cast<const int*>(static_cast<void*>(&test_val)) == &test_val);
	CHECK(pointer_cast<volatile int*>(static_cast<void*>(&test_val)) == &test_val);
	CHECK(pointer_cast<const volatile int*>(static_cast<void*>(&test_val)) == &test_val);

	//derived -> base
	{
		derived1 d{};
		CHECK(pointer_cast<base*>(&d) == &d);
		CHECK(pointer_cast<const base*>(&d) == &d);
		CHECK(pointer_cast<volatile base*>(&d) == &d);
		CHECK(pointer_cast<const volatile base*>(&d) == &d);
	}

	// base -> derived
	{
		std::unique_ptr<base> b{ new derived1 };
		CHECK(pointer_cast<derived1*>(b.get()) == b.get());
		CHECK(pointer_cast<const derived1*>(b.get()) == b.get());
		CHECK(pointer_cast<volatile derived1*>(b.get()) == b.get());
		CHECK(pointer_cast<const volatile derived1*>(b.get()) == b.get());

		CHECK(pointer_cast<derived2*>(b.get()) == nullptr);
		CHECK(pointer_cast<const derived2*>(b.get()) == nullptr);
		CHECK(pointer_cast<volatile derived2*>(b.get()) == nullptr);
		CHECK(pointer_cast<const volatile derived2*>(b.get()) == nullptr);
	}
}

//TEST_CASE("apply_offset")
//{
//	// todo
//}

//TEST_CASE("min")
//{
//	// todo
//}

//TEST_CASE("max")
//{
//	// todo
//}

//TEST_CASE("abs")
//{
//	// todo
//}

TEST_CASE("clamp")
{
	CHECK_AND_STATIC_ASSERT(clamp(1, 2, 4) == 2);
	CHECK_AND_STATIC_ASSERT(clamp(2, 2, 4) == 2);
	CHECK_AND_STATIC_ASSERT(clamp(3, 2, 4) == 3);
	CHECK_AND_STATIC_ASSERT(clamp(4, 2, 4) == 4);
	CHECK_AND_STATIC_ASSERT(clamp(5, 2, 4) == 4);
}

TEST_CASE("between")
{
	// signed, signed
	CHECK_AND_STATIC_ASSERT(!between(   -1,     2,     4));
	CHECK_AND_STATIC_ASSERT(!between(    0,     2,     4));
	CHECK_AND_STATIC_ASSERT(!between(    1,     2,     4));
	CHECK_AND_STATIC_ASSERT( between(    2,     2,     4));
	CHECK_AND_STATIC_ASSERT( between(    3,     2,     4));
	CHECK_AND_STATIC_ASSERT( between(    4,     2,     4));
	CHECK_AND_STATIC_ASSERT(!between(    5,     2,     4));

	// signed, unsigned
	CHECK_AND_STATIC_ASSERT(!between(   -1,    2u,    4u));
	CHECK_AND_STATIC_ASSERT(!between(    0,    2u,    4u));
	CHECK_AND_STATIC_ASSERT(!between(    1,    2u,    4u));
	CHECK_AND_STATIC_ASSERT( between(    2,    2u,    4u));
	CHECK_AND_STATIC_ASSERT( between(    3,    2u,    4u));
	CHECK_AND_STATIC_ASSERT( between(    4,    2u,    4u));
	CHECK_AND_STATIC_ASSERT(!between(    5,    2u,    4u));

	// float, signed
	CHECK_AND_STATIC_ASSERT(!between(-1.0f,     2,     4));
	CHECK_AND_STATIC_ASSERT(!between( 0.0f,     2,     4));
	CHECK_AND_STATIC_ASSERT(!between( 1.0f,     2,     4));
	CHECK_AND_STATIC_ASSERT( between( 2.0f,     2,     4));
	CHECK_AND_STATIC_ASSERT( between( 3.0f,     2,     4));
	CHECK_AND_STATIC_ASSERT( between( 4.0f,     2,     4));
	CHECK_AND_STATIC_ASSERT(!between( 5.0f,     2,     4));

	// float, unsigned
	CHECK_AND_STATIC_ASSERT(!between(-1.0f,    2u,    4u));
	CHECK_AND_STATIC_ASSERT(!between( 0.0f,    2u,    4u));
	CHECK_AND_STATIC_ASSERT(!between( 1.0f,    2u,    4u));
	CHECK_AND_STATIC_ASSERT( between( 2.0f,    2u,    4u));
	CHECK_AND_STATIC_ASSERT( between( 3.0f,    2u,    4u));
	CHECK_AND_STATIC_ASSERT( between( 4.0f,    2u,    4u));
	CHECK_AND_STATIC_ASSERT(!between( 5.0f,    2u,    4u));

	// signed, float
	CHECK_AND_STATIC_ASSERT(!between(   -1,  2.0f,  4.0f));
	CHECK_AND_STATIC_ASSERT(!between(    0,  2.0f,  4.0f));
	CHECK_AND_STATIC_ASSERT(!between(    1,  2.0f,  4.0f));
	CHECK_AND_STATIC_ASSERT( between(    2,  2.0f,  4.0f));
	CHECK_AND_STATIC_ASSERT( between(    3,  2.0f,  4.0f));
	CHECK_AND_STATIC_ASSERT( between(    4,  2.0f,  4.0f));
	CHECK_AND_STATIC_ASSERT(!between(    5,  2.0f,  4.0f));

	// check for integer overflow nonsense
	{
		constexpr uint8_t minval = 5;
		constexpr uint8_t maxval = 100;
		for (int32_t i = -128; i <= 4; i++)
			CHECK(!between(i, minval, maxval));
		for (int32_t i = 5; i <= 100; i++)
			CHECK(between(i, minval, maxval));
		for (int32_t i = 101; i <= 255; i++)
			CHECK(!between(i, minval, maxval));
	}
}

TEST_CASE("popcount")
{
	CHECK_AND_STATIC_ASSERT(popcount(0b00000000_u8) == 0);
	CHECK_AND_STATIC_ASSERT(popcount(0b00000010_u8) == 1);
	CHECK_AND_STATIC_ASSERT(popcount(0b00110010_u8) == 3);
	CHECK_AND_STATIC_ASSERT(popcount(0b10110010_u8) == 4);
	CHECK_AND_STATIC_ASSERT(popcount(0b11111111_u8) == 8);

	CHECK_AND_STATIC_ASSERT(popcount(0b0000000000000000_u16) == 0);
	CHECK_AND_STATIC_ASSERT(popcount(0b0000001000000010_u16) == 2);
	CHECK_AND_STATIC_ASSERT(popcount(0b0011001000110010_u16) == 6);
	CHECK_AND_STATIC_ASSERT(popcount(0b1011001010110010_u16) == 8);
	CHECK_AND_STATIC_ASSERT(popcount(0b1111111111111111_u16) == 16);

	CHECK_AND_STATIC_ASSERT(popcount(0b00000000000000000000000000000000_u32) == 0);
	CHECK_AND_STATIC_ASSERT(popcount(0b00000010000000100000001000000010_u32) == 4);
	CHECK_AND_STATIC_ASSERT(popcount(0b00110010001100100011001000110010_u32) == 12);
	CHECK_AND_STATIC_ASSERT(popcount(0b10110010101100101011001010110010_u32) == 16);
	CHECK_AND_STATIC_ASSERT(popcount(0b11111111111111111111111111111111_u32) == 32);

	CHECK_AND_STATIC_ASSERT(popcount(0b0000000000000000000000000000000000000000000000000000000000000000_u64) == 0);
	CHECK_AND_STATIC_ASSERT(popcount(0b0000001000000010000000100000001000000010000000100000001000000010_u64) == 8);
	CHECK_AND_STATIC_ASSERT(popcount(0b0011001000110010001100100011001000110010001100100011001000110010_u64) == 24);
	CHECK_AND_STATIC_ASSERT(popcount(0b1011001010110010101100101011001010110010101100101011001010110010_u64) == 32);
	CHECK_AND_STATIC_ASSERT(popcount(0b1111111111111111111111111111111111111111111111111111111111111111_u64) == 64);
	#if MUU_HAS_INT128
	CHECK_AND_STATIC_ASSERT(popcount(pack(0b0000000000000000000000000000000000000000000000000000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000000000000_u64)) == 0);
	CHECK_AND_STATIC_ASSERT(popcount(pack(0b0000001000000010000000100000001000000010000000100000001000000010_u64, 0b0000001000000010000000100000001000000010000000100000001000000010_u64)) == 16);
	CHECK_AND_STATIC_ASSERT(popcount(pack(0b0011001000110010001100100011001000110010001100100011001000110010_u64, 0b0011001000110010001100100011001000110010001100100011001000110010_u64)) == 48);
	CHECK_AND_STATIC_ASSERT(popcount(pack(0b1011001010110010101100101011001010110010101100101011001010110010_u64, 0b1011001010110010101100101011001010110010101100101011001010110010_u64)) == 64);
	CHECK_AND_STATIC_ASSERT(popcount(pack(0b1111111111111111111111111111111111111111111111111111111111111111_u64, 0b1111111111111111111111111111111111111111111111111111111111111111_u64)) == 128);
	#endif
}

TEST_CASE("has_single_bit")
{
	CHECK_AND_STATIC_ASSERT(!has_single_bit(0u));
	CHECK_AND_STATIC_ASSERT(has_single_bit(1u));
	CHECK_AND_STATIC_ASSERT(has_single_bit(2u));
	CHECK_AND_STATIC_ASSERT(!has_single_bit(3u));
	CHECK_AND_STATIC_ASSERT(has_single_bit(4u));
	CHECK_AND_STATIC_ASSERT(!has_single_bit(5u));
	CHECK_AND_STATIC_ASSERT(!has_single_bit(6u));
	CHECK_AND_STATIC_ASSERT(!has_single_bit(7u));
	CHECK_AND_STATIC_ASSERT(has_single_bit(8u));
	CHECK_AND_STATIC_ASSERT(!has_single_bit(9u));
	CHECK_AND_STATIC_ASSERT(!has_single_bit(10u));
}

TEST_CASE("bit_floor")
{
	CHECK_AND_STATIC_ASSERT(bit_floor(1u) == 1u);
	CHECK_AND_STATIC_ASSERT(bit_floor(2u) == 2u);
	CHECK_AND_STATIC_ASSERT(bit_floor(3u) == 2u);
	CHECK_AND_STATIC_ASSERT(bit_floor(4u) == 4u);
	CHECK_AND_STATIC_ASSERT(bit_floor(5u) == 4u);
	CHECK_AND_STATIC_ASSERT(bit_floor(6u) == 4u);
	CHECK_AND_STATIC_ASSERT(bit_floor(7u) == 4u);
	CHECK_AND_STATIC_ASSERT(bit_floor(8u) == 8u);
	CHECK_AND_STATIC_ASSERT(bit_floor(9u) == 8u);
	CHECK_AND_STATIC_ASSERT(bit_floor(10u) == 8u);
}

TEST_CASE("bit_width")
{
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000000000000000000000_u64) == 0);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000000000000000000001_u64) == 1);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000000000000000000011_u64) == 2);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000000000000000000111_u64) == 3);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000000000000000001111_u64) == 4);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000000000000000011111_u64) == 5);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000000000000000111111_u64) == 6);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000000000000001111111_u64) == 7);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000000000000011111111_u64) == 8);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000000000000111111111_u64) == 9);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000000000001111110111_u64) == 10);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000000000011111111111_u64) == 11);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000000000111111111111_u64) == 12);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000000001111111111111_u64) == 13);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000000011111111101111_u64) == 14);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000000111111111111111_u64) == 15);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000001111111111111111_u64) == 16);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000011111110111110111_u64) == 17);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000000111111111111111111_u64) == 18);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000001111101111111110111_u64) == 19);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000011111111111101110111_u64) == 20);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000000111111111111111111111_u64) == 21);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000001111101111111111111111_u64) == 22);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000011111111110111011111111_u64) == 23);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000000111111111111111111111111_u64) == 24);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000001111111111111111111011111_u64) == 25);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000011111111111111111111111111_u64) == 26);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000000111101111110111111111111111_u64) == 27);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000001111111111111111111101111111_u64) == 28);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000011111111111111110001110111111_u64) == 29);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000000111111111111011110001111011111_u64) == 30);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000001111111111111111111111111111111_u64) == 31);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000011111000111111111110111111111111_u64) == 32);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000000111111111101111111111111111111111_u64) == 33);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000001111111111111111111011111111111111_u64) == 34);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000011111111111111111111110001101011111_u64) == 35);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000000111111111000011111111111111111111111_u64) == 36);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000001111111111111111110111111111111111111_u64) == 37);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000011111111111111111111111111011111111111_u64) == 38);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000000111111110001111100111111111111101111111_u64) == 39);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000001111111111111111111111111111111111111111_u64) == 40);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000011111111111111111111110111111111111111111_u64) == 41);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000000111111111111101111111111111011111111111111_u64) == 42);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000001111111111111110111111111111111100011111111_u64) == 43);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000011111111100010111111111111111111111111111111_u64) == 44);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000000111111111111111111000111111111100111111111111_u64) == 45);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000001111111111111111110111111111111111111011111111_u64) == 46);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000011111100001111111111111111111111101111111111111_u64) == 47);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000111111111111111111011111111111111111111111111111_u64) == 48);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000001111111111111111111111111111111110011000111111111_u64) == 49);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000011111110001111110111111111111111111111111111111111_u64) == 50);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000111111111111111101111111111110111111111111111111111_u64) == 51);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000001111111110111111111111111111111001111111111111111111_u64) == 52);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000011111111111111111111100111111111111111111111111111111_u64) == 53);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000111111111110001111111111111111111111111111111111111111_u64) == 54);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000001111111011111101111111111111111111111111111110001111111_u64) == 55);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000011111111111111111100111111111111111101111111111111111111_u64) == 56);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000111111111111111111111111111111101111111111111111111111111_u64) == 57);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000001111111000110001111111111111100011111111111111111111111111_u64) == 58);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000011111111111111111111111111011111111011111111111111111111111_u64) == 59);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000111111111000111111111111111111111111111111111111111111111111_u64) == 60);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0001111111111111111111111111111100111111000111100011111111111111_u64) == 61);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0011111111111111110011111111111111111111111111111111111111111111_u64) == 62);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0111111111111111111111111111111111111111111111111111111111111111_u64) == 63);
	CHECK_AND_STATIC_ASSERT(bit_width(0b1111111000111111111111111111111111111111000111111111111111111111_u64) == 64);

	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000000000000000000000_u32) == 0);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000000000000000000001_u32) == 1);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000000000000000000011_u32) == 2);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000000000000000000111_u32) == 3);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000000000000000001111_u32) == 4);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000000000000000011111_u32) == 5);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000000000000000111111_u32) == 6);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000000000000001111111_u32) == 7);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000000000000011111111_u32) == 8);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000000000000111001101_u32) == 9);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000000000001111111111_u32) == 10);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000000000011111111011_u32) == 11);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000000000111111001111_u32) == 12);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000000001111111111111_u32) == 13);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000000011111111111111_u32) == 14);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000000111110111011111_u32) == 15);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000001111111111111111_u32) == 16);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000011111111000111111_u32) == 17);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000000111111111111111111_u32) == 18);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000001110111111111011101_u32) == 19);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000011111111111000111111_u32) == 20);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000000111111111111111111111_u32) == 21);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000001111111011111111111111_u32) == 22);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000011111111111111111011111_u32) == 23);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000111101111111111100111111_u32) == 24);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000001111111111111111111111111_u32) == 25);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000011101110001111111001111111_u32) == 26);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000111111111111111111111011111_u32) == 27);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00001111111111111111111111111111_u32) == 28);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00011111111111101111110001111111_u32) == 29);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00111100011111111111111111111111_u32) == 30);
	CHECK_AND_STATIC_ASSERT(bit_width(0b01111111110001111111111111111111_u32) == 31);
	CHECK_AND_STATIC_ASSERT(bit_width(0b11111111111111111110011111111111_u32) == 32);

	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000000_u16) == 0);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000001_u16) == 1);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000011_u16) == 2);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000000111_u16) == 3);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000001111_u16) == 4);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000011111_u16) == 5);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000000111011_u16) == 6);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000001111111_u16) == 7);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000011100111_u16) == 8);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000000111111111_u16) == 9);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000001111111111_u16) == 10);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000011111011111_u16) == 11);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0000111111111111_u16) == 12);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0001111011111001_u16) == 13);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0011111110111111_u16) == 14);
	CHECK_AND_STATIC_ASSERT(bit_width(0b0111100111111111_u16) == 15);
	CHECK_AND_STATIC_ASSERT(bit_width(0b1111111110011111_u16) == 16);

	CHECK_AND_STATIC_ASSERT(bit_width(0b00000000_u8) == 0);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000001_u8) == 1);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000011_u8) == 2);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00000111_u8) == 3);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00001101_u8) == 4);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00011101_u8) == 5);
	CHECK_AND_STATIC_ASSERT(bit_width(0b00111111_u8) == 6);
	CHECK_AND_STATIC_ASSERT(bit_width(0b01110111_u8) == 7);
	CHECK_AND_STATIC_ASSERT(bit_width(0b11111101_u8) == 8);
}

TEST_CASE("bit_fill_right")
{
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint8_t>(0)  == 0b00000000_u8);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint8_t>(1)  == 0b00000001_u8);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint8_t>(2)  == 0b00000011_u8);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint8_t>(3)  == 0b00000111_u8);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint8_t>(4)  == 0b00001111_u8);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint8_t>(5)  == 0b00011111_u8);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint8_t>(6)  == 0b00111111_u8);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint8_t>(7)  == 0b01111111_u8);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint8_t>(8)  == 0b11111111_u8);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint8_t>(99) == 0b11111111_u8);

	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint16_t>(0)  == 0b0000000000000000_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint16_t>(1)  == 0b0000000000000001_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint16_t>(2)  == 0b0000000000000011_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint16_t>(3)  == 0b0000000000000111_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint16_t>(4)  == 0b0000000000001111_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint16_t>(5)  == 0b0000000000011111_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint16_t>(6)  == 0b0000000000111111_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint16_t>(7)  == 0b0000000001111111_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint16_t>(8)  == 0b0000000011111111_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint16_t>(9)  == 0b0000000111111111_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint16_t>(10) == 0b0000001111111111_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint16_t>(11) == 0b0000011111111111_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint16_t>(12) == 0b0000111111111111_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint16_t>(13) == 0b0001111111111111_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint16_t>(14) == 0b0011111111111111_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint16_t>(15) == 0b0111111111111111_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint16_t>(16) == 0b1111111111111111_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint16_t>(99) == 0b1111111111111111_u16);

	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(0)  == 0b00000000000000000000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(1)  == 0b00000000000000000000000000000001_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(2)  == 0b00000000000000000000000000000011_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(3)  == 0b00000000000000000000000000000111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(4)  == 0b00000000000000000000000000001111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(5)  == 0b00000000000000000000000000011111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(6)  == 0b00000000000000000000000000111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(7)  == 0b00000000000000000000000001111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(8)  == 0b00000000000000000000000011111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(9)  == 0b00000000000000000000000111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(10) == 0b00000000000000000000001111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(11) == 0b00000000000000000000011111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(12) == 0b00000000000000000000111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(13) == 0b00000000000000000001111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(14) == 0b00000000000000000011111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(15) == 0b00000000000000000111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(16) == 0b00000000000000001111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(17) == 0b00000000000000011111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(18) == 0b00000000000000111111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(19) == 0b00000000000001111111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(20) == 0b00000000000011111111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(21) == 0b00000000000111111111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(22) == 0b00000000001111111111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(23) == 0b00000000011111111111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(24) == 0b00000000111111111111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(25) == 0b00000001111111111111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(26) == 0b00000011111111111111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(27) == 0b00000111111111111111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(28) == 0b00001111111111111111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(29) == 0b00011111111111111111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(30) == 0b00111111111111111111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(31) == 0b01111111111111111111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(32) == 0b11111111111111111111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint32_t>(99) == 0b11111111111111111111111111111111_u32);

	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(0)  == 0b0000000000000000000000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(1)  == 0b0000000000000000000000000000000000000000000000000000000000000001_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(2)  == 0b0000000000000000000000000000000000000000000000000000000000000011_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(3)  == 0b0000000000000000000000000000000000000000000000000000000000000111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(4)  == 0b0000000000000000000000000000000000000000000000000000000000001111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(5)  == 0b0000000000000000000000000000000000000000000000000000000000011111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(6)  == 0b0000000000000000000000000000000000000000000000000000000000111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(7)  == 0b0000000000000000000000000000000000000000000000000000000001111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(8)  == 0b0000000000000000000000000000000000000000000000000000000011111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(9)  == 0b0000000000000000000000000000000000000000000000000000000111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(10) == 0b0000000000000000000000000000000000000000000000000000001111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(11) == 0b0000000000000000000000000000000000000000000000000000011111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(12) == 0b0000000000000000000000000000000000000000000000000000111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(13) == 0b0000000000000000000000000000000000000000000000000001111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(14) == 0b0000000000000000000000000000000000000000000000000011111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(15) == 0b0000000000000000000000000000000000000000000000000111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(16) == 0b0000000000000000000000000000000000000000000000001111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(17) == 0b0000000000000000000000000000000000000000000000011111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(18) == 0b0000000000000000000000000000000000000000000000111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(19) == 0b0000000000000000000000000000000000000000000001111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(20) == 0b0000000000000000000000000000000000000000000011111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(21) == 0b0000000000000000000000000000000000000000000111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(22) == 0b0000000000000000000000000000000000000000001111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(23) == 0b0000000000000000000000000000000000000000011111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(24) == 0b0000000000000000000000000000000000000000111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(25) == 0b0000000000000000000000000000000000000001111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(26) == 0b0000000000000000000000000000000000000011111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(27) == 0b0000000000000000000000000000000000000111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(28) == 0b0000000000000000000000000000000000001111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(29) == 0b0000000000000000000000000000000000011111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(30) == 0b0000000000000000000000000000000000111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(31) == 0b0000000000000000000000000000000001111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(32) == 0b0000000000000000000000000000000011111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(33) == 0b0000000000000000000000000000000111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(34) == 0b0000000000000000000000000000001111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(35) == 0b0000000000000000000000000000011111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(36) == 0b0000000000000000000000000000111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(37) == 0b0000000000000000000000000001111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(38) == 0b0000000000000000000000000011111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(39) == 0b0000000000000000000000000111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(40) == 0b0000000000000000000000001111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(41) == 0b0000000000000000000000011111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(42) == 0b0000000000000000000000111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(43) == 0b0000000000000000000001111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(44) == 0b0000000000000000000011111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(45) == 0b0000000000000000000111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(46) == 0b0000000000000000001111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(47) == 0b0000000000000000011111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(48) == 0b0000000000000000111111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(49) == 0b0000000000000001111111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(50) == 0b0000000000000011111111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(51) == 0b0000000000000111111111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(52) == 0b0000000000001111111111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(53) == 0b0000000000011111111111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(54) == 0b0000000000111111111111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(55) == 0b0000000001111111111111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(56) == 0b0000000011111111111111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(57) == 0b0000000111111111111111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(58) == 0b0000001111111111111111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(59) == 0b0000011111111111111111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(60) == 0b0000111111111111111111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(61) == 0b0001111111111111111111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(62) == 0b0011111111111111111111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(63) == 0b0111111111111111111111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(64) == 0b1111111111111111111111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint64_t>(99) == 0b1111111111111111111111111111111111111111111111111111111111111111_u64);

	#if MUU_HAS_INT128
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(0 )  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(1 )  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000000000001_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(2 )  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000000000011_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(3 )  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000000000111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(4 )  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000000001111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(5 )  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000000011111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(6 )  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000000111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(7 )  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000001111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(8 )  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000011111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(9 )  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000000111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(10)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000001111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(11)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000011111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(12)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000000111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(13)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000001111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(14)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000011111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(15)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000000111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(16)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000001111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(17)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000011111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(18)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000000111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(19)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000001111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(20)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000011111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(21)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000000111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(22)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000001111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(23)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000011111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(24)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000000111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(25)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000001111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(26)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000011111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(27)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000000111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(28)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000001111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(29)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000011111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(30)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000000111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(31)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000001111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(32)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000011111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(33)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000000111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(34)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000001111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(35)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000011111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(36)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000000111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(37)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000001111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(38)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000011111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(39)  == pack(0x0000000000000000_u64, 0b0000000000000000000000000111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(40)  == pack(0x0000000000000000_u64, 0b0000000000000000000000001111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(41)  == pack(0x0000000000000000_u64, 0b0000000000000000000000011111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(42)  == pack(0x0000000000000000_u64, 0b0000000000000000000000111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(43)  == pack(0x0000000000000000_u64, 0b0000000000000000000001111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(44)  == pack(0x0000000000000000_u64, 0b0000000000000000000011111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(45)  == pack(0x0000000000000000_u64, 0b0000000000000000000111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(46)  == pack(0x0000000000000000_u64, 0b0000000000000000001111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(47)  == pack(0x0000000000000000_u64, 0b0000000000000000011111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(48)  == pack(0x0000000000000000_u64, 0b0000000000000000111111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(49)  == pack(0x0000000000000000_u64, 0b0000000000000001111111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(50)  == pack(0x0000000000000000_u64, 0b0000000000000011111111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(51)  == pack(0x0000000000000000_u64, 0b0000000000000111111111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(52)  == pack(0x0000000000000000_u64, 0b0000000000001111111111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(53)  == pack(0x0000000000000000_u64, 0b0000000000011111111111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(54)  == pack(0x0000000000000000_u64, 0b0000000000111111111111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(55)  == pack(0x0000000000000000_u64, 0b0000000001111111111111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(56)  == pack(0x0000000000000000_u64, 0b0000000011111111111111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(57)  == pack(0x0000000000000000_u64, 0b0000000111111111111111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(58)  == pack(0x0000000000000000_u64, 0b0000001111111111111111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(59)  == pack(0x0000000000000000_u64, 0b0000011111111111111111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(60)  == pack(0x0000000000000000_u64, 0b0000111111111111111111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(61)  == pack(0x0000000000000000_u64, 0b0001111111111111111111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(62)  == pack(0x0000000000000000_u64, 0b0011111111111111111111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(63)  == pack(0x0000000000000000_u64, 0b0111111111111111111111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(64)  == pack(0x0000000000000000_u64, 0b1111111111111111111111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(65)  == pack(0b0000000000000000000000000000000000000000000000000000000000000001_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(66)  == pack(0b0000000000000000000000000000000000000000000000000000000000000011_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(67)  == pack(0b0000000000000000000000000000000000000000000000000000000000000111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(68)  == pack(0b0000000000000000000000000000000000000000000000000000000000001111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(69)  == pack(0b0000000000000000000000000000000000000000000000000000000000011111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(70)  == pack(0b0000000000000000000000000000000000000000000000000000000000111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(71)  == pack(0b0000000000000000000000000000000000000000000000000000000001111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(72)  == pack(0b0000000000000000000000000000000000000000000000000000000011111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(73)  == pack(0b0000000000000000000000000000000000000000000000000000000111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(74)  == pack(0b0000000000000000000000000000000000000000000000000000001111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(75)  == pack(0b0000000000000000000000000000000000000000000000000000011111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(76)  == pack(0b0000000000000000000000000000000000000000000000000000111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(77)  == pack(0b0000000000000000000000000000000000000000000000000001111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(78)  == pack(0b0000000000000000000000000000000000000000000000000011111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(79)  == pack(0b0000000000000000000000000000000000000000000000000111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(80)  == pack(0b0000000000000000000000000000000000000000000000001111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(81)  == pack(0b0000000000000000000000000000000000000000000000011111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(82)  == pack(0b0000000000000000000000000000000000000000000000111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(83)  == pack(0b0000000000000000000000000000000000000000000001111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(84)  == pack(0b0000000000000000000000000000000000000000000011111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(85)  == pack(0b0000000000000000000000000000000000000000000111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(86)  == pack(0b0000000000000000000000000000000000000000001111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(87)  == pack(0b0000000000000000000000000000000000000000011111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(88)  == pack(0b0000000000000000000000000000000000000000111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(89)  == pack(0b0000000000000000000000000000000000000001111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(90)  == pack(0b0000000000000000000000000000000000000011111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(91)  == pack(0b0000000000000000000000000000000000000111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(92)  == pack(0b0000000000000000000000000000000000001111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(93)  == pack(0b0000000000000000000000000000000000011111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(94)  == pack(0b0000000000000000000000000000000000111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(95)  == pack(0b0000000000000000000000000000000001111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(96)  == pack(0b0000000000000000000000000000000011111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(97)  == pack(0b0000000000000000000000000000000111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(98)  == pack(0b0000000000000000000000000000001111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(99)  == pack(0b0000000000000000000000000000011111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(100) == pack(0b0000000000000000000000000000111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(101) == pack(0b0000000000000000000000000001111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(102) == pack(0b0000000000000000000000000011111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(103) == pack(0b0000000000000000000000000111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(104) == pack(0b0000000000000000000000001111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(105) == pack(0b0000000000000000000000011111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(106) == pack(0b0000000000000000000000111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(107) == pack(0b0000000000000000000001111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(108) == pack(0b0000000000000000000011111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(109) == pack(0b0000000000000000000111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(110) == pack(0b0000000000000000001111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(111) == pack(0b0000000000000000011111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(112) == pack(0b0000000000000000111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(113) == pack(0b0000000000000001111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(114) == pack(0b0000000000000011111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(115) == pack(0b0000000000000111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(116) == pack(0b0000000000001111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(117) == pack(0b0000000000011111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(118) == pack(0b0000000000111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(119) == pack(0b0000000001111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(120) == pack(0b0000000011111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(121) == pack(0b0000000111111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(122) == pack(0b0000001111111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(123) == pack(0b0000011111111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(124) == pack(0b0000111111111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(125) == pack(0b0001111111111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(126) == pack(0b0011111111111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(127) == pack(0b0111111111111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(128) == pack(0b1111111111111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_right<uint128_t>(999) == pack(0b1111111111111111111111111111111111111111111111111111111111111111_u64, 0xFFFFFFFFFFFFFFFF_u64));
	#endif
}

TEST_CASE("bit_fill_left")
{
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint8_t>(0)  == 0b00000000_u8);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint8_t>(1)  == 0b10000000_u8);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint8_t>(2)  == 0b11000000_u8);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint8_t>(3)  == 0b11100000_u8);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint8_t>(4)  == 0b11110000_u8);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint8_t>(5)  == 0b11111000_u8);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint8_t>(6)  == 0b11111100_u8);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint8_t>(7)  == 0b11111110_u8);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint8_t>(8)  == 0b11111111_u8);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint8_t>(99) == 0b11111111_u8);

	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint16_t>(0)  == 0b0000000000000000_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint16_t>(1)  == 0b1000000000000000_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint16_t>(2)  == 0b1100000000000000_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint16_t>(3)  == 0b1110000000000000_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint16_t>(4)  == 0b1111000000000000_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint16_t>(5)  == 0b1111100000000000_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint16_t>(6)  == 0b1111110000000000_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint16_t>(7)  == 0b1111111000000000_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint16_t>(8)  == 0b1111111100000000_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint16_t>(9)  == 0b1111111110000000_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint16_t>(10) == 0b1111111111000000_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint16_t>(11) == 0b1111111111100000_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint16_t>(12) == 0b1111111111110000_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint16_t>(13) == 0b1111111111111000_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint16_t>(14) == 0b1111111111111100_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint16_t>(15) == 0b1111111111111110_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint16_t>(16) == 0b1111111111111111_u16);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint16_t>(99) == 0b1111111111111111_u16);

	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(0)  == 0b00000000000000000000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(1)  == 0b10000000000000000000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(2)  == 0b11000000000000000000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(3)  == 0b11100000000000000000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(4)  == 0b11110000000000000000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(5)  == 0b11111000000000000000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(6)  == 0b11111100000000000000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(7)  == 0b11111110000000000000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(8)  == 0b11111111000000000000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(9)  == 0b11111111100000000000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(10) == 0b11111111110000000000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(11) == 0b11111111111000000000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(12) == 0b11111111111100000000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(13) == 0b11111111111110000000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(14) == 0b11111111111111000000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(15) == 0b11111111111111100000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(16) == 0b11111111111111110000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(17) == 0b11111111111111111000000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(18) == 0b11111111111111111100000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(19) == 0b11111111111111111110000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(20) == 0b11111111111111111111000000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(21) == 0b11111111111111111111100000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(22) == 0b11111111111111111111110000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(23) == 0b11111111111111111111111000000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(24) == 0b11111111111111111111111100000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(25) == 0b11111111111111111111111110000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(26) == 0b11111111111111111111111111000000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(27) == 0b11111111111111111111111111100000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(28) == 0b11111111111111111111111111110000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(29) == 0b11111111111111111111111111111000_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(30) == 0b11111111111111111111111111111100_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(31) == 0b11111111111111111111111111111110_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(32) == 0b11111111111111111111111111111111_u32);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint32_t>(99) == 0b11111111111111111111111111111111_u32);

	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(0)  == 0b0000000000000000000000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(1)  == 0b1000000000000000000000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(2)  == 0b1100000000000000000000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(3)  == 0b1110000000000000000000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(4)  == 0b1111000000000000000000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(5)  == 0b1111100000000000000000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(6)  == 0b1111110000000000000000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(7)  == 0b1111111000000000000000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(8)  == 0b1111111100000000000000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(9)  == 0b1111111110000000000000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(10) == 0b1111111111000000000000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(11) == 0b1111111111100000000000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(12) == 0b1111111111110000000000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(13) == 0b1111111111111000000000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(14) == 0b1111111111111100000000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(15) == 0b1111111111111110000000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(16) == 0b1111111111111111000000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(17) == 0b1111111111111111100000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(18) == 0b1111111111111111110000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(19) == 0b1111111111111111111000000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(20) == 0b1111111111111111111100000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(21) == 0b1111111111111111111110000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(22) == 0b1111111111111111111111000000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(23) == 0b1111111111111111111111100000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(24) == 0b1111111111111111111111110000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(25) == 0b1111111111111111111111111000000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(26) == 0b1111111111111111111111111100000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(27) == 0b1111111111111111111111111110000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(28) == 0b1111111111111111111111111111000000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(29) == 0b1111111111111111111111111111100000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(30) == 0b1111111111111111111111111111110000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(31) == 0b1111111111111111111111111111111000000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(32) == 0b1111111111111111111111111111111100000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(33) == 0b1111111111111111111111111111111110000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(34) == 0b1111111111111111111111111111111111000000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(35) == 0b1111111111111111111111111111111111100000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(36) == 0b1111111111111111111111111111111111110000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(37) == 0b1111111111111111111111111111111111111000000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(38) == 0b1111111111111111111111111111111111111100000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(39) == 0b1111111111111111111111111111111111111110000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(40) == 0b1111111111111111111111111111111111111111000000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(41) == 0b1111111111111111111111111111111111111111100000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(42) == 0b1111111111111111111111111111111111111111110000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(43) == 0b1111111111111111111111111111111111111111111000000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(44) == 0b1111111111111111111111111111111111111111111100000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(45) == 0b1111111111111111111111111111111111111111111110000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(46) == 0b1111111111111111111111111111111111111111111111000000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(47) == 0b1111111111111111111111111111111111111111111111100000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(48) == 0b1111111111111111111111111111111111111111111111110000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(49) == 0b1111111111111111111111111111111111111111111111111000000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(50) == 0b1111111111111111111111111111111111111111111111111100000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(51) == 0b1111111111111111111111111111111111111111111111111110000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(52) == 0b1111111111111111111111111111111111111111111111111111000000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(53) == 0b1111111111111111111111111111111111111111111111111111100000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(54) == 0b1111111111111111111111111111111111111111111111111111110000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(55) == 0b1111111111111111111111111111111111111111111111111111111000000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(56) == 0b1111111111111111111111111111111111111111111111111111111100000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(57) == 0b1111111111111111111111111111111111111111111111111111111110000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(58) == 0b1111111111111111111111111111111111111111111111111111111111000000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(59) == 0b1111111111111111111111111111111111111111111111111111111111100000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(60) == 0b1111111111111111111111111111111111111111111111111111111111110000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(61) == 0b1111111111111111111111111111111111111111111111111111111111111000_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(62) == 0b1111111111111111111111111111111111111111111111111111111111111100_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(63) == 0b1111111111111111111111111111111111111111111111111111111111111110_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(64) == 0b1111111111111111111111111111111111111111111111111111111111111111_u64);
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint64_t>(99) == 0b1111111111111111111111111111111111111111111111111111111111111111_u64);

	#if MUU_HAS_INT128
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>( 0)  == pack(0b0000000000000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>( 1)  == pack(0b1000000000000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>( 2)  == pack(0b1100000000000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>( 3)  == pack(0b1110000000000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>( 4)  == pack(0b1111000000000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>( 5)  == pack(0b1111100000000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>( 6)  == pack(0b1111110000000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>( 7)  == pack(0b1111111000000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>( 8)  == pack(0b1111111100000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>( 9)  == pack(0b1111111110000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(10)  == pack(0b1111111111000000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(11)  == pack(0b1111111111100000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(12)  == pack(0b1111111111110000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(13)  == pack(0b1111111111111000000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(14)  == pack(0b1111111111111100000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(15)  == pack(0b1111111111111110000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(16)  == pack(0b1111111111111111000000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(17)  == pack(0b1111111111111111100000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(18)  == pack(0b1111111111111111110000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(19)  == pack(0b1111111111111111111000000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(20)  == pack(0b1111111111111111111100000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(21)  == pack(0b1111111111111111111110000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(22)  == pack(0b1111111111111111111111000000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(23)  == pack(0b1111111111111111111111100000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(24)  == pack(0b1111111111111111111111110000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(25)  == pack(0b1111111111111111111111111000000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(26)  == pack(0b1111111111111111111111111100000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(27)  == pack(0b1111111111111111111111111110000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(28)  == pack(0b1111111111111111111111111111000000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(29)  == pack(0b1111111111111111111111111111100000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(30)  == pack(0b1111111111111111111111111111110000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(31)  == pack(0b1111111111111111111111111111111000000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(32)  == pack(0b1111111111111111111111111111111100000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(33)  == pack(0b1111111111111111111111111111111110000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(34)  == pack(0b1111111111111111111111111111111111000000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(35)  == pack(0b1111111111111111111111111111111111100000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(36)  == pack(0b1111111111111111111111111111111111110000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(37)  == pack(0b1111111111111111111111111111111111111000000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(38)  == pack(0b1111111111111111111111111111111111111100000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(39)  == pack(0b1111111111111111111111111111111111111110000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(40)  == pack(0b1111111111111111111111111111111111111111000000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(41)  == pack(0b1111111111111111111111111111111111111111100000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(42)  == pack(0b1111111111111111111111111111111111111111110000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(43)  == pack(0b1111111111111111111111111111111111111111111000000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(44)  == pack(0b1111111111111111111111111111111111111111111100000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(45)  == pack(0b1111111111111111111111111111111111111111111110000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(46)  == pack(0b1111111111111111111111111111111111111111111111000000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(47)  == pack(0b1111111111111111111111111111111111111111111111100000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(48)  == pack(0b1111111111111111111111111111111111111111111111110000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(49)  == pack(0b1111111111111111111111111111111111111111111111111000000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(50)  == pack(0b1111111111111111111111111111111111111111111111111100000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(51)  == pack(0b1111111111111111111111111111111111111111111111111110000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(52)  == pack(0b1111111111111111111111111111111111111111111111111111000000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(53)  == pack(0b1111111111111111111111111111111111111111111111111111100000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(54)  == pack(0b1111111111111111111111111111111111111111111111111111110000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(55)  == pack(0b1111111111111111111111111111111111111111111111111111111000000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(56)  == pack(0b1111111111111111111111111111111111111111111111111111111100000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(57)  == pack(0b1111111111111111111111111111111111111111111111111111111110000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(58)  == pack(0b1111111111111111111111111111111111111111111111111111111111000000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(59)  == pack(0b1111111111111111111111111111111111111111111111111111111111100000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(60)  == pack(0b1111111111111111111111111111111111111111111111111111111111110000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(61)  == pack(0b1111111111111111111111111111111111111111111111111111111111111000_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(62)  == pack(0b1111111111111111111111111111111111111111111111111111111111111100_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(63)  == pack(0b1111111111111111111111111111111111111111111111111111111111111110_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(64)  == pack(0b1111111111111111111111111111111111111111111111111111111111111111_u64, 0x0000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(65)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1000000000000000000000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(66)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1100000000000000000000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(67)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1110000000000000000000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(68)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111000000000000000000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(69)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111100000000000000000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(70)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111110000000000000000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(71)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111000000000000000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(72)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111100000000000000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(73)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111110000000000000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(74)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111000000000000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(75)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111100000000000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(76)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111110000000000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(77)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111000000000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(78)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111100000000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(79)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111110000000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(80)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111000000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(81)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111100000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(82)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111110000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(83)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111000000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(84)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111100000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(85)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111110000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(86)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111000000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(87)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111100000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(88)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111110000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(89)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111000000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(90)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111100000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(91)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111110000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(92)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111000000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(93)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111100000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(94)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111110000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(95)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111000000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(96)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111100000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(97)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111110000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(98)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111000000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(99)  == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111100000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(100) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111110000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(101) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111000000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(102) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111100000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(103) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111110000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(104) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111000000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(105) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111100000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(106) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111110000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(107) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111000000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(108) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111100000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(109) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111110000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(110) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111000000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(111) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111100000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(112) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111110000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(113) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111000000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(114) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111100000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(115) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111110000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(116) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111000000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(117) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111100000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(118) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111110000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(119) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111000000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(120) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111100000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(121) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111110000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(122) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111111000000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(123) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111111100000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(124) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111111110000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(125) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111111111000_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(126) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111111111100_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(127) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111111111110_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(128) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111111111111_u64));
	CHECK_AND_STATIC_ASSERT(bit_fill_left<uint128_t>(999) == pack(0xFFFFFFFFFFFFFFFF_u64, 0b1111111111111111111111111111111111111111111111111111111111111111_u64));
	#endif
}

TEST_CASE("byte_select")
{
	#if MUU_HAS_INT128
	CHECK_AND_STATIC_ASSERT(byte_select<15>(pack(0xFEDCBA9876543210_u64, 0xAABBCCDDABCDEF01_u64)) == 0xFE_u8);
	CHECK_AND_STATIC_ASSERT(byte_select<14>(pack(0xFEDCBA9876543210_u64, 0xAABBCCDDABCDEF01_u64)) == 0xDC_u8);
	CHECK_AND_STATIC_ASSERT(byte_select<13>(pack(0xFEDCBA9876543210_u64, 0xAABBCCDDABCDEF01_u64)) == 0xBA_u8);
	CHECK_AND_STATIC_ASSERT(byte_select<12>(pack(0xFEDCBA9876543210_u64, 0xAABBCCDDABCDEF01_u64)) == 0x98_u8);
	CHECK_AND_STATIC_ASSERT(byte_select<11>(pack(0xFEDCBA9876543210_u64, 0xAABBCCDDABCDEF01_u64)) == 0x76_u8);
	CHECK_AND_STATIC_ASSERT(byte_select<10>(pack(0xFEDCBA9876543210_u64, 0xAABBCCDDABCDEF01_u64)) == 0x54_u8);
	CHECK_AND_STATIC_ASSERT(byte_select< 9>(pack(0xFEDCBA9876543210_u64, 0xAABBCCDDABCDEF01_u64)) == 0x32_u8);
	CHECK_AND_STATIC_ASSERT(byte_select< 8>(pack(0xFEDCBA9876543210_u64, 0xAABBCCDDABCDEF01_u64)) == 0x10_u8);
	CHECK_AND_STATIC_ASSERT(byte_select< 7>(pack(0xFEDCBA9876543210_u64, 0xAABBCCDDABCDEF01_u64)) == 0xAA_u8);
	CHECK_AND_STATIC_ASSERT(byte_select< 6>(pack(0xFEDCBA9876543210_u64, 0xAABBCCDDABCDEF01_u64)) == 0xBB_u8);
	CHECK_AND_STATIC_ASSERT(byte_select< 5>(pack(0xFEDCBA9876543210_u64, 0xAABBCCDDABCDEF01_u64)) == 0xCC_u8);
	CHECK_AND_STATIC_ASSERT(byte_select< 4>(pack(0xFEDCBA9876543210_u64, 0xAABBCCDDABCDEF01_u64)) == 0xDD_u8);
	CHECK_AND_STATIC_ASSERT(byte_select< 3>(pack(0xFEDCBA9876543210_u64, 0xAABBCCDDABCDEF01_u64)) == 0xAB_u8);
	CHECK_AND_STATIC_ASSERT(byte_select< 2>(pack(0xFEDCBA9876543210_u64, 0xAABBCCDDABCDEF01_u64)) == 0xCD_u8);
	CHECK_AND_STATIC_ASSERT(byte_select< 1>(pack(0xFEDCBA9876543210_u64, 0xAABBCCDDABCDEF01_u64)) == 0xEF_u8);
	CHECK_AND_STATIC_ASSERT(byte_select< 0>(pack(0xFEDCBA9876543210_u64, 0xAABBCCDDABCDEF01_u64)) == 0x01_u8);
	#endif

	CHECK_AND_STATIC_ASSERT(byte_select<7>(0xAABBCCDDABCDEF01_u64) == 0xAA_u8);
	CHECK_AND_STATIC_ASSERT(byte_select<6>(0xAABBCCDDABCDEF01_u64) == 0xBB_u8);
	CHECK_AND_STATIC_ASSERT(byte_select<5>(0xAABBCCDDABCDEF01_u64) == 0xCC_u8);
	CHECK_AND_STATIC_ASSERT(byte_select<4>(0xAABBCCDDABCDEF01_u64) == 0xDD_u8);
	CHECK_AND_STATIC_ASSERT(byte_select<3>(0xAABBCCDDABCDEF01_u64) == 0xAB_u8);
	CHECK_AND_STATIC_ASSERT(byte_select<2>(0xAABBCCDDABCDEF01_u64) == 0xCD_u8);
	CHECK_AND_STATIC_ASSERT(byte_select<1>(0xAABBCCDDABCDEF01_u64) == 0xEF_u8);
	CHECK_AND_STATIC_ASSERT(byte_select<0>(0xAABBCCDDABCDEF01_u64) == 0x01_u8);

	CHECK_AND_STATIC_ASSERT(byte_select<3>(0xABCDEF01_u32) == 0xAB_u8);
	CHECK_AND_STATIC_ASSERT(byte_select<2>(0xABCDEF01_u32) == 0xCD_u8);
	CHECK_AND_STATIC_ASSERT(byte_select<1>(0xABCDEF01_u32) == 0xEF_u8);
	CHECK_AND_STATIC_ASSERT(byte_select<0>(0xABCDEF01_u32) == 0x01_u8);

	CHECK_AND_STATIC_ASSERT(byte_select<1>(0xEF01_u16) == 0xEF_u8);
	CHECK_AND_STATIC_ASSERT(byte_select<0>(0xEF01_u16) == 0x01_u8);

	CHECK_AND_STATIC_ASSERT(byte_select<0>(0x01_u8) == 0x01_u8);
}

TEST_CASE("byte_reverse")
{
	#if MUU_HAS_INT128

	CHECK_AND_STATIC_ASSERT(byte_reverse(pack(0xFEDCBA9876543210_u64, 0xAABBCCDDABCDEF01_u64)) == pack(0x01EFCDABDDCCBBAA_u64, 0x1032547698BADCFE_u64));

	#endif

	CHECK_AND_STATIC_ASSERT(byte_reverse(0xAABBCCDDABCDEF01_u64) == 0x01EFCDABDDCCBBAA_u64);
	CHECK_AND_STATIC_ASSERT(byte_reverse(0xABCDEF01_u32) == 0x01EFCDAB_u32);
	CHECK_AND_STATIC_ASSERT(byte_reverse(0xABCD_u16) == 0xCDAB_u16);
}

namespace
{
	#define INF_OR_NAN_RANGE_CHECKS 1

	#if INF_OR_NAN_RANGE_CHECKS
	template <typename T, int sign>
	constexpr bool test_infinity_or_nan_ranges() noexcept
	{
		using data = float_test_data<T>;

		if constexpr (data::int_blittable)
		{
			constexpr auto test_range = [](auto min_, auto max_) noexcept
			{
				using blit_type = decltype(min_);
				const blit_type first = (min)(min_, max_); // normalize for endiannness
				const blit_type last = (max)(min_, max_);  //

				if constexpr (std::numeric_limits<T>::digits <= 24)
				{
					for (auto bits = first; bits < last; bits++)
						if (!infinity_or_nan(bit_cast<T>(bits)))
							return false;
				}
				else
				{
					auto bits = first;
					const uint64_t step = bit_fill_right<uint64_t>(std::numeric_limits<T>::digits-1) / (bit_fill_right<uint64_t>(23_sz)-1_u64);
					for (auto iters = bit_fill_right<uint64_t>(23_sz) - 1_u64; iters --> uint64_t{};)
					{
						const auto v = bit_cast<T>(bits);
						if (!infinity_or_nan(v))
							return false;
						bits += static_cast<blit_type>(step);
					}
				}

				if (!infinity_or_nan(bit_cast<T>(last)))
					return false;

				return true;
			};

			if constexpr (sign >= 0)
			{
				if (!test_range(data::bits_pos_nan_min, data::bits_pos_nan_max)) return false;
			}
			else
			{
				if (!test_range(data::bits_neg_nan_min, data::bits_neg_nan_max)) return false;
			}
		}

		return true;
	}
	#endif // INF_OR_NAN_RANGE_CHECKS
}

#define INF_OR_NAN_CHECK(expr)												\
	static_assert(!build::supports_constexpr_infinity_or_nan || (expr));	\
	CHECK(expr)

#if MUU_HAS_INTERCHANGE_FP16

TEST_CASE("infinity_or_nan - __fp16")
{
	INF_OR_NAN_CHECK(!infinity_or_nan(__fp16{}));
	INF_OR_NAN_CHECK(infinity_or_nan(make_nan<__fp16>()));
	INF_OR_NAN_CHECK(infinity_or_nan(make_infinity<__fp16>(-1)));
	INF_OR_NAN_CHECK(infinity_or_nan(make_infinity<__fp16>()));

	#if INF_OR_NAN_RANGE_CHECKS
	CHECK((test_infinity_or_nan_ranges<__fp16, -1>()));
	CHECK((test_infinity_or_nan_ranges<__fp16, 1>()));
	#endif
}

#endif // MUU_HAS_INTERCHANGE_FP16

#if MUU_HAS_FLOAT16

TEST_CASE("infinity_or_nan - float16_t")
{
	INF_OR_NAN_CHECK(!infinity_or_nan(float16_t{}));
	INF_OR_NAN_CHECK(infinity_or_nan(make_nan<float16_t>()));
	INF_OR_NAN_CHECK(infinity_or_nan(make_infinity<float16_t>(-1)));
	INF_OR_NAN_CHECK(infinity_or_nan(make_infinity<float16_t>()));

	#if INF_OR_NAN_RANGE_CHECKS
	CHECK((test_infinity_or_nan_ranges<float16_t, -1>()));
	CHECK((test_infinity_or_nan_ranges<float16_t, 1>()));
	#endif
}

#endif // MUU_HAS_FLOAT16

TEST_CASE("infinity_or_nan - half")
{
	INF_OR_NAN_CHECK(!infinity_or_nan(half::from_bits(0x0000_u16)));
	INF_OR_NAN_CHECK(infinity_or_nan(make_nan<half>()));
	INF_OR_NAN_CHECK(infinity_or_nan(make_infinity<half>(-1)));
	INF_OR_NAN_CHECK(infinity_or_nan(make_infinity<half>()));

	#if INF_OR_NAN_RANGE_CHECKS
	CHECK((test_infinity_or_nan_ranges<half, -1>()));
	CHECK((test_infinity_or_nan_ranges<half, 1>()));
	#endif
}

TEST_CASE("infinity_or_nan - float")
{
	INF_OR_NAN_CHECK(!infinity_or_nan(float{}));
	INF_OR_NAN_CHECK(infinity_or_nan(make_nan<float>()));
	INF_OR_NAN_CHECK(infinity_or_nan(make_infinity<float>(-1)));
	INF_OR_NAN_CHECK(infinity_or_nan(make_infinity<float>()));

	#if INF_OR_NAN_RANGE_CHECKS
	CHECK((test_infinity_or_nan_ranges<float, -1>()));
	CHECK((test_infinity_or_nan_ranges<float, 1>()));
	#endif
}

TEST_CASE("infinity_or_nan - double")
{
	INF_OR_NAN_CHECK(!infinity_or_nan(0.0));
	INF_OR_NAN_CHECK(infinity_or_nan(make_nan<double>()));
	INF_OR_NAN_CHECK(infinity_or_nan(make_infinity<double>(-1)));
	INF_OR_NAN_CHECK(infinity_or_nan(make_infinity<double>()));

	#if INF_OR_NAN_RANGE_CHECKS
	CHECK((test_infinity_or_nan_ranges<double, -1>()));
	CHECK((test_infinity_or_nan_ranges<double, 1>()));
	#endif
}

TEST_CASE("infinity_or_nan - long double")
{
	INF_OR_NAN_CHECK(!infinity_or_nan(0.0L));
	INF_OR_NAN_CHECK(infinity_or_nan(make_nan<long double>()));
	INF_OR_NAN_CHECK(infinity_or_nan(make_infinity<long double>(-1)));
	INF_OR_NAN_CHECK(infinity_or_nan(make_infinity<long double>()));

	#if INF_OR_NAN_RANGE_CHECKS
	CHECK((test_infinity_or_nan_ranges<long double, -1>()));
	CHECK((test_infinity_or_nan_ranges<long double, 1>()));
	#endif
}

