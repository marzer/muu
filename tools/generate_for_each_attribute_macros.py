#!/usr/bin/env python3
# This file is a part of muu and is subject to the the terms of the MIT license.
# Copyright (c) Mark Gillard <mark.gillard@outlook.com.au>
# See https://github.com/marzer/muu/blob/master/LICENSE for the full license text.
# SPDX-License-Identifier: MIT

import utils
import re
from pathlib import Path
from io import StringIO



def main():
	root_dir = Path(utils.entry_script_dir(), '..').resolve()
	impl_dir = Path(root_dir, 'include', 'muu', 'impl')
	utils.assert_existing_directory(root_dir)
	utils.assert_existing_directory(impl_dir)

	windows = r'defined(_WIN32)'
	amd64 = r'(defined(__amd64__) || defined(__amd64) || defined(__x86_64__) || defined(__x86_64) || defined(_M_AMD64))'

	free_calling_conventions = {
		rf'{windows} && {amd64}'  : ( '__cdecl', '__vectorcall' ),
		rf'{windows} && !{amd64}' : ( '__cdecl', '__vectorcall', '__stdcall', '__fastcall' ),
		rf'!{windows}' : ( '', )
	}

	member_calling_conventions = {
		rf'{windows} && {amd64}'  : ( '__cdecl', '__vectorcall' ),
		rf'{windows} && !{amd64}' : ( '__cdecl', '__vectorcall', '__stdcall', '__fastcall', '__thiscall' ),
		rf'!{windows}' : ( '', )
	}

	cv_categories = (
		r'',
		r'const',
		r'volatile',
		r'const volatile'
	)

	ref_categories = (
		r'',
		r'&',
		r'&&'
	)

	cvref_categories = (
		r'',
		r'&',
		r'&&',
		r'const',
		r'const&',
		r'const&&',
		r'volatile',
		r'volatile&',
		r'volatile&&',
		r'const volatile',
		r'const volatile&',
		r'const volatile&&'
	)

	noexcept_categories = (
		'',
		'noexcept'
	)

	file_name = rf'preprocessor_for_each_attributes.h'
	file_path = Path(impl_dir, file_name)

	with StringIO() as buf:
		o = lambda s = '', end='\n': print(s, end=end, file=buf)

		# header
		o(rf'''// This file is a part of muu and is subject to the the terms of the MIT license.
// Copyright (c) Mark Gillard <mark.gillard@outlook.com.au>
// See https://github.com/marzer/muu/blob/master/LICENSE for the full license text.
// SPDX-License-Identifier: MIT
//-----
// this file was generated by a script - do not modify it directly
//-----
#pragma once
/// \cond
// clang-format off

// for-each macros defined in this file:
// {{define_list}}

''')

		o('''
		#ifndef MUU_BLANK
			#define MUU_BLANK_3
			#define MUU_BLANK_2 MUU_BLANK_3
			#define MUU_BLANK_1 MUU_BLANK_2
			#define MUU_BLANK	MUU_BLANK_1
		#endif
		''')

		# MUU_FOR_EACH_CV
		o('''
		#ifndef MUU_FOR_EACH_CV
		#define MUU_FOR_EACH_CV(func) \\''')
		for cv in cv_categories:
			o(f'func({cv if cv else "MUU_BLANK"}) \\')
		o('#endif\n')

		# MUU_FOR_EACH_REF
		o('''
		#ifndef MUU_FOR_EACH_REF
		#define MUU_FOR_EACH_REF(func) \\''')
		for ref in ref_categories:
			o(f'func({ref if ref else "MUU_BLANK"}) \\')
		o('#endif\n')

		# MUU_FOR_EACH_CVREF
		o('''
		#ifndef MUU_FOR_EACH_CVREF
		#define MUU_FOR_EACH_CVREF(func) \\''')
		for cvref in cvref_categories:
			o(f'func({cvref if cvref else "MUU_BLANK"}) \\')
		o('#endif\n')

		# MUU_FOR_EACH_NOEXCEPT
		o('''
		#ifndef MUU_FOR_EACH_NOEXCEPT
		#define MUU_FOR_EACH_NOEXCEPT(func) \\''')
		for noexcept in noexcept_categories:
			o(f'func({noexcept if noexcept else "MUU_BLANK"}) \\')
		o('#endif\n')

		# MUU_FOR_EACH_CV_NOEXCEPT
		o('''
		#ifndef MUU_FOR_EACH_CV_NOEXCEPT
		#define MUU_FOR_EACH_CV_NOEXCEPT(func) \\''')
		for cv in cv_categories:
			for noexcept in noexcept_categories:
				o(f'func({cv if cv else "MUU_BLANK"}, {noexcept if noexcept else "MUU_BLANK"}) \\')
		o('#endif\n')

		# MUU_FOR_EACH_REF_NOEXCEPT
		o('''
		#ifndef MUU_FOR_EACH_REF_NOEXCEPT
		#define MUU_FOR_EACH_REF_NOEXCEPT(func) \\''')
		for ref in ref_categories:
			for noexcept in noexcept_categories:
				o(f'func({ref if ref else "MUU_BLANK"}, {noexcept if noexcept else "MUU_BLANK"}) \\')
		o('#endif\n')

		# MUU_FOR_EACH_CVREF_NOEXCEPT
		o('''
		#ifndef MUU_FOR_EACH_CVREF_NOEXCEPT
		#define MUU_FOR_EACH_CVREF_NOEXCEPT(func) \\''')
		for cvref in cvref_categories:
			for noexcept in noexcept_categories:
				o(f'func({cvref if cvref else "MUU_BLANK"}, {noexcept if noexcept else "MUU_BLANK"}) \\')
		o('#endif\n')

		# MUU_FOR_EACH_CALLCONV
		# MUU_FOR_EACH_CALLCONV_NOEXCEPT
		o()
		o('// free-function calling conventions')
		num = 0
		for condition, conventions in free_calling_conventions.items():
			o(rf'#{"el" if num else ""}if {condition}')

			o('''
			#ifndef MUU_FOR_EACH_CALLCONV
			#define MUU_FOR_EACH_CALLCONV(func) \\''')
			for conv in conventions:
				o(f'func({conv if conv else "MUU_BLANK"}) \\')
			o('#endif\n')

			o('''
			#ifndef MUU_FOR_EACH_CALLCONV_NOEXCEPT
			#define MUU_FOR_EACH_CALLCONV_NOEXCEPT(func) \\''')
			for conv in conventions:
				for noexcept in noexcept_categories:
					o(f'func({conv if conv else "MUU_BLANK"}, {noexcept if noexcept else "MUU_BLANK"}) \\')
			o('#endif\n')

			num += 1
			if num == len(free_calling_conventions):
				o(r'''
				#endif
				''')

		# MUU_FOR_EACH_MEMBER_CALLCONV
		# MUU_FOR_EACH_MEMBER_CALLCONV_CV
		# MUU_FOR_EACH_MEMBER_CALLCONV_REF
		# MUU_FOR_EACH_MEMBER_CALLCONV_CVREF
		# MUU_FOR_EACH_MEMBER_CALLCONV_NOEXCEPT
		# MUU_FOR_EACH_MEMBER_CALLCONV_CV_NOEXCEPT
		# MUU_FOR_EACH_MEMBER_CALLCONV_REF_NOEXCEPT
		# MUU_FOR_EACH_MEMBER_CALLCONV_CVREF_NOEXCEPT
		o()
		o('// member-function calling conventions')
		num = 0
		for condition, conventions in member_calling_conventions.items():
			o(rf'#{"el" if num else ""}if {condition}')

			o('''
			#ifndef MUU_FOR_EACH_MEMBER_CALLCONV
			#define MUU_FOR_EACH_MEMBER_CALLCONV(func) \\''')
			for conv in conventions:
				o(f'func({conv if conv else "MUU_BLANK"}) \\')
			o('#endif\n')

			o('''
			#ifndef MUU_FOR_EACH_MEMBER_CALLCONV_CV
			#define MUU_FOR_EACH_MEMBER_CALLCONV_CV(func) \\''')
			for conv in conventions:
				for cv in cv_categories:
					o(f'func({conv if conv else "MUU_BLANK"}, {cv if cv else "MUU_BLANK"}) \\')
			o('#endif\n')

			o('''
			#ifndef MUU_FOR_EACH_MEMBER_CALLCONV_REF
			#define MUU_FOR_EACH_MEMBER_CALLCONV_REF(func) \\''')
			for conv in conventions:
				for ref in ref_categories:
					o(f'func({conv if conv else "MUU_BLANK"}, {ref if ref else "MUU_BLANK"}) \\')
			o('#endif\n')

			o('''
			#ifndef MUU_FOR_EACH_MEMBER_CALLCONV_CVREF
			#define MUU_FOR_EACH_MEMBER_CALLCONV_CVREF(func) \\''')
			for conv in conventions:
				for cvref in cvref_categories:
					o(f'func({conv if conv else "MUU_BLANK"}, {cvref if cvref else "MUU_BLANK"}) \\')
			o('#endif\n')

			o('''
			#ifndef MUU_FOR_EACH_MEMBER_CALLCONV_NOEXCEPT
			#define MUU_FOR_EACH_MEMBER_CALLCONV_NOEXCEPT(func) \\''')
			for conv in conventions:
				for noexcept in noexcept_categories:
					o(f'func({conv if conv else "MUU_BLANK"}, {noexcept if noexcept else "MUU_BLANK"}) \\')
			o('#endif\n')

			o('''
			#ifndef MUU_FOR_EACH_MEMBER_CALLCONV_CV_NOEXCEPT
			#define MUU_FOR_EACH_MEMBER_CALLCONV_CV_NOEXCEPT(func) \\''')
			for conv in conventions:
				for cv in cv_categories:
					for noexcept in noexcept_categories:
						o(f'func({conv if conv else "MUU_BLANK"}, {cv if cv else "MUU_BLANK"}, {noexcept if noexcept else "MUU_BLANK"}) \\')
			o('#endif\n')

			o('''
			#ifndef MUU_FOR_EACH_MEMBER_CALLCONV_REF_NOEXCEPT
			#define MUU_FOR_EACH_MEMBER_CALLCONV_REF_NOEXCEPT(func) \\''')
			for conv in conventions:
				for ref in ref_categories:
					for noexcept in noexcept_categories:
						o(f'func({conv if conv else "MUU_BLANK"}, {ref if ref else "MUU_BLANK"}, {noexcept if noexcept else "MUU_BLANK"}) \\')
			o('#endif\n')

			o('''
			#ifndef MUU_FOR_EACH_MEMBER_CALLCONV_CVREF_NOEXCEPT
			#define MUU_FOR_EACH_MEMBER_CALLCONV_CVREF_NOEXCEPT(func) \\''')
			for conv in conventions:
				for cvref in cvref_categories:
					for noexcept in noexcept_categories:
						o(f'func({conv if conv else "MUU_BLANK"}, {cvref if cvref else "MUU_BLANK"}, {noexcept if noexcept else "MUU_BLANK"}) \\')
			o('#endif\n')

			num += 1
			if num == len(member_calling_conventions):
				o(r'''
				#endif
				''')


		# footer
		o(rf'''

// clang-format on
/// \endcond
''')

		print(rf'Writing {file_path}')
		with open(file_path, 'w', encoding='utf-8', newline='\n') as file:
			out = buf.getvalue()
			out = re.sub('\n[ \t]+#', '\n#', out)
			out = re.sub('\n[ \t]+\n','\n\n', out)
			out = out.replace('\nfunc(', '\n\tfunc(')
			out = re.sub('\n\n+\n','\n\n', out)
			out = out.replace(') \\\n#endif', ')\n#endif')

			re_define = re.compile(r'^\s*#\s*define\s+([a-zA-Z0-9_]+)(?:$|\s|\()')
			defines = set()
			for output_line in out.splitlines():
				m = re_define.match(output_line)
				if m:
					defines.add(m.group(1))

			defines = [d for d in defines if d.startswith(r'MUU_FOR')]
			defines.sort()
			defines = '\n// '.join(defines)
			out = out.replace('{define_list}', defines)


			file.write(utils.clang_format(out))



if __name__ == '__main__':
	utils.run(main, verbose=True)
