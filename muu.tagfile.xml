<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.2" doxygen_gitid="98c67549bc3cd855873e0ef5eeab7c6410699d78">
  <compound kind="file">
    <name>accumulator.h</name>
    <filename>accumulator_8h.html</filename>
    <includes id="compressed__pair_8h" name="compressed_pair.h" local="yes" imported="no">compressed_pair.h</includes>
    <includes id="math_8h" name="math.h" local="yes" imported="no">math.h</includes>
    <class kind="class">muu::accumulator</class>
    <namespace>muu</namespace>
  </compound>
  <compound kind="file">
    <name>all.h</name>
    <filename>all_8h.html</filename>
    <includes id="accumulator_8h" name="accumulator.h" local="yes" imported="no">accumulator.h</includes>
    <includes id="axis__angle_8h" name="axis_angle.h" local="yes" imported="no">axis_angle.h</includes>
    <includes id="bit_8h" name="bit.h" local="yes" imported="no">bit.h</includes>
    <includes id="blob_8h" name="blob.h" local="yes" imported="no">blob.h</includes>
    <includes id="bounding__box_8h" name="bounding_box.h" local="yes" imported="no">bounding_box.h</includes>
    <includes id="chars_8h" name="chars.h" local="yes" imported="no">chars.h</includes>
    <includes id="compressed__pair_8h" name="compressed_pair.h" local="yes" imported="no">compressed_pair.h</includes>
    <includes id="core_8h" name="core.h" local="yes" imported="no">core.h</includes>
    <includes id="emplacement__array_8h" name="emplacement_array.h" local="yes" imported="no">emplacement_array.h</includes>
    <includes id="euler__angles_8h" name="euler_angles.h" local="yes" imported="no">euler_angles.h</includes>
    <includes id="function__view_8h" name="function_view.h" local="yes" imported="no">function_view.h</includes>
    <includes id="generic__allocator_8h" name="generic_allocator.h" local="yes" imported="no">generic_allocator.h</includes>
    <includes id="half_8h" name="half.h" local="yes" imported="no">half.h</includes>
    <includes id="hashing_8h" name="hashing.h" local="yes" imported="no">hashing.h</includes>
    <includes id="integral__range_8h" name="integral_range.h" local="yes" imported="no">integral_range.h</includes>
    <includes id="iterators_8h" name="iterators.h" local="yes" imported="no">iterators.h</includes>
    <includes id="line__segment_8h" name="line_segment.h" local="yes" imported="no">line_segment.h</includes>
    <includes id="math_8h" name="math.h" local="yes" imported="no">math.h</includes>
    <includes id="matrix_8h" name="matrix.h" local="yes" imported="no">matrix.h</includes>
    <includes id="meta_8h" name="meta.h" local="yes" imported="no">meta.h</includes>
    <includes id="oriented__bounding__box_8h" name="oriented_bounding_box.h" local="yes" imported="no">oriented_bounding_box.h</includes>
    <includes id="plane_8h" name="plane.h" local="yes" imported="no">plane.h</includes>
    <includes id="quaternion_8h" name="quaternion.h" local="yes" imported="no">quaternion.h</includes>
    <includes id="scope__guard_8h" name="scope_guard.h" local="yes" imported="no">scope_guard.h</includes>
    <includes id="span_8h" name="span.h" local="yes" imported="no">span.h</includes>
    <includes id="static__string_8h" name="static_string.h" local="yes" imported="no">static_string.h</includes>
    <includes id="string__param_8h" name="string_param.h" local="yes" imported="no">string_param.h</includes>
    <includes id="strings_8h" name="strings.h" local="yes" imported="no">strings.h</includes>
    <includes id="strong__typedef_8h" name="strong_typedef.h" local="yes" imported="no">strong_typedef.h</includes>
    <includes id="tagged__ptr_8h" name="tagged_ptr.h" local="yes" imported="no">tagged_ptr.h</includes>
    <includes id="thread__pool_8h" name="thread_pool.h" local="yes" imported="no">thread_pool.h</includes>
    <includes id="triangle_8h" name="triangle.h" local="yes" imported="no">triangle.h</includes>
    <includes id="type__list_8h" name="type_list.h" local="yes" imported="no">type_list.h</includes>
    <includes id="type__name_8h" name="type_name.h" local="yes" imported="no">type_name.h</includes>
    <includes id="uuid_8h" name="uuid.h" local="yes" imported="no">uuid.h</includes>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">vector.h</includes>
    <includes id="packed__unit__vector_8h" name="packed_unit_vector.h" local="yes" imported="no">packed_unit_vector.h</includes>
  </compound>
  <compound kind="file">
    <name>axis_angle.h</name>
    <filename>axis__angle_8h.html</filename>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">vector.h</includes>
    <class kind="struct">muu::axis_angle</class>
    <namespace>muu</namespace>
  </compound>
  <compound kind="file">
    <name>bit.h</name>
    <filename>bit_8h.html</filename>
    <includes id="bit__cast_8h" name="bit_cast.h" local="yes" imported="no">impl/bit_cast.h</includes>
    <namespace>muu</namespace>
    <member kind="function">
      <type>constexpr int</type>
      <name>countl_zero</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga12cd318fdcf736ca99f5bf66aa615fd1</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>countr_zero</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab5b51a3c121984cfddb8d5da4e9bf070</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>countl_one</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gadf75326611fa43dbacc1ff601e9e969b</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>countr_one</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga84963e1a7bf75ec7464cda53b26dec8a</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>bit_ceil</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gae62fd9413cd433a4e15c0fdf89913a1b</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>bit_pack</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga952a65241777f79e5561239f57ec9295</anchor>
      <arglist>(T val1, U val2, V... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>popcount</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab392bc74729da41c4d226f8d45e58599</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_single_bit</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga309ac880015add971ee06b148191060f</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>bit_floor</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga0ef1d5961e901e2d52b3d6be07efe201</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>bit_width</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga1a764507fe486799f60eac32c622e63e</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>bit_fill_right</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab5cb8d563f61573ca1e2827ddd085d3d</anchor>
      <arglist>(size_t count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>bit_fill_left</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gaf41f6cc12b0e9ac1de1bdf63e2a28fdf</anchor>
      <arglist>(size_t count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr uint8_t</type>
      <name>byte_select</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gae644160cd7d978d95922af233afc5ddd</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr uint8_t</type>
      <name>byte_select</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga18d1da41b1d53329c0d0605596494010</anchor>
      <arglist>(T val, size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>byte_reverse</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab3e8f4f75d417dc6880311de6c9306e9</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>swizzle</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga1aaa24bb10d08ad78c86695baabc1857</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>blob.h</name>
    <filename>blob_8h.html</filename>
    <includes id="generic__allocator_8h" name="generic_allocator.h" local="yes" imported="no">generic_allocator.h</includes>
    <class kind="class">muu::blob</class>
    <namespace>muu</namespace>
  </compound>
  <compound kind="file">
    <name>bounding_box.h</name>
    <filename>bounding__box_8h.html</filename>
    <includes id="sat__tester_8h" name="sat_tester.h" local="yes" imported="no">sat_tester.h</includes>
    <class kind="struct">muu::bounding_box</class>
    <class kind="struct">std::tuple_size&lt; muu::bounding_box&lt; Scalar &gt; &gt;</class>
    <class kind="struct">std::tuple_element&lt; I, muu::bounding_box&lt; Scalar &gt; &gt;</class>
    <namespace>muu</namespace>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga4bac8a8324b2e1ef33cec0f7a8f718ce</anchor>
      <arglist>(const bounding_box&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga0535df1acd603649ac9f793d96062112</anchor>
      <arglist>(const bounding_box&lt; S &gt; &amp;q1, const bounding_box&lt; T &gt; &amp;q2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga75782bf3bacf4ef690b1811d84c9f7ea</anchor>
      <arglist>(const bounding_box&lt; S &gt; &amp;q, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>chars.h</name>
    <filename>chars_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>compressed_pair.h</name>
    <filename>compressed__pair_8h.html</filename>
    <includes id="meta_8h" name="meta.h" local="yes" imported="no">meta.h</includes>
    <class kind="class">muu::compressed_pair</class>
    <class kind="struct">std::tuple_size&lt; muu::compressed_pair&lt; First, Second &gt; &gt;</class>
    <class kind="struct">std::tuple_element&lt; I, muu::compressed_pair&lt; First, Second &gt; &gt;</class>
    <namespace>muu</namespace>
  </compound>
  <compound kind="file">
    <name>core.h</name>
    <filename>core_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>emplacement_array.h</name>
    <filename>emplacement__array_8h.html</filename>
    <includes id="generic__allocator_8h" name="generic_allocator.h" local="yes" imported="no">generic_allocator.h</includes>
    <class kind="class">muu::emplacement_array</class>
    <namespace>muu</namespace>
  </compound>
  <compound kind="file">
    <name>euler_angles.h</name>
    <filename>euler__angles_8h.html</filename>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">vector.h</includes>
    <class kind="struct">muu::euler_angles</class>
    <namespace>muu</namespace>
  </compound>
  <compound kind="file">
    <name>function_view.h</name>
    <filename>function__view_8h.html</filename>
    <includes id="meta_8h" name="meta.h" local="yes" imported="no">meta.h</includes>
    <class kind="class">muu::function_view</class>
    <namespace>muu</namespace>
  </compound>
  <compound kind="file">
    <name>fwd.h</name>
    <filename>fwd_8h.html</filename>
    <includes id="preprocessor_8h" name="preprocessor.h" local="yes" imported="no">preprocessor.h</includes>
    <class kind="struct">muu::constants</class>
    <namespace>muu</namespace>
    <namespace>muu::literals</namespace>
    <namespace>muu::build</namespace>
    <member kind="typedef">
      <type>__int128_t</type>
      <name>int128_t</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gaf8e0aa5a37ec05e07c7b69077de9303c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>__uint128_t</type>
      <name>uint128_t</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gaa82164a62949a1b029695dff5441d577</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>__float128</type>
      <name>float128_t</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga74a70ec9e3331f37ebbc3e875e183861</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>allow_implicit_bit_cast</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga824ac2b58e006d4be8d4b0d6a0f7180d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>generic_allocator.h</name>
    <filename>generic__allocator_8h.html</filename>
    <class kind="struct">muu::generic_allocator</class>
    <namespace>muu</namespace>
  </compound>
  <compound kind="file">
    <name>half.h</name>
    <filename>half_8h.html</filename>
    <includes id="math_8h" name="math.h" local="yes" imported="no">math.h</includes>
    <class kind="struct">muu::half</class>
    <class kind="struct">muu::constants&lt; half &gt;</class>
    <class kind="struct">std::numeric_limits&lt; muu::half &gt;</class>
    <namespace>muu</namespace>
    <namespace>muu::build</namespace>
    <namespace>muu::literals</namespace>
    <member kind="function">
      <type>consteval half</type>
      <name>operator&quot;&quot;_f16</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>a13af047e58351ed0d3446aa9cd617902</anchor>
      <arglist>(long double val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval half</type>
      <name>operator&quot;&quot;_f16</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>abc373f6b1f9679939e03e9421199241a</anchor>
      <arglist>(unsigned long long val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gafea7a631de7f6399fb55e1dffbe79c00</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga5e3a3b5d552cc29822e1a17fdd1cc3bd</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga87bf7f92a62590f695617cea9bb941fe</anchor>
      <arglist>(half a, half b, half epsilon=constants&lt; half &gt;::default_epsilon) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga5df3be4319d056f5a12b082177b1f8dd</anchor>
      <arglist>(half x, half epsilon=constants&lt; half &gt;::default_epsilon) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>ga33492d2d742e23fb32d6feddeb0a12a5</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gadb3f9b52071aea9fe1cf894a7fb9c039</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga435fcf395534dfec9465ed87a52fc88d</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gae9514bab097b1d4944394221097d5449</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>ga3f48d168cf2a5cc17d95fd4860ce8267</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga02cf6ce14db45d5f2148ffbb9e33438e</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>ga2b2e08e3f3a3e7db4751921441317963</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga8bb8129170a7cc7e9902de607e1c8279</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>gab24a151709d5cbfc7c049d279307ec54</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>gac59b7164798fbb5ae72b13010ac7f960</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga7b0d41cadc47ad6e8255fa170f640be1</anchor>
      <arglist>(half y, half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga7d194c0af560d9e78eab17a4e76d17a5</anchor>
      <arglist>(half start, half finish, half alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gae3196eacbe3561ca0edc39d280f31585</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga7569b01664a740bf2ecc532e22c3b487</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>supports_constexpr_half</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>ae33023a7463b68374575d0cb9f42af43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hashing.h</name>
    <filename>hashing_8h.html</filename>
    <includes id="strings_8h" name="strings.h" local="yes" imported="no">strings.h</includes>
    <class kind="class">muu::hash_combiner</class>
    <class kind="class">muu::fnv1a</class>
    <class kind="class">muu::sha1</class>
    <namespace>muu</namespace>
  </compound>
  <compound kind="file">
    <name>bit_cast.h</name>
    <path>/root/project/include/muu/impl/</path>
    <filename>bit__cast_8h.html</filename>
    <includes id="meta_8h" name="meta.h" local="yes" imported="no">../meta.h</includes>
    <namespace>muu</namespace>
    <namespace>muu::build</namespace>
    <member kind="function">
      <type>constexpr To</type>
      <name>bit_cast</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gaadb4c6332c738c248f84f43ece303657</anchor>
      <arglist>(const From &amp;from) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>supports_constexpr_bit_cast</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>a5ee6b53a87bd46b2bf84f2bea9e2a0b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>integral_range.h</name>
    <path>/root/project/include/muu/</path>
    <filename>integral__range_8h.html</filename>
    <includes id="iterators_8h" name="iterators.h" local="yes" imported="no">iterators.h</includes>
    <includes id="meta_8h" name="meta.h" local="yes" imported="no">meta.h</includes>
    <class kind="struct">muu::integral_range</class>
    <namespace>muu</namespace>
    <member kind="typedef">
      <type>integral_range&lt; size_t &gt;</type>
      <name>index_range</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga5e513b55fd7079d1be1debe2962fdd20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_range&lt; uintptr_t &gt;</type>
      <name>uintptr_range</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga981c7cbd101c1e1a282d7e89eef00965</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_range&lt; intptr_t &gt;</type>
      <name>intptr_range</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gaa28ee361f8507f8ed4615cc8f0c28354</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_range&lt; std::byte * &gt;</type>
      <name>byteptr_range</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab0ee666138056710136d9532965d1565</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iterators.h</name>
    <path>/root/project/include/muu/</path>
    <filename>iterators_8h.html</filename>
    <includes id="meta_8h" name="meta.h" local="yes" imported="no">meta.h</includes>
    <namespace>muu</namespace>
    <member kind="function">
      <type>constexpr auto</type>
      <name>begin_iterator</name>
      <anchorfile>group__iterators.html</anchorfile>
      <anchor>ga51289db4c35d5fb00c9a63be59911a08</anchor>
      <arglist>(T &amp;&amp;iterable) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>end_iterator</name>
      <anchorfile>group__iterators.html</anchorfile>
      <anchor>gaa1738bf3c1eae5986fd53eafe6ad7c3e</anchor>
      <arglist>(T &amp;&amp;iterable) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>iterator_distance</name>
      <anchorfile>group__iterators.html</anchorfile>
      <anchor>ga005a07ba4450155afd1ef02e317a9d9b</anchor>
      <arglist>(B begin, E end) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>line_segment.h</name>
    <path>/root/project/include/muu/</path>
    <filename>line__segment_8h.html</filename>
    <class kind="struct">muu::line_segment</class>
    <class kind="struct">std::tuple_size&lt; muu::line_segment&lt; Scalar &gt; &gt;</class>
    <class kind="struct">std::tuple_element&lt; P, muu::line_segment&lt; Scalar &gt; &gt;</class>
    <class kind="struct">muu::constants&lt; line_segment&lt; Scalar &gt; &gt;</class>
    <namespace>muu</namespace>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gafe018cc9e24195a2edf98017340c2263</anchor>
      <arglist>(const line_segment&lt; S &gt; &amp;seg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga9feb4d4d3c2c67ad383254a73fdeff52</anchor>
      <arglist>(const line_segment&lt; S &gt; &amp;seg1, const line_segment&lt; T &gt; &amp;seg2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gac5e6b9f30f0e565a9893ba7c7fea821b</anchor>
      <arglist>(const line_segment&lt; S &gt; &amp;seg, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>math.h</name>
    <path>/root/project/include/muu/</path>
    <filename>math_8h.html</filename>
    <includes id="core_8h" name="core.h" local="yes" imported="no">core.h</includes>
    <includes id="meta_8h" name="meta.h" local="yes" imported="no">meta.h</includes>
    <includes id="bit_8h" name="bit.h" local="yes" imported="no">bit.h</includes>
    <namespace>muu</namespace>
    <namespace>muu::build</namespace>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga244d41fcb34e53c950eddd916a6d5396</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga251c6b64050eadcb5c29cd852e89381f</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gaaefff82330e72babbf53ba1d2fc970d5</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga7fd6b8649626ba472b2b465f42de1d7b</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga5a34372404d7751b9b764754b94d3b30</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga01537de80625dd04856c091786a51c21</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gae0e73f57dfe538bfb813978525d029b4</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga7165ec00307546834b2cfec5dcd18920</anchor>
      <arglist>(const T &amp;obj) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gac83f0d0b00f182e5cfa6ae4dfa9ad12c</anchor>
      <arglist>(const T(&amp;vals)[N]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga0f071cb7be895ff5f3176182306cb1a9</anchor>
      <arglist>(const T &amp;val1, const U &amp;val2, const V &amp;... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga89d1dcc8041ac8452317eae1d21493b2</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga8721fd9fd4f1431a5f9dd1a22cdf3d3e</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>gaeeeae9c211e65058c12d8c29e67c9157</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga6627ff562c64be1de075e0039502adf5</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga381bc8195a18ac0c461fb994bfdab418</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga97fef737f56413a711ba50907cea741d</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr signed char</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>gaef9c6f1c1301cdb38630e96475188561</anchor>
      <arglist>(signed char x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr short</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga5bc7d2857695d07a4f93f0d9b79603bd</anchor>
      <arglist>(short x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga6d0020d25e08aef7b2f3a927fd75e128</anchor>
      <arglist>(int x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga86ac6e3fe0a4a6168c32a44aa9b3def6</anchor>
      <arglist>(long x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long long</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>gaabdbc172d4985254b63025116f687c7e</anchor>
      <arglist>(long long x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>gafbffb9903578ee8c8b87337ec83d5c1f</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gaec4759ac5b40da6afc50eb0b3585f0fe</anchor>
      <arglist>(float a, float b, float epsilon=default_epsilon&lt; float &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gab93e074083f9da2915b8a5236f1cf7cf</anchor>
      <arglist>(double a, double b, double epsilon=default_epsilon&lt; double &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga943da06224480e3230fc1420a245f98c</anchor>
      <arglist>(long double a, long double b, long double epsilon=default_epsilon&lt; long double &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga9b1e5da7e9ef7782a93da63b886ae258</anchor>
      <arglist>(float128_t a, float128_t b, float128_t epsilon=default_epsilon&lt; float128_t &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gaac1ff3710f8b52479141460b908e0019</anchor>
      <arglist>(_Float16 a, _Float16 b, _Float16 epsilon=default_epsilon&lt; _Float16 &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gafeb998d47625b367c261d8bc59c7a282</anchor>
      <arglist>(__fp16 a, __fp16 b, __fp16 epsilon=default_epsilon&lt; __fp16 &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga6a04d11e27ed0da907193cdd51b5015e</anchor>
      <arglist>(T a, U b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga3156cd82de6c0da5a9054c544ee99725</anchor>
      <arglist>(float x, float epsilon=default_epsilon&lt; float &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gaa419296539b7bda59ef0f8bf62ac330c</anchor>
      <arglist>(double x, double epsilon=default_epsilon&lt; double &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gafe3ff928bf4edd7f2b341ee9f8480789</anchor>
      <arglist>(long double x, long double epsilon=default_epsilon&lt; long double &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga2e4ec0adf720b9c8fcd10344c1bf81eb</anchor>
      <arglist>(float128_t x, float128_t epsilon=default_epsilon&lt; float128_t &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga6f7edf9230c38096dead05a99bf5be4b</anchor>
      <arglist>(_Float16 x, _Float16 epsilon=default_epsilon&lt; _Float16 &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga7376c26dbf846ee7e5eebbe68e431042</anchor>
      <arglist>(__fp16 x, __fp16 epsilon=default_epsilon&lt; __fp16 &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gabd16d3c6f14a660d037f92e612bb4dc9</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>ga789b6da21314c806db7da27d11e112c6</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>ga67232bb43da7a03d03e2b2f40356a76b</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>gaf0492a080471ae79fe3e4e31832c514f</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>ga26d3f4cb15a587f4d825cbdca7f031ae</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>gac9a12e90b0fa7067a096e068e764cabf</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>gae46f187d01b8118d5f2a778c59674c88</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>ga630c2ae425d1019e5a06101111c299f1</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>ga15a26c9fb021ca5f9ac27fb0f4636060</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gabc53ad88d9c76a9b0ed2b42c81d2ea9d</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>ga1c484df90484d3f74112cfbe0208c602</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>ga121a468fa346aedba09c1dfd59430269</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gace09eecb7e26047a4d4be5f822022134</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gadf94b04b23c51e89aaf98d5d9eeef9b8</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gaa15d5ffe910a00ffbeb36c5fc16e2a97</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga4133ea944ff868e69eabab5d872f6da4</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga5b1bf68a67a05d300f8e9c7fd5d1c026</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga603ad552348bcbdb218217d23675d3ce</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>gabd0f8319f64fbe7ca4c1e6739f44d962</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga26b70752b25e3620d807aa8b4f533c38</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga04769433189ec11e79f9abb3da5b8856</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>gafb8dd23cf2d5d5628aa5f09cd7af2035</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gaffcbf014cc8896089708ff930c4aa988</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>ga3a3a9c69cbc81f27d3263cb91ba226ef</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gacbaec835db4344520dfb7a296d05bed6</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gae6fe268bd38f8fd1eb4cf94d16e10002</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gafb9b963d32e3298aa442292557578715</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gabf84b6eab050b7d991fe2cbd38a307db</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>ga0049c8d9a89e3cb79523681de737e744</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>gafc968973dde0c97322c9c6669f954e2d</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>ga0648930ad64bdc3816542f336b88e92d</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>ga56a1b3ab18e271f42aa180990868261b</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>gae466125efc53b0afbe2f48c3a3c7fa95</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>ga6eab0abb46d5296fc69b951458aae6c9</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>ga79827b43adcd7eef2612c45b91eda40c</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>gaad6641ec7b924bb662a329f42f1f1423</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga929628806abc68d22dc9224af0578dd2</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>gada49fd50fe8b4101cdd948cdc43ac8c0</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga956da7e0f0a5e6e3b8ffeb84c5327e18</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga976c36817620570e8dc2f9903f6f8d9f</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga8334763ec29d37322967387ad8096695</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga3b1f6ef1c2bbad4f86a34de5f8ee7124</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga3ea18db1b6602dbb58f54ff998953c05</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>ga7aa14fc0444bf0176a1e46e66e3ad747</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>gad882d4b32f9b5fc1d2030b174aa6ef5f</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>gaae78f62d62005d88dc86b9b6cc59f50c</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>gac1e4f5cd1d0b9edebc1ff8ec5046ebcd</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>gaee469cec74af5f1d1e84544a7b26e69d</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>ga3583e5518d781304a7be684fc009bdbd</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>ga1a8ef0810e060c707c554fa995a989fc</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga69b28eed21b5f99faf7076f3349455dc</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga2abfdb52a5d3b98ab3119da1155eb960</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga9803e5bf3be9b110ddd704dafc891b2d</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>gaeb05383011594d02f233899de601bfda</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga06579a5e3c5e853163f611c25b2b7b79</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga189bbc017d8f1f7c9885f68b7fb36bb0</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga7b9d06979da170a3200f6b675f0a682e</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga14329b7d2af039a939b5b03a643dbd0f</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga1754f8044c13e5db0546b85a7d9db66e</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga380b08f5141db6f53cee3c2ab2eb4231</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga971a48168d347e790c546b65fcd0689a</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga22633d8890da645ac8e10a13a785c3e4</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga38d3272314ef4433f29ac56ea51762a8</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga05267e8f5abd22ac560bd3564bb7607f</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>gad38e7dc443023ed27f26058455c30b30</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>ga6aaf46f37bb83640e45b37e0aea858b8</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>ga0d93faf1621f38f7e0ed7cfaf37076f4</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>ga0ecacb3f5d6607739ebcb5b6cc612a64</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>ga28990b3c84d9b9a7fde19401b936339a</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>ga8e1d8ec2569793e50d9a21d02b61b5ba</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>gaf0779f07b81c81d2ec64131dcc54bcfd</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga68e17f23ef350ccc6e6bd8c20611da12</anchor>
      <arglist>(float y, float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga5a5edbb63697e0d3895ecee9d3639123</anchor>
      <arglist>(double y, double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga1766c7359209816b8bd4317b9c587f79</anchor>
      <arglist>(long double y, long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga25d67472f15352ffe17f9bd14446ce56</anchor>
      <arglist>(float128_t y, float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>gabab1e3ea2e16d7346043f57b57a18d49</anchor>
      <arglist>(_Float16 y, _Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga19204446bd2c384f0bf47d779035c414</anchor>
      <arglist>(__fp16 y, __fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>gabcd89688add70b87668b772617a3cc11</anchor>
      <arglist>(Y y, X x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga86b8aacc099deefdf6284d9bab7f2dad</anchor>
      <arglist>(float start, float finish, float alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga47e41d7626365fcf881152c286833b5a</anchor>
      <arglist>(double start, double finish, double alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga44b514d356d6673cc0595cf0390dd8de</anchor>
      <arglist>(long double start, long double finish, long double alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga614ccb878d52686237995f87013cfae5</anchor>
      <arglist>(float128_t start, float128_t finish, float128_t alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga2ef795b3516004d50fdb7003c388e15d</anchor>
      <arglist>(_Float16 start, _Float16 finish, _Float16 alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga18ab33f3d13ed00aaabb060162e64a07</anchor>
      <arglist>(__fp16 start, __fp16 finish, __fp16 alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga348d51a08675a8a83b04e59b7705c29e</anchor>
      <arglist>(T start, U finish, V alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gafa124ba1db7c179c3fa9f9ad12539c59</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>ga596c2eab90545d145798f271bebc72b5</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gaf5cb38b69c2f8c41f7fd1e9e0084d704</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gaefa5c95a33e9ba84e03e0bfd46768e68</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gaff4c5fbdda0cf56d41e39dcc0320a5d6</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>ga9266da36d4d28c201f1d0896e64ce593</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gaba28a922cc3cfdbce286f477c8b90528</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga1b9e36906462a78fe344cd8bf545d479</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga68aec6ced168d6572172e0096b46bb68</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>gad98b33969ab11460f65c71aea940588d</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga1115610c44cc6ac505aac869b401e2f9</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga5fb741c82216a6a033043a3e8759eabb</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>gab9a123e29471417050aeb3281e0d7b9a</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga704dca3f184e06b3f20ee77f063a6536</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>lcm</name>
      <anchorfile>group__math.html</anchorfile>
      <anchor>ga747762e03956634201248a153ce0ce5e</anchor>
      <arglist>(T val1, U val2, V... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>gcd</name>
      <anchorfile>group__math.html</anchorfile>
      <anchor>ga54f9d1a2efa5ffdf81afdaa4fcb89fd6</anchor>
      <arglist>(T val1, U val2, V... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>evenly_distribute</name>
      <anchorfile>group__math.html</anchorfile>
      <anchor>gabf640468db93ee9390f6809f2495a291</anchor>
      <arglist>(T total, T bucket_count, T bucket_index) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>supports_constexpr_math</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>ae1f632796abc91c58e0667c38ecc384e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>supports_constexpr_infinity_or_nan</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>ac2ed8c664a3937f1d6beca3916098ebd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matrix.h</name>
    <path>/root/project/include/muu/</path>
    <filename>matrix_8h.html</filename>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">vector.h</includes>
    <includes id="quaternion_8h" name="quaternion.h" local="yes" imported="no">quaternion.h</includes>
    <class kind="struct">muu::matrix</class>
    <class kind="struct">muu::constants&lt; matrix&lt; Scalar, Rows, Columns &gt; &gt;</class>
    <namespace>muu</namespace>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga1f57b7af70f0235ad644486a5943e582</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gac9148a5c5b63c63d14ca506aee43484e</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m1, const matrix&lt; T, R, C &gt; &amp;m2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gae6774c12326004b4e421e554a35afe8b</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr matrix&lt; S, C, R &gt;</type>
      <name>transpose</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a4d11bad2718bdbb090fb73ab6c5def00</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr determinant_type</type>
      <name>determinant</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a4cb7a56d0f2260af3ceb0b0c5204ed0b</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr inverse_type</type>
      <name>invert</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a279539802143d8a8227c503be45aa972</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr matrix&lt; S, R, C &gt;</type>
      <name>orthonormalize</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>abe6723009e315776a0868a4062e4537b</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>meta.h</name>
    <path>/root/project/include/muu/</path>
    <filename>meta_8h.html</filename>
    <includes id="fwd_8h" name="fwd.h" local="yes" imported="no">fwd.h</includes>
    <namespace>muu</namespace>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; std::remove_reference_t&lt; T &gt; &gt;</type>
      <name>remove_cvref</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3cac44d2af43c4fd98e835ff5b28988a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::remove_enum_&lt; T &gt;::type</type>
      <name>remove_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga4f0f94bba132e44d22663319f05d2ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::remove_lvalue_reference_&lt; T &gt;::type</type>
      <name>remove_lvalue_reference</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga13a69e455c20f67fc73394a02831e8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::remove_rvalue_reference_&lt; T &gt;::type</type>
      <name>remove_rvalue_reference</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga82a7eca9ca8f07f6779eff47f45d5a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::largest_&lt; T, U... &gt;::type</type>
      <name>largest</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga66c7ac2c2ba5ae0358a9c398ca1a5fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::smallest_&lt; T, U... &gt;::type</type>
      <name>smallest</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7b0e548ad93b4b2fabc3c38eadd456c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::most_aligned_&lt; T, U... &gt;::type</type>
      <name>most_aligned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga412a873e98a67c58f4bcb71bb8c23ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::least_aligned_&lt; T, U... &gt;::type</type>
      <name>least_aligned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga14d4e47d4a3ee4bcae55745a917343e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_ref_&lt; T, std::add_const_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt;::type</type>
      <name>add_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6c121fbd44449d05f6a34f26d51d923f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_ref_&lt; T, std::remove_const_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt;::type</type>
      <name>remove_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6d7666d41f4b1baa5e5b030e85d145c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; Const, add_const&lt; T &gt;, remove_const&lt; T &gt; &gt;</type>
      <name>set_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga70ea61c88a2156d5ca0576b338692597</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; AddConst, add_const&lt; T &gt;, T &gt;</type>
      <name>conditionally_add_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga23ee95c345637ff50a6cc88c4fb0d031</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>set_const&lt; T, is_const&lt; CopyFrom &gt; &gt;</type>
      <name>copy_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3e944d0a62580bb16190d18a7a50e854</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_ref_&lt; T, std::add_volatile_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt;::type</type>
      <name>add_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf658a920120d44cf78a83198479de23c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_ref_&lt; T, std::remove_volatile_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt;::type</type>
      <name>remove_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gabb6c34cb7b210e52a6d0d9e53234696b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; Volatile, add_volatile&lt; T &gt;, remove_volatile&lt; T &gt; &gt;</type>
      <name>set_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3216c56b6dfa3cd6045818d2f8e09612</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; AddVolatile, add_volatile&lt; T &gt;, T &gt;</type>
      <name>conditionally_add_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga5387101d09160941cca73a48954eb7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>set_volatile&lt; T, is_volatile&lt; CopyFrom &gt; &gt;</type>
      <name>copy_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gafdebb5c32611e098bd4074c6393ad55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_ref_&lt; T, std::add_volatile_t&lt; std::add_const_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt; &gt;::type</type>
      <name>add_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga946998d98f22705d1e955cc213187310</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_ref_&lt; T, std::remove_volatile_t&lt; std::remove_const_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt; &gt;::type</type>
      <name>remove_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3d3fbe6cee41ab6b225058f8d29a17d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; ConstVolatile, add_cv&lt; T &gt;, remove_cv&lt; T &gt; &gt;</type>
      <name>set_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga75174a7728c44e0ef2c5c573910945d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; AddConstVolatile, add_cv&lt; T &gt;, T &gt;</type>
      <name>conditionally_add_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaccbf5f71e9b673c2f490c0c0406042ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>copy_const&lt; copy_volatile&lt; T, CopyFrom &gt;, CopyFrom &gt;</type>
      <name>copy_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga13aaa81d66b143ecb5d837c8c0041d18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::copy_ref_&lt; T, CopyFrom &gt;::type</type>
      <name>copy_ref</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa11d1a8c1d6c16d5381a6f1d11940294</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>copy_ref&lt; copy_cv&lt; std::remove_reference_t&lt; T &gt;, std::remove_reference_t&lt; CopyFrom &gt; &gt;, CopyFrom &gt;</type>
      <name>copy_cvref</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga75bafae329db57745b406a02e6565007</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_pointer_&lt; Ptr, NewBase &gt;::type</type>
      <name>rebase_pointer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga29769609b73728e3b7814d36a7e0c335</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::make_signed_&lt; T &gt;::type</type>
      <name>make_signed</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga8723b987045c7b40be5ce133a46e899c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::make_unsigned_&lt; T &gt;::type</type>
      <name>make_unsigned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga5f3932e1b40c23bd953e0444340aa1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; Signed, make_signed&lt; T &gt;, make_unsigned&lt; T &gt; &gt;</type>
      <name>set_signed</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gafed1fc9809926331d0cdfb6ea3c1cb7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>set_signed&lt; T, is_signed&lt; CopyFrom &gt; &gt;</type>
      <name>copy_signed</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac5e348d0385db539de78faa96895dba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; Unsigned, make_unsigned&lt; T &gt;, make_signed&lt; T &gt; &gt;</type>
      <name>set_unsigned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga53618440cb88b6a660781cd80eff06cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>set_unsigned&lt; T, is_unsigned&lt; CopyFrom &gt; &gt;</type>
      <name>copy_unsigned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa51e86e5712ddee88175a905c427ff62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::type_identity_&lt; T &gt;::type</type>
      <name>type_identity</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga8b8f215acad0e9f3d7aa52326155f030</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::unsigned_integer_&lt; Bits &gt;::type</type>
      <name>unsigned_integer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga47a90ed3608cf7b0bf562f4ad208cd21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::signed_integer_&lt; Bits &gt;::type</type>
      <name>signed_integer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga4f67907a17de3414f8f0340716e987d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::remove_all_pointers_&lt; T &gt;::type</type>
      <name>remove_all_pointers</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaff6410affb3cb93013482639fcaea000</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>copy_cvref&lt; typename impl::remove_callconv_&lt; remove_cvref&lt; T &gt; &gt;::type, T &gt;</type>
      <name>remove_callconv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga4af6796f51934576020a09a73986d074</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>copy_cvref&lt; typename impl::add_noexcept_&lt; remove_cvref&lt; T &gt; &gt;::type, T &gt;</type>
      <name>add_noexcept</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga5087ff7f20ed1765f215b92e4b56cd6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>copy_cvref&lt; typename impl::remove_noexcept_&lt; remove_cvref&lt; T &gt; &gt;::type, T &gt;</type>
      <name>remove_noexcept</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga28bb77154a6d0fb8930b84c5d59373d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; impl::is_small_float_&lt; T &gt;, typename impl::rebase_ref_&lt; T, copy_cv&lt; float, T &gt; &gt;::type, T &gt;</type>
      <name>promote_if_small_float</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga0a3f15c5886ad6189103d5705db8e37c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; impl::is_large_float_&lt; T &gt;, typename impl::rebase_ref_&lt; T, copy_cv&lt; long double, T &gt; &gt;::type, T &gt;</type>
      <name>demote_if_large_float</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga588efdcdebc69e38cb6353d8462d59ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>demote_if_large_float&lt; promote_if_small_float&lt; T &gt; &gt;</type>
      <name>clamp_to_standard_float</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae07552fde8149d1a8a6c93971edbbd86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>impl::std_math_common_type&lt; remove_cvref&lt; T &gt;... &gt;</type>
      <name>epsilon_type</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga25162e97f327cfee39320e501bdb2697</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::integral_constant&lt; size_t, N &gt;</type>
      <name>index_tag</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6ca7fed60fe86574dd8bedf3b3332431</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_tag&lt; 0 &gt;</type>
      <name>x_axis_tag</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga8c02cd07c84b1ef589a0a3b83e113682</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_tag&lt; 1 &gt;</type>
      <name>y_axis_tag</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6195dfd7a074e2a16f6c61500c45fe23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_tag&lt; 2 &gt;</type>
      <name>z_axis_tag</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga480c8ad7ee9e1cc7bcafa16d817bca1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_tag&lt; 3 &gt;</type>
      <name>w_axis_tag</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga91d696211c0fb4edebb87611d7fab7df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>always_false</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa4c92e65e153e9a6c9ac01ba3bd653e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>total_size</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3b7e16d2f90358811bc6231eb993ff33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>alignment_of</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga693c421331c5f268eb2e2fdd318368fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_same</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaed6f4fa9f355d5e882000e65dc7cd0b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_same</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga9c2b21ea2cf57533a5dcf264d0e906e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>index_of_type</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga91356a65708493c6fbc993024894c901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicitly_convertible</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga05ccb72a3320555db5a5115cd85d6691</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicitly_convertible_to_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga022ab99547d2892239187f83bd0644f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicitly_convertible_to_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3958a07eb93e42c5e6b1f65366d58968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_implicitly_convertible_to</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga02add24d1eebc3839d917c0691cd6e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_explicitly_convertible</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga67e98114af69303c9e5f65e56056cd06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_explicitly_convertible_to_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gafd769d61abf0eea21cb8c95ab32ebc0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_explicitly_convertible_to_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gabc0a354ed72c2bc9b631b10cd9c4f451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_explicitly_convertible_to</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3034c2e89b1b9fb97c2afc24f285c175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_convertible</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga525ce1f7e17d4abf8fae0c6aa5fd26cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_convertible_to_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaec35a37d461e7b8b6b6a92296c75c5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_convertible_to_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga622faeced84d6fc02ccadcecd020e78a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_convertible_to</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga20d0844251aba1af5b372c44803999eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicitly_nothrow_convertible</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga756aec06547ff6bd69c7f51bb4d01e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicitly_nothrow_convertible_to_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2559c7587af80489da97126e645da89d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicitly_nothrow_convertible_to_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf0de9802b973764be7848a020088f961</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_implicitly_nothrow_convertible_to</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga5acc7a33b8fd21e0b8805f26d9ac992d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_explicitly_nothrow_convertible</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gab20c2a24d63c89812c535f0a986b958d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_explicitly_nothrow_convertible_to_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3f32761c6e60e709f4e6e4b6874230a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_explicitly_nothrow_convertible_to_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gadbb31fed4f56fa8869ea860a4b330f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_explicitly_nothrow_convertible_to</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6d0bc59b0f1a3247d4e42c39d2f00dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_convertible</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga090993f769edb7c30da887d3b6f71f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_convertible_to_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga324c6e94dfe58e068c531e55c15ea9a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_convertible_to_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga0ada082fe05220bf0aaca76cba7f9e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_nothrow_convertible_to</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga465e6a6c912b71ca29cf4abf4575bf4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf1d5da5278f527b501cecffdd38e2e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga5654c62084cb368c8d754ef2391188f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga38cc1e5109a701b7c609faf614ad75f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_scoped_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga54c8d27010a9c661dba826d90f0c9ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_scoped_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac4960dd74a53e778d606c67b17b898fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_scoped_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac742ec408e961ab3cdfcba8b59fc043f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_legacy_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga0ad880900bc41c21a698d9114f333e3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_legacy_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga61a1919e5b9db8752915c52166418e35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_legacy_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga0b19c96f2fd22318ff9434cecb8e4ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_unsigned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga9e9c5b2e65e4f784d2a6b52b6a33a34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_unsigned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gab947cfb735e87e9394420be39d9f0279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_unsigned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa71f70dfddfb9f29ed162014c6020672</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_signed</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga8692cd4c2e3c8e2b0167a5a586f1f6e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_signed</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga8db6d992e6f39f91948ea80dff4e1025</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_signed</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gad0e4bc930ad4094734715f7b5b116c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_integral</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6283839d5536a4ee096adccee42b88c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_integral</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga1a551403c0c337deb10ceb0dc7718fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_integral</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga113302a3a1ac13b36caa7f1baaf7a191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_integer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga32715027f4d7ea16b52b2a2e00ca31f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_integer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga93df7f38a0b30c68c6138780d55885fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_integer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac4750ab546ab72009c9c73407016f0f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_floating_point</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae74155e0cf085141e1923124718915a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_floating_point</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa4cc5ffaa2d70d40b668c54f1e8ec303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_floating_point</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga66729838c230dc7bb06574460d0d8c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_standard_arithmetic</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga31dc0c880276019ff4dc15c27db38541</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_extended_arithmetic</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga92c7057e770b054e9d54bb28d60badea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_arithmetic</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga62cd2e27697815af581b5a8584fd1f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_arithmetic</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga4cdccad554e7b4964b66449794c488ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_arithmetic</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3e1129e045b70c2af6a5d50b1017662c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga79cf1d440a2967847a6d0a08dc22fa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga586bfe745dfc478bb12c62911c5ec7d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gadf6a0fd43aef7bad2aa5b1061ca76909</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa1afdcda38765572b01f8112bea59913</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga33f32f81af61846324b24c96d22fb855</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gadca3d0c318c62cf67f0e711cddc3ed92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaaba32cd64b5832535e6cb2279f1f7881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaac432f658a461422891106bb6f8d0125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga604b58afd51f22c514b3642e06984660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_cvref</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga21f392701d987b745866ab36fa3c6242</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_cvref</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2142c726fa120091603f69a4f88800b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_cvref</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf373c7ded4ff3f304e087d9311e012f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>inherits_from</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gad99449272de65874d3b7569d9eb9e805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>inherits_from_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga49aa08768876bf7322df7d9b27eac4bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>inherits_from_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gafb8004fa9a10a8e6d4ae98a8d8a797b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_code_unit</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga0e1dddeef206a9a47a8223994c219cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_character</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga277e445299ef15f744e94bd68733bae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>pointer_rank</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae9cd96c20c0f16e1e1eac99e798724ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_unbounded_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gab42aeb290d61ad20287ed2e8df10462b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_unbounded_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa1efb75d54e410227ee2cd1448d72d41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_unbounded_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf8727f2300cefe6944088ab53b9c9d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_bounded_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gad0b97e37de851bc5aba414d527a4d0e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_bounded_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga41e64183a2500e39947132b435ff13d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_bounded_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2b5c53a174d76fc6d6dde73a999753ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7a9d2c42a55dd3a859e8cd1381dfc845</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae48b7c7d5e58e9c43b47386ec34c2a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3e77e037d2b8f336651ae4f06fead98d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_function</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2f5be1b8af1251a81691fd7e4a8c10f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_function</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2311e393d4395c4c60f8be62463ff71f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_function</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga1838cd67d955014bc3dcccf62729e28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_function_pointer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae1cae85c90f959c943683d0e6b8d03c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_function_pointer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac4b8cf2371d6981ef042c2d0b0b57f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_function_pointer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga97a71f40f5199e22ff6226054bf5a65e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>is_detected</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gab4f017e4e9376c59602a97b3e725389c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_indirection_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7ce806883528834c0b156cf9d150f8b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_arrow_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gafc3c409c2d08bc8913db5ad46a84e0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_subscript_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga99d503cf409b10ba5314452688d7abb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_unary_plus_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf2a9f6988557f79f960a87dccb414b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_unary_minus_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gadfa546414eebe20b450f7a7d520b4767</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_addition_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gadffe33b336020e6d4f41fba1c9788949</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_subtraction_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6889472d0f71b499636c488a48aafe27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_division_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaee2f7df90bf1a9447e0ff9059e6d9176</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_multiplication_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6f9cee395159fa1cc0c85d04b5ec9414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_modulo_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga5445f5de353c58b7e304e585b5eae84a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_bitwise_not_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga055c356204326409b8097248b5aa6b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_bitwise_and_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga688617eff8007838d3c3a6d82acc5e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_bitwise_or_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga57978bd3bd40c129640f6bf5783d3f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_bitwise_xor_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf844292ffc3d2468386295a3a7a8e984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_bitwise_lsh_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga716a51fac5f796fef6d7b20361a48c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_bitwise_rsh_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae40a247ecf2dbd511377594e234d0b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_logical_not_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac41ddee5c5cc860a08f13ed17e9bc618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_logical_and_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga127032392bbc1f2ce60436c441eafa21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_logical_or_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga56ac47fcf7be4d333864350e64528b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_equality_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6c84e8498fc694ca19c225524e2b89d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_inequality_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac7b4aeab35fd101dabb265d96ac907cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_less_than_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga8174e2a93bd7baef51f9c4ffd3d7206d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_less_than_or_equal_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2bcea1936abb6634724460d9b60b1523</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_greater_than_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2a09893087420eca324aa878466b1323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_greater_than_or_equal_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf0114bddef2099828f5c428dafb0da3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_pre_increment_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga496c606e118a2028c01fdeeeb71b2824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_pre_decrement_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac9731899288a2ce397762c9a01afff43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_post_increment_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga4c9c2d5fed48172635e3c6ead74b239a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_post_decrement_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gafd5fd93a0ed2590bdfb6c2f69bf1a5c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_data_member_function</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf10843e1090d5460710e8a864f8313a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_size_member_function</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7dec2ef3cbf5f6ec0adaba4b0bc59887</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_iterable</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga14a164d38285296acaa8c6679e1b6916</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_tuple_like</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga07b1449019c885977279ee3afedb3b4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>tuple_size</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gabe21403c5219a3959df510427b829038</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>decays_to_pointer_by_unary_plus</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae6f71ec83408ff4ff782c62ba96af352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>decays_to_function_pointer_by_unary_plus</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7d0fb753d984f767d9530f4c88e4d0d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr epsilon_type&lt; T... &gt;</type>
      <name>default_epsilon</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga1d7ffe385c4b8f4558d170f50f5eb79a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_stateless_lambda</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gab1f90e8e3f87fa3fc27fb0ae93571912</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>oriented_bounding_box.h</name>
    <path>/root/project/include/muu/</path>
    <filename>oriented__bounding__box_8h.html</filename>
    <includes id="sat__tester_8h" name="sat_tester.h" local="yes" imported="no">sat_tester.h</includes>
    <class kind="struct">muu::oriented_bounding_box</class>
    <class kind="struct">std::tuple_size&lt; muu::oriented_bounding_box&lt; Scalar &gt; &gt;</class>
    <class kind="struct">std::tuple_element&lt; I, muu::oriented_bounding_box&lt; Scalar &gt; &gt;</class>
    <namespace>muu</namespace>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gade7f3e7d056853c9e542ec453394a9c4</anchor>
      <arglist>(const oriented_bounding_box&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga44033f904b7ed733949dab5e6acccd16</anchor>
      <arglist>(const oriented_bounding_box&lt; S &gt; &amp;q1, const oriented_bounding_box&lt; T &gt; &amp;q2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga4c274a76495695493647b4e0b7af1299</anchor>
      <arglist>(const oriented_bounding_box&lt; S &gt; &amp;q, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>packed_unit_vector.h</name>
    <path>/root/project/include/muu/</path>
    <filename>packed__unit__vector_8h.html</filename>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">vector.h</includes>
    <class kind="struct">muu::packed_unit_vector</class>
    <class kind="struct">muu::constants&lt; packed_unit_vector&lt; Integer, Dimensions &gt; &gt;</class>
    <namespace>muu</namespace>
  </compound>
  <compound kind="file">
    <name>plane.h</name>
    <path>/root/project/include/muu/</path>
    <filename>plane_8h.html</filename>
    <class kind="struct">muu::plane</class>
    <class kind="struct">std::tuple_size&lt; muu::plane&lt; Scalar &gt; &gt;</class>
    <class kind="struct">std::tuple_element&lt; I, muu::plane&lt; Scalar &gt; &gt;</class>
    <class kind="struct">muu::constants&lt; plane&lt; Scalar &gt; &gt;</class>
    <namespace>muu</namespace>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gaa55cd1d8c3534c8ffc01aea226c26997</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gae2d90458dab99f2b1ff2283177ba5835</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p1, const plane&lt; T &gt; &amp;p2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gaffffd5920be4c9358ad1e0e0e57a7e15</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>normalized</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a3d29ca53ac092c2e6f66617be57f61b2</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>preprocessor.h</name>
    <path>/root/project/include/muu/</path>
    <filename>preprocessor_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>MUU_CPP</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gadb6fae17fb19af86f59b0ec414838070</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_CPP</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gadb6fae17fb19af86f59b0ec414838070</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_INTELLISENSE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga0f1d961fa4c5109d8e007ddbaf868339</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DOXYGEN</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gadb3f97223102fea76730cc3b1c36afdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_CLANG</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga060dd82f84c0c24bf0be1462d79cbaef</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ICC</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga909a6807c9b69a3b6e146a709c2a248d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_MSVC</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gacf33ca59cc4d469b40b34ea471a0f57d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_GCC</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga4e615ca6ddf99207d0d46055db0a9aaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ARCH_ITANIUM</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga1741334d0b0155633d2c2cb965b4e363</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ARCH_AMD64</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga032b28f73dc7b93f02c43a8ea6242731</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ARCH_X86</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga026661cf5e2ffbb7699f14b57a36bc45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ARCH_ARM32</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga7f49df29b5350349e0f51b96a9d33044</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ARCH_ARM64</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gab192624d5c5336adc054f386dc362f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ARCH_ARM</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gae07f9cdd5a8d78f5a0672a865fd7cc43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ARCH_X64</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga1cdbe016e691eafdbf69dc6562d821e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ARCH_BITNESS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga2e302f23e8da851a0443167d733facc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_WINDOWS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga9dee2f6a74a083b6305a29cfea6e2e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_UNIX</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gada1974043df8aaa452400fe53a603219</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_LINUX</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga1e4e923ae71486fc6d9ac2bb0448231f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ISET_MMX</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga2fc13d6c4e3a69cdf17fcf5de608a044</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ISET_SSE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gaa4a59fbce03e3c9e9e92ea5a66555184</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ISET_SSE2</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga27c4756abe6f79ba5ced502f1a3b6f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ISET_AVX</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gadee8a66ce0dce28aa817259e818945aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ISET_AVX2</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga8db86eff6d9c4b072696d2daace5e533</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ISET_AVX512</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gad1d2fd63c35410fc1c23cad4d61a5c95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_LITTLE_ENDIAN</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga94d4f95aab666decfb7e1aac26d82f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_BIG_ENDIAN</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga4e94491264f3712dd7dc6dbde6331a0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_INCLUDE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gaa46769772ecacae384f202d2288b5ef9</anchor>
      <arglist>(header)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_BUILTIN</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga555a63af817046f3efcdf5e5df32924b</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_FEATURE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga9dcf675f3fa6b815e3c4af75caaea104</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_ATTR</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gaa6d403786a6e43ae12a7e6d2fabaf7bc</anchor>
      <arglist>(attr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_CPP_ATTR</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga26ba299c991ccd164204b481e80556d1</anchor>
      <arglist>(attr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_EXCEPTIONS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga9ec0bf0abed9f6d63e8ff1d061fd7fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_RTTI</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga3a719188641393747cd874964992274e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_FP16</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gab2a752151f65377391481d1597297eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_FLOAT16</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga27290363c4626a953e97d39dd042af66</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_FLOAT128</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gad6cf2ebac5d966916c61f46e79f035b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_INT128</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga61a9c9471317fa76fa46bd87d8f671b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_CHAR8</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga3c123483a9bd8a9d00279f0b65eace83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_CONSTEVAL</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gab549eb238362898cf7195c31ab932d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_CONSTEVAL_IF</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga3c936754cdc18a19c8b08fb8f39349ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ATTR</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga47316637bf87fd0d0e4bb179cb603226</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ATTR_NDEBUG</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga202256eba435dbe97112a1e3751d31ad</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DECLSPEC</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga011cf3340b4f4928a24e3b83c2360f34</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_UNREACHABLE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga5180303025bb345be8bf831f1e84abed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ASSUME</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gabed9674c744db2fe13aa5a486b072d02</anchor>
      <arglist>(cond)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_MALLOC</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga5e16d39be451564f4e4938ebf5b799ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_CONSTEVAL</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gad89d19ea9cfdd7ec957df9cb6189f552</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ALWAYS_INLINE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga364a90dd5bcbbbc7b58bbaae2b0ed904</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_NEVER_INLINE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga00e7d0da1019e1fc64eff53311eab35e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ABSTRACT_INTERFACE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gafab84de7e09a93180841a788f0123c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_EMPTY_BASES</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga877f0e4eacd4875af9244d38c6547277</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_TRIVIAL_ABI</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gaff60752ea9802d5cb7f09835672bd801</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_LIKELY</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga96965362141a0033ee6aae1a68d8b30f</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_UNLIKELY</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga69620e1889e6b7ff936d34210ecf9bf5</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_NO_UNIQUE_ADDRESS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga8f304d74e983202dd94830798b27d10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_NODISCARD</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga067801d06d0ecba0f17634fa6295706e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_NODISCARD_CTOR</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga2b6bac0477246591441528bf0bafeb39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_CONCAT</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga7192f09d19d5065e6442e0053129bed1</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_MAKE_STRING</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga2fb0fd64a97ececb26a198c1072d223c</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_MAKE_RAW_STRING</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gadd45b899bf7c8cc6e64f6d7c02b1c4f3</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_MAKE_STRING_VIEW</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gabf47b45b883c9646ed6f8ed0b73f8aaa</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ATTR_CLANG</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga7dd651503a9dc759413a92f29e1bae08</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ATTR_CLANG_GE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga0264a9a1dc2f996bc538ba65663b7af5</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ATTR_CLANG_LT</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga5869f898016ec0f2b43ca8d1af1030d5</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_CLANG</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga52152c34f89ec0ce1caeacd62c62c23d</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_CLANG_GE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga9efe0dba4352e6c960b1264e5cf6ee4a</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_CLANG_LT</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga2298483b6b3af755fe55fd9b060a2e02</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ATTR_GCC</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga36d8876b444701ec96c34f20026acd7a</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ATTR_GCC_GE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga6cac3ad3454e124f018ea5e75414ed54</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ATTR_GCC_LT</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gae024ebb7b36a46b6391c9d236611b312</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_GCC</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga6f80b008b889d869c7447aff2475dd4d</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_GCC_GE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga4fcef268a71e24cde6f5470a2a3efdcc</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_GCC_LT</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gacef122f71333910cb2d2462877a34bfb</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_MSVC</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gac6b8e4b75a00c89a3f1479feb81be8e8</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_MSVC_GE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga2f45e603c1abf6f077f07989f779652d</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_MSVC_LT</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga20845a67d49397e645bd03ea0ab455ca</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_ICC</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga5712bc0e086c593c40c8c4ed32caa46b</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DELETE_MOVE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga7e2f4118dd8fcd04ed314cc433b8f1af</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DELETE_COPY</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga25a02df45c3dbd56ef86ba14b3e89ce3</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DEFAULT_MOVE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gae0f485363e80f9b712ba588c38a6913c</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DEFAULT_COPY</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga934ea8bd0642688273d3e5fb6f262bae</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_UNUSED</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga60d6410ec59d9127e60193e48d911c19</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_NOOP</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga208185e62d9dd3604e348e153ffc976b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_VECTORCALL</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga4eea4cd448c2f1324dc6fcfac8587688</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_MAKE_FLAGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gae04a44728acc9352d70e8a7bf067eae3</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PUSH_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga0b9c2e2b602c21d5f58ddaeb74923019</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_POP_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga70d1ba7b4018ae5521eed5b23e98d41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DISABLE_SWITCH_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gac70b9a17a5df0f9790896ac3bdd66269</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DISABLE_LIFETIME_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga94a89890f03584dd7d3fda2bb9d80013</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DISABLE_SPAM_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gaf39b595a94654ba4666ffbbd25735c59</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DISABLE_ARITHMETIC_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga02a7d4cbc36ab3a02d1c9e153af196be</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DISABLE_SHADOW_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gabf94a669fabe4f2614f7f1f6876e7c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DISABLE_SUGGEST_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga305e4c6d20217201e79a601d7ec46572</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DISABLE_CODE_ANALYSIS_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga62008d0276e83e6fc683d9084c6e9af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DISABLE_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga0367e17e69206f2f4718f421c4f4f5bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ENABLE_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga7328d95e2ec9777bbbd7e81c7b4ffa68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>quaternion.h</name>
    <path>/root/project/include/muu/</path>
    <filename>quaternion_8h.html</filename>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">vector.h</includes>
    <includes id="axis__angle_8h" name="axis_angle.h" local="yes" imported="no">axis_angle.h</includes>
    <includes id="euler__angles_8h" name="euler_angles.h" local="yes" imported="no">euler_angles.h</includes>
    <class kind="struct">muu::quaternion</class>
    <class kind="struct">std::tuple_size&lt; muu::quaternion&lt; Scalar &gt; &gt;</class>
    <class kind="struct">std::tuple_element&lt; I, muu::quaternion&lt; Scalar &gt; &gt;</class>
    <class kind="struct">muu::constants&lt; quaternion&lt; Scalar &gt; &gt;</class>
    <namespace>muu</namespace>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gaffcaea7f39fc17894285d8221923387e</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga6b8d6921c4f39c5881a7ea6f95f33392</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q1, const quaternion&lt; T &gt; &amp;q2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga04dec66856dc79915e9130ef3693e9f2</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>normalized</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>aa0566104402180d9b3945e6bae7f3615</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr S</type>
      <name>dot</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>ae3e92df79fe85ed96266ca70d660de8d</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q1, const quaternion&lt; S &gt; &amp;q2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr quaternion&lt; S &gt;</type>
      <name>normalize</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>aa80b85fea6664e3d955f129f9eff4a41</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr quaternion&lt; S &gt;</type>
      <name>slerp</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a8df75ca3a9d767d9132a8bf68c922ea7</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;start, const quaternion&lt; S &gt; &amp;finish, S alpha) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sat_tester.h</name>
    <path>/root/project/include/muu/</path>
    <filename>sat__tester_8h.html</filename>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">vector.h</includes>
    <class kind="struct">muu::sat_tester</class>
    <namespace>muu</namespace>
  </compound>
  <compound kind="file">
    <name>scope_guard.h</name>
    <path>/root/project/include/muu/</path>
    <filename>scope__guard_8h.html</filename>
    <includes id="compressed__pair_8h" name="compressed_pair.h" local="yes" imported="no">compressed_pair.h</includes>
    <class kind="class">muu::scope_guard</class>
    <class kind="class">muu::scope_fail</class>
    <class kind="class">muu::scope_success</class>
    <namespace>muu</namespace>
  </compound>
  <compound kind="file">
    <name>span.h</name>
    <path>/root/project/include/muu/</path>
    <filename>span_8h.html</filename>
    <includes id="compressed__pair_8h" name="compressed_pair.h" local="yes" imported="no">compressed_pair.h</includes>
    <includes id="iterators_8h" name="iterators.h" local="yes" imported="no">iterators.h</includes>
    <class kind="class">muu::span</class>
    <namespace>muu</namespace>
    <member kind="typedef">
      <type>span&lt; const T, Extent &gt;</type>
      <name>const_span</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>ga842ca2a75ebbf9f8c1a2ce90afa8f3bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>span&lt; std::byte &gt;</type>
      <name>byte_span</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>gae6d7d07e5320ddbc969461099bd00db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>span&lt; const std::byte &gt;</type>
      <name>const_byte_span</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>gaefedbd706a97f094756e86befffcf178</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>span&lt; const std::byte, impl::as_bytes_extent&lt; T, N &gt; &gt;</type>
      <name>as_bytes</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>gacaa08dc6422b5847e58a7c4ab9557362</anchor>
      <arglist>(span&lt; T, N &gt; s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>span&lt; std::byte, impl::as_bytes_extent&lt; T, N &gt; &gt;</type>
      <name>as_writable_bytes</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>gab6812fcab12e2e24abb7261d0f895fcb</anchor>
      <arglist>(span&lt; T, N &gt; s) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>dynamic_extent</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>ga3cc0f4ca005186681123b33b6a754a36</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>static_string.h</name>
    <path>/root/project/include/muu/</path>
    <filename>static__string_8h.html</filename>
    <includes id="iterators_8h" name="iterators.h" local="yes" imported="no">iterators.h</includes>
    <includes id="meta_8h" name="meta.h" local="yes" imported="no">meta.h</includes>
    <class kind="class">muu::static_string</class>
    <namespace>muu</namespace>
    <namespace>muu::literals</namespace>
    <namespace>muu::build</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_STATIC_STRING_LITERALS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gad1a4aea6de6cd311e2d75437f7980756</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>consteval auto</type>
      <name>operator&quot;&quot;_ss</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>ac4b1112aae002fe8962e5e624cdde438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>supports_static_string_literals</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>ad135127eb0889116bcc2d4db72f41673</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>string_param.h</name>
    <path>/root/project/include/muu/</path>
    <filename>string__param_8h.html</filename>
    <includes id="meta_8h" name="meta.h" local="yes" imported="no">meta.h</includes>
    <class kind="class">muu::string_param</class>
    <namespace>muu</namespace>
  </compound>
  <compound kind="file">
    <name>strings.h</name>
    <path>/root/project/include/muu/</path>
    <filename>strings_8h.html</filename>
    <includes id="bit_8h" name="bit.h" local="yes" imported="no">bit.h</includes>
    <includes id="chars_8h" name="chars.h" local="yes" imported="no">chars.h</includes>
    <includes id="string__param_8h" name="string_param.h" local="yes" imported="no">string_param.h</includes>
    <includes id="meta_8h" name="meta.h" local="yes" imported="no">meta.h</includes>
    <namespace>muu</namespace>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>trim</name>
      <anchorfile>group__trim.html</anchorfile>
      <anchor>ga591693ed2095787d40f63ae8c0c60b74</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::wstring_view</type>
      <name>trim</name>
      <anchorfile>group__trim.html</anchorfile>
      <anchor>ga71cd0aeed9fed904bbdd3789c81684a3</anchor>
      <arglist>(std::wstring_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u16string_view</type>
      <name>trim</name>
      <anchorfile>group__trim.html</anchorfile>
      <anchor>gac721a6b23447d8c2950803acf99a8f34</anchor>
      <arglist>(std::u16string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u32string_view</type>
      <name>trim</name>
      <anchorfile>group__trim.html</anchorfile>
      <anchor>ga74cfd907d595f68a757aa50640f9d210</anchor>
      <arglist>(std::u32string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u8string_view</type>
      <name>trim</name>
      <anchorfile>group__trim.html</anchorfile>
      <anchor>gabc24677b997440512aefe4e685b0d2a7</anchor>
      <arglist>(std::u8string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>trim_left</name>
      <anchorfile>group__trim__left.html</anchorfile>
      <anchor>ga3aea46929051176b4afb4e23b551ffc5</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::wstring_view</type>
      <name>trim_left</name>
      <anchorfile>group__trim__left.html</anchorfile>
      <anchor>gac23a274a25ef0a4e5b97c0d46b2ccd39</anchor>
      <arglist>(std::wstring_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u16string_view</type>
      <name>trim_left</name>
      <anchorfile>group__trim__left.html</anchorfile>
      <anchor>ga3c0e502baa6f3067e1d26bf5572938f8</anchor>
      <arglist>(std::u16string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u32string_view</type>
      <name>trim_left</name>
      <anchorfile>group__trim__left.html</anchorfile>
      <anchor>gae32d321796864fd5adeaaec227134e53</anchor>
      <arglist>(std::u32string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u8string_view</type>
      <name>trim_left</name>
      <anchorfile>group__trim__left.html</anchorfile>
      <anchor>gad2bab2c91264a3b5241a8d182c922ebd</anchor>
      <arglist>(std::u8string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>trim_right</name>
      <anchorfile>group__trim__right.html</anchorfile>
      <anchor>ga3f499b7f36518026e86dd95624740111</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::wstring_view</type>
      <name>trim_right</name>
      <anchorfile>group__trim__right.html</anchorfile>
      <anchor>ga24e088ccb48af0182c8cc2e433a7cae8</anchor>
      <arglist>(std::wstring_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u16string_view</type>
      <name>trim_right</name>
      <anchorfile>group__trim__right.html</anchorfile>
      <anchor>ga18068afb63f4c781d92f7895872a180c</anchor>
      <arglist>(std::u16string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u32string_view</type>
      <name>trim_right</name>
      <anchorfile>group__trim__right.html</anchorfile>
      <anchor>ga5c65eceb22233e5c09096e48cadeb195</anchor>
      <arglist>(std::u32string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u8string_view</type>
      <name>trim_right</name>
      <anchorfile>group__trim__right.html</anchorfile>
      <anchor>gacd9946ff120c34af5e6634c247a50ba5</anchor>
      <arglist>(std::u8string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; Char &gt;</type>
      <name>transcode</name>
      <anchorfile>group__transcode.html</anchorfile>
      <anchor>ga410a285aafea5eff602d2b95626b7b3d</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; Char &gt;</type>
      <name>transcode</name>
      <anchorfile>group__transcode.html</anchorfile>
      <anchor>ga4b033339ba2cec62aba96a5ec7f3261c</anchor>
      <arglist>(std::wstring_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; Char &gt;</type>
      <name>transcode</name>
      <anchorfile>group__transcode.html</anchorfile>
      <anchor>gaf51112f9bc5c2f25bcdfe34f6b902e7e</anchor>
      <arglist>(std::u16string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; Char &gt;</type>
      <name>transcode</name>
      <anchorfile>group__transcode.html</anchorfile>
      <anchor>ga08c5dabffb22594f3b2589551b5875e4</anchor>
      <arglist>(std::u32string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; Char &gt;</type>
      <name>transcode</name>
      <anchorfile>group__transcode.html</anchorfile>
      <anchor>ga6de085cbec631f5bb8c79c432749185a</anchor>
      <arglist>(std::u8string_view str) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>strong_typedef.h</name>
    <path>/root/project/include/muu/</path>
    <filename>strong__typedef_8h.html</filename>
    <includes id="meta_8h" name="meta.h" local="yes" imported="no">meta.h</includes>
    <class kind="struct">muu::strong_typedef</class>
    <class kind="struct">std::tuple_size&lt; muu::strong_typedef&lt; ValueType, Tag, Traits... &gt; &gt;</class>
    <class kind="struct">std::tuple_element&lt; Index, muu::strong_typedef&lt; ValueType, Tag, Traits... &gt; &gt;</class>
    <class kind="struct">std::hash&lt; muu::strong_typedef&lt; ValueType, Tag, Traits... &gt; &gt;</class>
    <namespace>muu</namespace>
    <namespace>muu::strong_typedef_traits</namespace>
    <member kind="typedef">
      <type>muu::impl::stypedef_pointer_arithmetic&lt; T &gt;</type>
      <name>pointer_arithmetic</name>
      <anchorfile>namespacemuu_1_1strong__typedef__traits.html</anchorfile>
      <anchor>a27ab93e18c0889307ef3195193475bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::impl::stypedef_addable&lt; T &gt;</type>
      <name>addable</name>
      <anchorfile>namespacemuu_1_1strong__typedef__traits.html</anchorfile>
      <anchor>aad28a479b8849a2994bfc78556e902df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::impl::stypedef_subtractable&lt; T &gt;</type>
      <name>subtractable</name>
      <anchorfile>namespacemuu_1_1strong__typedef__traits.html</anchorfile>
      <anchor>a728caf6f550246e511ebc1402b705e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::impl::stypedef_incrementable&lt; T &gt;</type>
      <name>incrementable</name>
      <anchorfile>namespacemuu_1_1strong__typedef__traits.html</anchorfile>
      <anchor>adc83021f06cc113f94143d246e06ab9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::impl::stypedef_decrementable&lt; T &gt;</type>
      <name>decrementable</name>
      <anchorfile>namespacemuu_1_1strong__typedef__traits.html</anchorfile>
      <anchor>a7cd603015fe6e4c83c1beb0bf0edfc55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::impl::stypedef_comparable&lt; T &gt;</type>
      <name>comparable</name>
      <anchorfile>namespacemuu_1_1strong__typedef__traits.html</anchorfile>
      <anchor>a2d1347756ab6dded8a9d5a01ba7aaf89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::impl::stypedef_boolean&lt; T &gt;</type>
      <name>boolean</name>
      <anchorfile>namespacemuu_1_1strong__typedef__traits.html</anchorfile>
      <anchor>a5b5321ca5a3e1dd0face3ffb2f468869</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::impl::stypedef_callable&lt; T &gt;</type>
      <name>callable</name>
      <anchorfile>namespacemuu_1_1strong__typedef__traits.html</anchorfile>
      <anchor>ad655de826e397423b7dfb7360c3816c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tagged_ptr.h</name>
    <path>/root/project/include/muu/</path>
    <filename>tagged__ptr_8h.html</filename>
    <includes id="core_8h" name="core.h" local="yes" imported="no">core.h</includes>
    <includes id="bit_8h" name="bit.h" local="yes" imported="no">bit.h</includes>
    <class kind="class">muu::tagged_ptr</class>
    <class kind="struct">std::pointer_traits&lt; muu::tagged_ptr&lt; T, MinAlign &gt; &gt;</class>
    <namespace>muu</namespace>
  </compound>
  <compound kind="file">
    <name>thread_pool.h</name>
    <path>/root/project/include/muu/</path>
    <filename>thread__pool_8h.html</filename>
    <includes id="core_8h" name="core.h" local="yes" imported="no">core.h</includes>
    <includes id="generic__allocator_8h" name="generic_allocator.h" local="yes" imported="no">generic_allocator.h</includes>
    <includes id="string__param_8h" name="string_param.h" local="yes" imported="no">string_param.h</includes>
    <includes id="iterators_8h" name="iterators.h" local="yes" imported="no">iterators.h</includes>
    <class kind="class">muu::thread_pool</class>
    <namespace>muu</namespace>
  </compound>
  <compound kind="file">
    <name>triangle.h</name>
    <path>/root/project/include/muu/</path>
    <filename>triangle_8h.html</filename>
    <class kind="struct">muu::triangle</class>
    <class kind="struct">std::tuple_size&lt; muu::triangle&lt; Scalar &gt; &gt;</class>
    <class kind="struct">std::tuple_element&lt; P, muu::triangle&lt; Scalar &gt; &gt;</class>
    <class kind="struct">muu::constants&lt; triangle&lt; Scalar &gt; &gt;</class>
    <namespace>muu</namespace>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga73ae74e7ab9484fb2ee90a67e91c1b08</anchor>
      <arglist>(const triangle&lt; S &gt; &amp;tri) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga2881bac8c2bf5248013bbc7d94867005</anchor>
      <arglist>(const triangle&lt; S &gt; &amp;tri1, const triangle&lt; T &gt; &amp;tri2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga634f1c2a41e507ca065b3783a0401c3c</anchor>
      <arglist>(const triangle&lt; S &gt; &amp;tri, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>type_list.h</name>
    <path>/root/project/include/muu/</path>
    <filename>type__list_8h.html</filename>
    <includes id="fwd_8h" name="fwd.h" local="yes" imported="no">fwd.h</includes>
    <class kind="struct">muu::type_list</class>
    <namespace>muu</namespace>
    <member kind="typedef">
      <type>type_list&lt; T &gt;</type>
      <name>type_tag</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga90483ba1ebb9236ec76a1e5c3a0d9bdb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>type_name.h</name>
    <path>/root/project/include/muu/</path>
    <filename>type__name_8h.html</filename>
    <includes id="static__string_8h" name="static_string.h" local="yes" imported="no">static_string.h</includes>
    <includes id="type__list_8h" name="type_list.h" local="yes" imported="no">type_list.h</includes>
    <namespace>muu</namespace>
    <namespace>muu::build</namespace>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>type_name</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf8f9ff89791f3aa70312cef66f4894f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>type_name_list</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7a9b12967ad4e5e7da9cd73de5cc56d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>supports_type_name</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>ad4ed37ffabb38340c21bc4b899db2646</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uuid.h</name>
    <path>/root/project/include/muu/</path>
    <filename>uuid_8h.html</filename>
    <includes id="hashing_8h" name="hashing.h" local="yes" imported="no">hashing.h</includes>
    <class kind="struct">muu::uuid</class>
    <class kind="struct">muu::constants&lt; uuid &gt;</class>
    <class kind="struct">std::hash&lt; muu::uuid &gt;</class>
    <namespace>muu</namespace>
    <namespace>muu::literals</namespace>
    <member kind="enumeration">
      <type></type>
      <name>uuid_variant</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a0af5ea664875aa7ce96e0105152bc59c</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemuu.html" anchor="a0af5ea664875aa7ce96e0105152bc59ca334c4a4c42fdb79d7ebc3e73b517e6f8">none</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="a0af5ea664875aa7ce96e0105152bc59cac00f0c4675b91fb8b918e4079a0b1bac">standard</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="a0af5ea664875aa7ce96e0105152bc59cae966b89dbea9cb554e901f2978c329b6">reserved_ncs</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="a0af5ea664875aa7ce96e0105152bc59cac7cee24c14e39b1f43ae8fbbe515c8d9">reserved_microsoft</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="a0af5ea664875aa7ce96e0105152bc59cac28fc2abb01622a9e2696124c3693086">reserved_future</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>uuid_version</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>ab0531af99b7f9b575c98ea05d8b76bc8</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemuu.html" anchor="ab0531af99b7f9b575c98ea05d8b76bc8a334c4a4c42fdb79d7ebc3e73b517e6f8">none</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="ab0531af99b7f9b575c98ea05d8b76bc8a07cc694b9b3fc636710fa08b6922c42b">time</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="ab0531af99b7f9b575c98ea05d8b76bc8a3a5aed6b06fcfed497ba6585ae456878">dce</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="ab0531af99b7f9b575c98ea05d8b76bc8a4723a0fd093feaf03788fea4e81de56a">name_md5</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="ab0531af99b7f9b575c98ea05d8b76bc8a7ddf32e17a6ac5ce04a8ecbf782ca509">random</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="ab0531af99b7f9b575c98ea05d8b76bc8a79998e27ea91ebec2647c8cb2c145285">name_sha1</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="ab0531af99b7f9b575c98ea05d8b76bc8aad921d60486366258809553a3db49a4a">unknown</enumvalue>
    </member>
    <member kind="function">
      <type>consteval uuid</type>
      <name>operator&quot;&quot;_uuid</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>a03372c885efd4ad9b5dafb757ed61f8f</anchor>
      <arglist>(const char *str, size_t len) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vector.h</name>
    <path>/root/project/include/muu/</path>
    <filename>vector_8h.html</filename>
    <class kind="struct">muu::vector</class>
    <class kind="struct">std::tuple_size&lt; muu::vector&lt; Scalar, Dimensions &gt; &gt;</class>
    <class kind="struct">std::tuple_element&lt; I, muu::vector&lt; Scalar, Dimensions &gt; &gt;</class>
    <class kind="struct">muu::constants&lt; vector&lt; Scalar, Dimensions &gt; &gt;</class>
    <namespace>muu</namespace>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga302affada638f7a69a77c925b1f38d93</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga5d86e15710b89e3c79399cd98f597efe</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v1, const vector&lt; T, D &gt; &amp;v2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gaa7e15ecff78c10af4eaa5b463eee9ca6</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>normalized</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a528d334a55d0d8e0349b3b746bfd8f58</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>length_squared</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>af307f925c296e9d48af1ac07f8397976</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>length</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a3a4a6f056f9ccb03312234014d928c82</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval delta_scalar_type</type>
      <name>consteval_length</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a4468463759178ee381f007205619c7f9</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>distance_squared</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>aa4daf32f61f3d16a4951ed22f1a17b27</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;p1, const vector&lt; S, D &gt; &amp;p2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>distance</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a2544755914a8b5e912e5c363b5696b1e</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;p1, const vector&lt; S, D &gt; &amp;p2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval delta_scalar_type</type>
      <name>consteval_distance</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a59590b8f7b7b8d67db414c1c719ebde9</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;p1, const vector&lt; S, D &gt; &amp;p2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr product_scalar_type</type>
      <name>dot</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a458166cf1b29e986402f7b3130ecbbed</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v1, const vector&lt; S, D &gt; &amp;v2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr product_type</type>
      <name>cross</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a69747a8040656c2d281a3078feed3f04</anchor>
      <arglist>(const vector&lt; S, 3 &gt; &amp;lhs, const vector&lt; S, 3 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>normalize</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>ac7f7d7901bd21fcfa2848c992e75dab6</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v, delta_scalar_type &amp;length_out) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>normalize</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a0901b5c81729a1e28b3dab7c0cf1bba3</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval vector&lt; S, D &gt;</type>
      <name>consteval_normalize</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>ac738833e62a49a9e0a4b977809d534ad</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_type</type>
      <name>direction</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a301d7c955199fcc78010b6b55d2797b5</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;from, const vector&lt; S, D &gt; &amp;to, delta_scalar_type &amp;distance_out) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_type</type>
      <name>direction</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>ac63b2e49523e6dc701fe704270fa0b39</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;from, const vector&lt; S, D &gt; &amp;to) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>min</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a7a74c1b4efea2acad86192f3fd9039c0</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v1, const vector&lt; S, D &gt; &amp;v2, const T &amp;... vecs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>max</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a6e1d12ec3b75c4b972128a0ca872da58</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v1, const vector&lt; S, D &gt; &amp;v2, const T &amp;... vecs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>clamp</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a13427afa8abc10b68dec66a3e6d30c94</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v, const vector&lt; S, D &gt; &amp;low, const vector&lt; S, D &gt; &amp;high) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>gabcb72a5920c41c8b337d9060ff775b77</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;start, const vector&lt; S, D &gt; &amp;finish, delta_scalar_type alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>angle</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a6ba11c907004b9c139971dce77af94ad</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v1, const vector&lt; S, D &gt; &amp;v2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga3d9f7436810436103ec0af7e77597b04</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gae07fcd5b9220de0b39fa3461c3c529de</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>gaa9989749869046cff6731ead1b56f0df</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>muu::accumulator</name>
    <filename>classmuu_1_1accumulator.html</filename>
    <templarg>typename ValueType</templarg>
    <templarg>typename Impl</templarg>
    <member kind="typedef">
      <type>ValueType</type>
      <name>value_type</name>
      <anchorfile>classmuu_1_1accumulator.html</anchorfile>
      <anchor>abee6107aad0b0a1ef9a4c44c0c1eb6a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Impl::value_param</type>
      <name>value_param</name>
      <anchorfile>classmuu_1_1accumulator.html</anchorfile>
      <anchor>a1b74f2ce62a6c44a7060027aa265325d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>accumulator</name>
      <anchorfile>classmuu_1_1accumulator.html</anchorfile>
      <anchor>a78316ec2c16bf2de3bdb85e1ec35de74</anchor>
      <arglist>() noexcept(std::is_nothrow_default_constructible_v&lt; Impl &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>accumulator</name>
      <anchorfile>classmuu_1_1accumulator.html</anchorfile>
      <anchor>aeeb3d920c265dad53d8d88ddbd284350</anchor>
      <arglist>(const value_type &amp;sample) noexcept(std::is_nothrow_default_constructible_v&lt; Impl &gt; &amp;&amp;noexcept(std::declval&lt; Impl &gt;().add(sample)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>accumulator</name>
      <anchorfile>classmuu_1_1accumulator.html</anchorfile>
      <anchor>a0d4531a8b584875cc0924ffff69a9442</anchor>
      <arglist>(Iter begin, Iter end) noexcept(noexcept(std::declval&lt; accumulator &gt;().add(begin, end)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_t</type>
      <name>sample_count</name>
      <anchorfile>classmuu_1_1accumulator.html</anchorfile>
      <anchor>ab66b086f96e81bca84781af22f4e7909</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classmuu_1_1accumulator.html</anchorfile>
      <anchor>a1e8fa71f76b8d7e523da7602c24e60b9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>min</name>
      <anchorfile>classmuu_1_1accumulator.html</anchorfile>
      <anchor>a9214cb4b9eee5be7593b433f2d0cd9fa</anchor>
      <arglist>() const noexcept(noexcept(std::declval&lt; Impl &gt;().min()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>max</name>
      <anchorfile>classmuu_1_1accumulator.html</anchorfile>
      <anchor>a5d80c960e1bfd4474c814373e8dca409</anchor>
      <arglist>() const noexcept(noexcept(std::declval&lt; Impl &gt;().max()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>sum</name>
      <anchorfile>classmuu_1_1accumulator.html</anchorfile>
      <anchor>a0ca4e902e98e920e3cdb6c68a0fe6334</anchor>
      <arglist>() const noexcept(noexcept(std::declval&lt; Impl &gt;().sum()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr accumulator &amp;</type>
      <name>add</name>
      <anchorfile>classmuu_1_1accumulator.html</anchorfile>
      <anchor>a76173a65ea5ac4d6cb101437ab5515f7</anchor>
      <arglist>(value_param sample) noexcept(noexcept(std::declval&lt; Impl &gt;().start(sample)) &amp;&amp;noexcept(std::declval&lt; Impl &gt;().add(sample)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr accumulator &amp;</type>
      <name>add</name>
      <anchorfile>classmuu_1_1accumulator.html</anchorfile>
      <anchor>ad8a96c207f9a42542d65c3f942e03524</anchor>
      <arglist>(Iter begin, Iter end) noexcept(noexcept(std::declval&lt; accumulator &gt;().add(value_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr accumulator &amp;</type>
      <name>add</name>
      <anchorfile>classmuu_1_1accumulator.html</anchorfile>
      <anchor>a18227bd66be13dd2ddc6d39f6456f157</anchor>
      <arglist>(const accumulator &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr accumulator &amp;</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1accumulator.html</anchorfile>
      <anchor>a985c6ec54defa76d4658b5bb605f23af</anchor>
      <arglist>(value_param sample) noexcept(noexcept(std::declval&lt; accumulator &gt;().add(sample)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr accumulator &amp;</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1accumulator.html</anchorfile>
      <anchor>aca6d99c51d212742fef9959384287e99</anchor>
      <arglist>(const accumulator &amp;other) noexcept(noexcept(std::declval&lt; accumulator &gt;().add(other)))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::axis_angle</name>
    <filename>structmuu_1_1axis__angle.html</filename>
    <templarg>typename Scalar</templarg>
    <member kind="typedef">
      <type>Scalar</type>
      <name>scalar_type</name>
      <anchorfile>structmuu_1_1axis__angle.html</anchorfile>
      <anchor>ae9c45bfa212fbda35af919d6ee4199ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; scalar_type, 3 &gt;</type>
      <name>axis_type</name>
      <anchorfile>structmuu_1_1axis__angle.html</anchorfile>
      <anchor>a48a79f7456c651d2a41f032c8adc5da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>axis_angle</name>
      <anchorfile>structmuu_1_1axis__angle.html</anchorfile>
      <anchor>aa45db55ef584d446311f490bf2c42cd0</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>axis_angle</name>
      <anchorfile>structmuu_1_1axis__angle.html</anchorfile>
      <anchor>ae68423bb717e304bf828f5937bbcb481</anchor>
      <arglist>(const axis_angle &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr axis_angle &amp;</type>
      <name>operator=</name>
      <anchorfile>structmuu_1_1axis__angle.html</anchorfile>
      <anchor>a286caeb01d46efae4abc681a077b2c8c</anchor>
      <arglist>(const axis_angle &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>axis_angle</name>
      <anchorfile>structmuu_1_1axis__angle.html</anchorfile>
      <anchor>a5651c10fea5a9d27075fe75af41b538d</anchor>
      <arglist>(const axis_type &amp;axis, scalar_type angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>axis_angle</name>
      <anchorfile>structmuu_1_1axis__angle.html</anchorfile>
      <anchor>a0c98a17953e4bd5509e73a4ab0a63675</anchor>
      <arglist>(const axis_type &amp;axis) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>axis_angle</name>
      <anchorfile>structmuu_1_1axis__angle.html</anchorfile>
      <anchor>a270d00dbdd352f221c5c9902820bf426</anchor>
      <arglist>(const vector&lt; scalar_type, 4 &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>axis_angle</name>
      <anchorfile>structmuu_1_1axis__angle.html</anchorfile>
      <anchor>ae0709a8da57db9a054a3dbe2d9efc177</anchor>
      <arglist>(const axis_angle&lt; T &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator const axis_type &amp;</name>
      <anchorfile>structmuu_1_1axis__angle.html</anchorfile>
      <anchor>a5967c42c69cb9c818f71a6a99cfaf667</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator vector&lt; scalar_type, 4 &gt;</name>
      <anchorfile>structmuu_1_1axis__angle.html</anchorfile>
      <anchor>a50bbbb9e409868cedc6911b5f184ef3f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>vector_type</type>
      <name>axis</name>
      <anchorfile>structmuu_1_1axis__angle.html</anchorfile>
      <anchor>a767ddf87e5d82f9d384b580f579cc26a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scalar_type</type>
      <name>angle</name>
      <anchorfile>structmuu_1_1axis__angle.html</anchorfile>
      <anchor>aec5c14abacf3400cd1859bee75530802</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structmuu_1_1axis__angle.html</anchorfile>
      <anchor>a77e1aa350ab8edcead53e508e968f1ae</anchor>
      <arglist>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const axis_angle &amp;rot)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>muu::blob</name>
    <filename>classmuu_1_1blob.html</filename>
    <member kind="function">
      <type></type>
      <name>blob</name>
      <anchorfile>classmuu_1_1blob.html</anchorfile>
      <anchor>aff73dd986db121f5b149e0312c13f40a</anchor>
      <arglist>(generic_allocator *allocator=nullptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>blob</name>
      <anchorfile>classmuu_1_1blob.html</anchorfile>
      <anchor>a068199f67ff2268f1cb31e3e5552cad6</anchor>
      <arglist>(size_t size, const void *src=nullptr, size_t align={}, generic_allocator *allocator=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>blob</name>
      <anchorfile>classmuu_1_1blob.html</anchorfile>
      <anchor>a08e7c8ce582ad17b8b1794d63fd4b57b</anchor>
      <arglist>(const blob &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>blob</name>
      <anchorfile>classmuu_1_1blob.html</anchorfile>
      <anchor>a1d1032bd23cedfb554238870bedb6c4b</anchor>
      <arglist>(const blob &amp;other, size_t align, generic_allocator *allocator=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>blob</name>
      <anchorfile>classmuu_1_1blob.html</anchorfile>
      <anchor>a6cb13d57c8e3a15225a7297889dc9b51</anchor>
      <arglist>(blob &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~blob</name>
      <anchorfile>classmuu_1_1blob.html</anchorfile>
      <anchor>ad7ee8a18f02801409fc9b2f1938ec8db</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>blob &amp;</type>
      <name>assign</name>
      <anchorfile>classmuu_1_1blob.html</anchorfile>
      <anchor>acc93e0dec9ba56b2ebe2529279288c87</anchor>
      <arglist>(size_t sz, const void *src, size_t align={}, generic_allocator *allocator=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>blob &amp;</type>
      <name>operator=</name>
      <anchorfile>classmuu_1_1blob.html</anchorfile>
      <anchor>a370e298d196720f5859ba76b6cb3ec21</anchor>
      <arglist>(const blob &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>blob &amp;</type>
      <name>operator=</name>
      <anchorfile>classmuu_1_1blob.html</anchorfile>
      <anchor>abd1d5ad3bd10a4ae846b37d3278578ed</anchor>
      <arglist>(blob &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classmuu_1_1blob.html</anchorfile>
      <anchor>a01b59949a0f872c4480d01e483628859</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>blob &amp;</type>
      <name>resize</name>
      <anchorfile>classmuu_1_1blob.html</anchorfile>
      <anchor>a4fd4c1b1bb857acb18c4ffdbcff88ae8</anchor>
      <arglist>(size_t sz)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>alignment</name>
      <anchorfile>classmuu_1_1blob.html</anchorfile>
      <anchor>a9d04699b8899fad94214de351508186e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::byte *</type>
      <name>data</name>
      <anchorfile>classmuu_1_1blob.html</anchorfile>
      <anchor>a539ddb09a670a92fba8dc6cd350e6c4a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>data</name>
      <anchorfile>classmuu_1_1blob.html</anchorfile>
      <anchor>a808e375d9d86ae33b3bf17d6a11968ab</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmuu_1_1blob.html</anchorfile>
      <anchor>a645e7b9b7f32689f0d364040236572bd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::bounding_box</name>
    <filename>structmuu_1_1bounding__box.html</filename>
    <templarg>typename Scalar</templarg>
    <member kind="typedef">
      <type>Scalar</type>
      <name>scalar_type</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a8bfddb93e7f09edcc207c492694ac254</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; scalar_type, 3 &gt;</type>
      <name>vector_type</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>ac196b04da4951ebbe84dfb42228bd6c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::constants&lt; bounding_box &gt;</type>
      <name>constants</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a58e5599384631505f010ff928b527d20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bounding_box</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>aaebb7ed75f7945247523c936edd6baa8</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>bounding_box</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>ae874e4c9fb72739a97a4135b834c0c87</anchor>
      <arglist>(const bounding_box &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr bounding_box &amp;</type>
      <name>operator=</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a787be16a13d7eedcec46179f61661967</anchor>
      <arglist>(const bounding_box &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>bounding_box</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a42f3a2821f0623c1faae5a1bf114199c</anchor>
      <arglist>(const vector_type &amp;cen, const vector_type &amp;ext) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>bounding_box</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>ac205b6690bd36c7f785151c18dadadd5</anchor>
      <arglist>(const vector_type &amp;cen, scalar_type ext_x, scalar_type ext_y, scalar_type ext_z) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>bounding_box</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a12bdf95cc8dc5c181a00f39a53bb5a8f</anchor>
      <arglist>(const vector_type &amp;cen, scalar_type ext) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>bounding_box</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a57198d0834dd18d3f5c8e1e3e798f4b5</anchor>
      <arglist>(const vector_type &amp;ext) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>bounding_box</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a13e8663db0f13f47b03e4fcdde1ae580</anchor>
      <arglist>(scalar_type cen_x, scalar_type cen_y, scalar_type cen_z, const vector_type &amp;ext) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>bounding_box</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a94d0a63618a0d31497f5543b517ff8df</anchor>
      <arglist>(scalar_type cen_x, scalar_type cen_y, scalar_type cen_z, scalar_type ext_x, scalar_type ext_y, scalar_type ext_z) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>bounding_box</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>aa7147059ba7a97278679b4de8e4e00f9</anchor>
      <arglist>(scalar_type ext) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>bounding_box</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a51cec8b698c36db105de47ccf0c462bc</anchor>
      <arglist>(const bounding_box&lt; S &gt; &amp;bb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>bounding_box</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a2d3c5c431a5314d4e895a3f1c76a222a</anchor>
      <arglist>(const T &amp;blittable) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>bounding_box</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a5e66bbc9c55b12b00f97b8e1e628a47e</anchor>
      <arglist>(const vector_type *begin, const vector_type *end) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>bounding_box</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>ab5f31a2695193e61deca6b6c9cdbb9f2</anchor>
      <arglist>(const vector_type *points, size_t count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>bounding_box</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>afcd45f294e268fc18e76e0060b66a2d2</anchor>
      <arglist>(const vector_type(&amp;points)[N]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>bounding_box</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a11d342ee79ddd94d41fd5739df0d7335</anchor>
      <arglist>(const span&lt; vector_type, N &gt; &amp;vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>bounding_box</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a09c968a4f2373344370a9ddacf40688c</anchor>
      <arglist>(const const_span&lt; vector_type, N &gt; &amp;vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>bounding_box</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a40a2b4c2dc2fc7c39bf2749602fd2ce9</anchor>
      <arglist>(const oriented_bounding_box&lt; scalar_type &gt; &amp;obb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a5a2b2d0be190bc38f6a83154713a30cb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a38f96ca4c0bbffb61a15fc880152bc34</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>width</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a2a63fd23abca17ee46343911e748ed53</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>height</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a8146f7abf2341fa60057945678650560</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>depth</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a52925c1f1a06182e0f20aab02368c403</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>diagonal</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a00f7b4bf59f9b19833df9ece17ecae20</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type &amp;</type>
      <name>shortest_extent</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>adfa498b9b7265cf36b760101924609a7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type &amp;</type>
      <name>longest_extent</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>addfc8fe8e82c0f58670e2e3d40f34bd2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type &amp;</type>
      <name>shortest_extent</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>ad2e668e4c77b7751274cfada052f0a9a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type &amp;</type>
      <name>longest_extent</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a4433b0e635d33a958b9c7c382eecb9c0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>shortest_side</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a79441a48975bc1d2d8f5ef9b9d883a75</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>longest_side</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a45f4005da5180367d557652a922860bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>volume</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a777453ecb4a3b8709a1ad25c5f5b3b52</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>mass</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a3d9d0da074518f83a51a3435aacb6f22</anchor>
      <arglist>(scalar_type density) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>density</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>aa3d8549536d6fec3baf7b2124adaa861</anchor>
      <arglist>(scalar_type mass) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>degenerate</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>af303eb2ad2199e22152ed65f1c6e8887</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bounding_box &amp;</type>
      <name>append</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a8ad4803d77b297e1febf1d2d6eade112</anchor>
      <arglist>(const vector_type &amp;pt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bounding_box &amp;</type>
      <name>append</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a8836cf38bb1730aa35300fdf4c50dc33</anchor>
      <arglist>(const vector_type &amp;pt1, const vector_type &amp;pt2, const T &amp;... pts) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bounding_box &amp;</type>
      <name>append</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>adaf0a0a565cbfadf6031ebc3c08137c3</anchor>
      <arglist>(const bounding_box &amp;bb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bounding_box &amp;</type>
      <name>append</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a74ac77d9285cd7d4bcb74838cd0c4aeb</anchor>
      <arglist>(const line_segment&lt; scalar_type &gt; &amp;seg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bounding_box &amp;</type>
      <name>append</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>af5dbf8d38cd76c7df073e2cf64257aad</anchor>
      <arglist>(const triangle&lt; scalar_type &gt; &amp;tri) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bounding_box</type>
      <name>from_min_max</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a554c4ba76c8cdc56a893ff03db4954fd</anchor>
      <arglist>(const vector_type &amp;min_, const vector_type &amp;max_) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bounding_box</type>
      <name>from_points</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>aada75c0a990df1de266feffd77d12220</anchor>
      <arglist>(const vector_type &amp;pt0, const vector_type &amp;pt1, const T &amp;... pts) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bounding_box</type>
      <name>from_points</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a666740f4ae71bc658b8372d12a3f8f41</anchor>
      <arglist>(const vector_type *begin, const vector_type *end) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bounding_box</type>
      <name>from_points</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a4eb338465a4e0fc6f5a3dc10649b736f</anchor>
      <arglist>(const vector_type(&amp;points)[N]) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bounding_box</type>
      <name>from_obb</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a2094b559aef1b8f3096b2618ad7520ef</anchor>
      <arglist>(const oriented_bounding_box&lt; scalar_type &gt; &amp;obb) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>vector_type</type>
      <name>center</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a4c83404f24da3aa9aa1c1bb79534147f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_type</type>
      <name>extents</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a3c2eb9e9617b2d6f626beaf95ddf2da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>ac6f7eb610bdb56d8a20b7d91bab1b4c8</anchor>
      <arglist>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const bounding_box &amp;bb)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga4bac8a8324b2e1ef33cec0f7a8f718ce</anchor>
      <arglist>(const bounding_box&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga0535df1acd603649ac9f793d96062112</anchor>
      <arglist>(const bounding_box&lt; S &gt; &amp;q1, const bounding_box&lt; T &gt; &amp;q2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga75782bf3bacf4ef690b1811d84c9f7ea</anchor>
      <arglist>(const bounding_box&lt; S &gt; &amp;q, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a5a2b2d0be190bc38f6a83154713a30cb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a38f96ca4c0bbffb61a15fc880152bc34</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>width</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a2a63fd23abca17ee46343911e748ed53</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>height</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a8146f7abf2341fa60057945678650560</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>depth</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a52925c1f1a06182e0f20aab02368c403</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>diagonal</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a00f7b4bf59f9b19833df9ece17ecae20</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type &amp;</type>
      <name>shortest_extent</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>adfa498b9b7265cf36b760101924609a7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type &amp;</type>
      <name>longest_extent</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>addfc8fe8e82c0f58670e2e3d40f34bd2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type &amp;</type>
      <name>shortest_extent</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>ad2e668e4c77b7751274cfada052f0a9a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type &amp;</type>
      <name>longest_extent</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a4433b0e635d33a958b9c7c382eecb9c0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>shortest_side</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a79441a48975bc1d2d8f5ef9b9d883a75</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>longest_side</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a45f4005da5180367d557652a922860bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>volume</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a777453ecb4a3b8709a1ad25c5f5b3b52</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>mass</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a3d9d0da074518f83a51a3435aacb6f22</anchor>
      <arglist>(scalar_type density) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>density</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>aa3d8549536d6fec3baf7b2124adaa861</anchor>
      <arglist>(scalar_type mass) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>degenerate</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>af303eb2ad2199e22152ed65f1c6e8887</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a0cb60231c2310141ff732711894790ab</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a407269fa61e8f0edde097ccb7fa2f118</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>ac035c212c1647ba186fb7aaf72a8b553</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>ac882057d370ad876fcb33e3424b96610</anchor>
      <arglist>(const bounding_box &amp;bb) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>empty</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a2199168765d5aa7fbe9422a95c2f86a7</anchor>
      <arglist>(const bounding_box &amp;bb) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a92b22cd71d3af75776a4203e7c6e1f8d</anchor>
      <arglist>(const bounding_box &amp;bb) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>acbfecef565d1d2899692dccb4c1a8eb0</anchor>
      <arglist>(const bounding_box &amp;lhs, const bounding_box&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>aed7dc7fd597a6824f90000873ad87e28</anchor>
      <arglist>(const bounding_box &amp;lhs, const bounding_box&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a3a624e8d805daa2cd07e7d56a681a8b2</anchor>
      <arglist>(const bounding_box&lt; T &gt; &amp;bb, epsilon_type&lt; scalar_type, T &gt; epsilon=default_epsilon&lt; scalar_type, T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>aeb4a6a0b0ea64d3539a0e91a16bbfdda</anchor>
      <arglist>(scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_empty</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a5d0a02735010b277966b8ba2646f43c5</anchor>
      <arglist>(scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a703fe448a9dae36255a64829f6e538ca</anchor>
      <arglist>(const bounding_box &amp;bb1, const bounding_box&lt; T &gt; &amp;bb2, epsilon_type&lt; scalar_type, T &gt; epsilon=default_epsilon&lt; scalar_type, T &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a05397f37ccebf21ceed170116e458140</anchor>
      <arglist>(const bounding_box &amp;bb, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_empty</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>ad685f7bed0f4cb45b261ad352df1fd50</anchor>
      <arglist>(const bounding_box &amp;bb, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type</type>
      <name>corner</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a85db2be79f61daa90990624f35451936</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type</type>
      <name>corner</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>ad067bbf7faac219c8bc92fbae861641a</anchor>
      <arglist>(box_corner which) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type</type>
      <name>min_corner</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a50ccde767b3ca822579aa4c08e317d21</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type</type>
      <name>max_corner</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>aee167f7f3d43664309d089635e405c3d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector_type</type>
      <name>corner</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a1ac550cf82c2ca0ff2660043719fc42b</anchor>
      <arglist>(const bounding_box &amp;bb) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector_type</type>
      <name>corner</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a9fc552fc02bc0e0631df01b847d1cfbb</anchor>
      <arglist>(const bounding_box &amp;bb, box_corner which) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector_type</type>
      <name>min_corner</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a55b3574ffc5466e8ac924b1ea22aa435</anchor>
      <arglist>(const bounding_box &amp;bb) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector_type</type>
      <name>max_corner</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a025907e7c305c3fe9f26ba9fa1e44820</anchor>
      <arglist>(const bounding_box &amp;bb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bounding_box &amp;</type>
      <name>translate</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>ab91bcae10186e49385d03565acdd53eb</anchor>
      <arglist>(const vector_type &amp;offset) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bounding_box</type>
      <name>translate</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a12ac48d7e775195150e4af3facfb7aab</anchor>
      <arglist>(const bounding_box &amp;bb, const vector_type &amp;offset) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bounding_box &amp;</type>
      <name>scale</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a6398c383f0469873d05a622fea380485</anchor>
      <arglist>(const vector_type &amp;scale_) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bounding_box</type>
      <name>scale</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a14c9253d3c66190db9d2a9465feec95a</anchor>
      <arglist>(const bounding_box &amp;bb, const vector_type &amp;scale_) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bounding_box &amp;</type>
      <name>transform</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a69afca0f99f923e0df1acba8806c7623</anchor>
      <arglist>(const matrix&lt; scalar_type, 4, 4 &gt; &amp;tx) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bounding_box</type>
      <name>transform</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a57bf42343c6cc8a2aea761344d3e11ef</anchor>
      <arglist>(const bounding_box &amp;bb, const matrix&lt; scalar_type, 4, 4 &gt; &amp;tx) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bounding_box &amp;</type>
      <name>append</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a8ad4803d77b297e1febf1d2d6eade112</anchor>
      <arglist>(const vector_type &amp;pt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bounding_box &amp;</type>
      <name>append</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a8836cf38bb1730aa35300fdf4c50dc33</anchor>
      <arglist>(const vector_type &amp;pt1, const vector_type &amp;pt2, const T &amp;... pts) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bounding_box &amp;</type>
      <name>append</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>adaf0a0a565cbfadf6031ebc3c08137c3</anchor>
      <arglist>(const bounding_box &amp;bb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bounding_box &amp;</type>
      <name>append</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a74ac77d9285cd7d4bcb74838cd0c4aeb</anchor>
      <arglist>(const line_segment&lt; scalar_type &gt; &amp;seg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bounding_box &amp;</type>
      <name>append</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>af5dbf8d38cd76c7df073e2cf64257aad</anchor>
      <arglist>(const triangle&lt; scalar_type &gt; &amp;tri) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>contains</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>afd5ecc1f6389e35561f56b1e74677b52</anchor>
      <arglist>(const vector_type &amp;point) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>contains</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a7261a775662b1205754636f6d17bada9</anchor>
      <arglist>(const bounding_box &amp;bb) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>contains</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a0da4d9f89c8e92dd96891a67146f2ab6</anchor>
      <arglist>(const bounding_box &amp;bb, const vector_type &amp;point) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>contains</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a83f57efd52e4ca85711d02e84d0140bd</anchor>
      <arglist>(const bounding_box &amp;outer_bb, const bounding_box &amp;inner_bb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a40ee6c90cefcbbb204030c249d055339</anchor>
      <arglist>(const plane&lt; scalar_type &gt; &amp;p) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>afed6c15c4df6806f09770073ed1bb487</anchor>
      <arglist>(const line_segment&lt; scalar_type &gt; &amp;seg) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>ad32e8d2c31361c262ad9fec27d4a5f12</anchor>
      <arglist>(const triangle&lt; scalar_type &gt; &amp;tri) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a8b6752cb23ed16b834f8bdd0b9e7b2b0</anchor>
      <arglist>(const bounding_box &amp;bb) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a4a4bfa0d7559b33603c318b35991dba2</anchor>
      <arglist>(const oriented_bounding_box&lt; scalar_type &gt; &amp;obb) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a69228a4772245bf42cfe9111b40b33e1</anchor>
      <arglist>(const bounding_box &amp;bb, const plane&lt; scalar_type &gt; &amp;p) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a976a60a5d54834800d1f03ce158f2ac7</anchor>
      <arglist>(const bounding_box &amp;bb, const vector_type &amp;start, const vector_type &amp;end) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a7ce5ba519ae3bed600f07ba1cd2fbb95</anchor>
      <arglist>(const bounding_box &amp;bb, const line_segment&lt; scalar_type &gt; &amp;seg) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a57cd60a2e823d94f28592ed26841b7c6</anchor>
      <arglist>(const bounding_box &amp;bb, const vector_type &amp;p0, const vector_type &amp;p1, const vector_type &amp;p2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a53aaa74149026b6c347d182d232c33d2</anchor>
      <arglist>(const bounding_box &amp;bb, const triangle&lt; scalar_type &gt; &amp;tri) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>ab549b7013e227b7e1a3015b65d75432f</anchor>
      <arglist>(const bounding_box &amp;bb1, const bounding_box &amp;bb2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1bounding__box.html</anchorfile>
      <anchor>a02266858c08d624d7f2051033bc27201</anchor>
      <arglist>(const bounding_box &amp;aabb, const oriented_bounding_box&lt; scalar_type &gt; &amp;obb) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>muu::compressed_pair</name>
    <filename>classmuu_1_1compressed__pair.html</filename>
    <templarg>typename First</templarg>
    <templarg>typename Second</templarg>
    <member kind="typedef">
      <type>First</type>
      <name>first_type</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>ac20772f6307822c393b60b6c98e9bb98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Second</type>
      <name>second_type</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>a259e5a5b5014d98abc17710f243d4383</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>compressed_pair</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>a06a2da748350865702a2ca332321bcf0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>compressed_pair</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>a1bd0bcc4a40ffd66d50bcdc848f25485</anchor>
      <arglist>(const compressed_pair &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>compressed_pair</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>ad03293158338c278264fa2537f50bbe3</anchor>
      <arglist>(compressed_pair &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>compressed_pair &amp;</type>
      <name>operator=</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>a5c42b37bc76350e96315e20dea926af0</anchor>
      <arglist>(const compressed_pair &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>compressed_pair &amp;</type>
      <name>operator=</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>aeb94a3f02419fd85a289c31fb602044e</anchor>
      <arglist>(compressed_pair &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>compressed_pair</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>a8849bbb95ac69e908b73fd9e37139e49</anchor>
      <arglist>(F &amp;&amp;first_init, S &amp;&amp;second_init) noexcept(std::is_nothrow_constructible_v&lt; base, F &amp;&amp;, S &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr first_type &amp;</type>
      <name>first</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>aafaf3bdda1abefa3807ee6a64fc8bae1</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr first_type &amp;&amp;</type>
      <name>first</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>a749aebb68bb95df852de3183d912c971</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const first_type &amp;</type>
      <name>first</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>ac96766ace95b6520bc1d62a9db9eee5e</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const first_type &amp;&amp;</type>
      <name>first</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>a323d719d0a1d32b5aa479f2df22b0e07</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr second_type &amp;</type>
      <name>second</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>a371bf06a9a77e22b94421441a49008c0</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr second_type &amp;&amp;</type>
      <name>second</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>a2250a71d1d2a4483622e1bc1def75258</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const second_type &amp;</type>
      <name>second</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>a96741965b939367111679153f09e3545</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const second_type &amp;&amp;</type>
      <name>second</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>a9a64f2d7471f1316084c78a7436ef7cf</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>a00d992c81b8a127721ac9dc0b42a72c6</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;&amp;</type>
      <name>get</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>af0ac7806aba61ae6edd6e8386ee02ed8</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const auto &amp;</type>
      <name>get</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>a377b30f0282006edb15347aac104fe48</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const auto &amp;&amp;</type>
      <name>get</name>
      <anchorfile>classmuu_1_1compressed__pair.html</anchorfile>
      <anchor>a2f3ba4f37263f185c057fe141d26f895</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::constants</name>
    <filename>structmuu_1_1constants.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; __fp16 &gt;</name>
    <filename>structmuu_1_1constants_3_01____fp16_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; _Float16 &gt;</name>
    <filename>structmuu_1_1constants_3_01___float16_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; char &gt;</name>
    <filename>structmuu_1_1constants_3_01char_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; char16_t &gt;</name>
    <filename>structmuu_1_1constants_3_01char16__t_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; char32_t &gt;</name>
    <filename>structmuu_1_1constants_3_01char32__t_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; char8_t &gt;</name>
    <filename>structmuu_1_1constants_3_01char8__t_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; double &gt;</name>
    <filename>structmuu_1_1constants_3_01double_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; float &gt;</name>
    <filename>structmuu_1_1constants_3_01float_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; float128_t &gt;</name>
    <filename>structmuu_1_1constants_3_01float128__t_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; half &gt;</name>
    <filename>structmuu_1_1constants_3_01half_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; int128_t &gt;</name>
    <filename>structmuu_1_1constants_3_01int128__t_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; line_segment&lt; Scalar &gt; &gt;</name>
    <filename>structmuu_1_1constants_3_01line__segment_3_01_scalar_01_4_01_4.html</filename>
    <templarg>typename Scalar</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr line_segment&lt; Scalar &gt;</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1constants_3_01line__segment_3_01_scalar_01_4_01_4.html</anchorfile>
      <anchor>ac8faa5200206f1155b371d2bd9d08328</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; long double &gt;</name>
    <filename>structmuu_1_1constants_3_01long_01double_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; matrix&lt; Scalar, Rows, Columns &gt; &gt;</name>
    <filename>structmuu_1_1constants_3_01matrix_3_01_scalar_00_01_rows_00_01_columns_01_4_01_4.html</filename>
    <templarg>typename Scalar</templarg>
    <templarg>size_t Rows</templarg>
    <templarg>size_t Columns</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr matrix&lt; Scalar, Rows, Columns &gt;</type>
      <name>identity</name>
      <anchorfile>structmuu_1_1constants_3_01matrix_3_01_scalar_00_01_rows_00_01_columns_01_4_01_4.html</anchorfile>
      <anchor>ab78829fc7af3571956a8f98a04c3dd32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; packed_unit_vector&lt; Integer, Dimensions &gt; &gt;</name>
    <filename>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</filename>
    <templarg>typename Integer</templarg>
    <templarg>size_t Dimensions</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>x_axis</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>a0ba2dc3211663f94b2cb20c04bce014a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>y_axis</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>ab9fdf3cd4a576cdb88b1e5e38b6c4443</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>z_axis</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>aee30cdbf5d70e9adb65091a037459939</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>screen_right</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>afdcda3eeb7339857a5de40ad13bdf4c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>screen_down</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>a49c615cfafe21fae764fa485b9cebaa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>screen_left</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>a43a06aa760b042eef35f78f326410805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>screen_up</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>aa21f246e5aab15d224ceace91f94cecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>backward</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>ab24dfea2bbcc69405b93c4b7fb9c0aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>forward</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>a4bc02f5b03fbccc019a5070a921b3458</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>right</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>a60fbd154a12bb4b99fe61dee1742a80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>up</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>a2748cc669e8518b0d8c0053eb12b6e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>left</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>a1c5a10c05f25983612ba2b37653fd960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>down</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>a2b6336740eb165faab4e5ce46fe5f723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>x_axis</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>a0ba2dc3211663f94b2cb20c04bce014a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>y_axis</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>ab9fdf3cd4a576cdb88b1e5e38b6c4443</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>z_axis</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>aee30cdbf5d70e9adb65091a037459939</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>screen_right</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>afdcda3eeb7339857a5de40ad13bdf4c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>screen_down</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>a49c615cfafe21fae764fa485b9cebaa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>screen_left</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>a43a06aa760b042eef35f78f326410805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>screen_up</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>aa21f246e5aab15d224ceace91f94cecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>backward</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>ab24dfea2bbcc69405b93c4b7fb9c0aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>forward</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>a4bc02f5b03fbccc019a5070a921b3458</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>right</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>a60fbd154a12bb4b99fe61dee1742a80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>up</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>a2748cc669e8518b0d8c0053eb12b6e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>left</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>a1c5a10c05f25983612ba2b37653fd960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr packed_unit_vector&lt; Integer, Dimensions &gt;</type>
      <name>down</name>
      <anchorfile>structmuu_1_1constants_3_01packed__unit__vector_3_01_integer_00_01_dimensions_01_4_01_4.html</anchorfile>
      <anchor>a2b6336740eb165faab4e5ce46fe5f723</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; plane&lt; Scalar &gt; &gt;</name>
    <filename>structmuu_1_1constants_3_01plane_3_01_scalar_01_4_01_4.html</filename>
    <templarg>typename Scalar</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr plane&lt; Scalar &gt;</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1constants_3_01plane_3_01_scalar_01_4_01_4.html</anchorfile>
      <anchor>aecf57f68eb4950ee2c7c0daf06b8bac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr plane&lt; Scalar &gt;</type>
      <name>xy</name>
      <anchorfile>structmuu_1_1constants_3_01plane_3_01_scalar_01_4_01_4.html</anchorfile>
      <anchor>a6fdbb22d3d61df3ce2491f324b3c7e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr plane&lt; Scalar &gt;</type>
      <name>xz</name>
      <anchorfile>structmuu_1_1constants_3_01plane_3_01_scalar_01_4_01_4.html</anchorfile>
      <anchor>a25d0ce9065d6f5817f735ef869dac89e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr plane&lt; Scalar &gt;</type>
      <name>yz</name>
      <anchorfile>structmuu_1_1constants_3_01plane_3_01_scalar_01_4_01_4.html</anchorfile>
      <anchor>a886e4847e43aa8161364d4c564dda09a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; quaternion&lt; Scalar &gt; &gt;</name>
    <filename>structmuu_1_1constants_3_01quaternion_3_01_scalar_01_4_01_4.html</filename>
    <templarg>typename Scalar</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr quaternion&lt; Scalar &gt;</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1constants_3_01quaternion_3_01_scalar_01_4_01_4.html</anchorfile>
      <anchor>af1093778fe6216d9708c4b91d06cc921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr quaternion&lt; Scalar &gt;</type>
      <name>identity</name>
      <anchorfile>structmuu_1_1constants_3_01quaternion_3_01_scalar_01_4_01_4.html</anchorfile>
      <anchor>a38f3aa88479958a32136b6193c3fe327</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; signed char &gt;</name>
    <filename>structmuu_1_1constants_3_01signed_01char_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; signed int &gt;</name>
    <filename>structmuu_1_1constants_3_01signed_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; signed long &gt;</name>
    <filename>structmuu_1_1constants_3_01signed_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; signed long long &gt;</name>
    <filename>structmuu_1_1constants_3_01signed_01long_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; signed short &gt;</name>
    <filename>structmuu_1_1constants_3_01signed_01short_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; triangle&lt; Scalar &gt; &gt;</name>
    <filename>structmuu_1_1constants_3_01triangle_3_01_scalar_01_4_01_4.html</filename>
    <templarg>typename Scalar</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr triangle&lt; Scalar &gt;</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1constants_3_01triangle_3_01_scalar_01_4_01_4.html</anchorfile>
      <anchor>a2692660b32d2c57e79a38d631705b60a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; uint128_t &gt;</name>
    <filename>structmuu_1_1constants_3_01uint128__t_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; unsigned char &gt;</name>
    <filename>structmuu_1_1constants_3_01unsigned_01char_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; unsigned int &gt;</name>
    <filename>structmuu_1_1constants_3_01unsigned_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; unsigned long &gt;</name>
    <filename>structmuu_1_1constants_3_01unsigned_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; unsigned long long &gt;</name>
    <filename>structmuu_1_1constants_3_01unsigned_01long_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; unsigned short &gt;</name>
    <filename>structmuu_1_1constants_3_01unsigned_01short_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; uuid &gt;</name>
    <filename>structmuu_1_1constants_3_01uuid_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr uuid</type>
      <name>nil</name>
      <anchorfile>structmuu_1_1constants_3_01uuid_01_4.html</anchorfile>
      <anchor>a0f6282c5091cf69a54a457cb563f70a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uuid</type>
      <name>namespace_dns</name>
      <anchorfile>structmuu_1_1constants_3_01uuid_01_4.html</anchorfile>
      <anchor>ae061cb663bba68c90d47480f837eb590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uuid</type>
      <name>namespace_url</name>
      <anchorfile>structmuu_1_1constants_3_01uuid_01_4.html</anchorfile>
      <anchor>a107e684533c50f6e49dbcb17d70362bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uuid</type>
      <name>namespace_oid</name>
      <anchorfile>structmuu_1_1constants_3_01uuid_01_4.html</anchorfile>
      <anchor>afbc527d6a39ae4facbd262e81d8224e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uuid</type>
      <name>namespace_x500</name>
      <anchorfile>structmuu_1_1constants_3_01uuid_01_4.html</anchorfile>
      <anchor>a0b26c5eb232b00b35f31fa7a18ffd513</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uuid</type>
      <name>namespace_dns</name>
      <anchorfile>structmuu_1_1constants_3_01uuid_01_4.html</anchorfile>
      <anchor>ae061cb663bba68c90d47480f837eb590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uuid</type>
      <name>namespace_url</name>
      <anchorfile>structmuu_1_1constants_3_01uuid_01_4.html</anchorfile>
      <anchor>a107e684533c50f6e49dbcb17d70362bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uuid</type>
      <name>namespace_oid</name>
      <anchorfile>structmuu_1_1constants_3_01uuid_01_4.html</anchorfile>
      <anchor>afbc527d6a39ae4facbd262e81d8224e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr uuid</type>
      <name>namespace_x500</name>
      <anchorfile>structmuu_1_1constants_3_01uuid_01_4.html</anchorfile>
      <anchor>a0b26c5eb232b00b35f31fa7a18ffd513</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; vector&lt; Scalar, Dimensions &gt; &gt;</name>
    <filename>structmuu_1_1constants_3_01vector_3_01_scalar_00_01_dimensions_01_4_01_4.html</filename>
    <templarg>typename Scalar</templarg>
    <templarg>size_t Dimensions</templarg>
  </compound>
  <compound kind="struct">
    <name>muu::constants&lt; wchar_t &gt;</name>
    <filename>structmuu_1_1constants_3_01wchar__t_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>muu::emplacement_array</name>
    <filename>classmuu_1_1emplacement__array.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>ad26986eca2259c34f131c684f28c4e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>ac144fe3dd510e085cf9278975de6105a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a9ac4fed1fcc40c229cbf68458e63b75b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a5172ce849cf83ddefad23d51b55ae387</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a83c8cd8617f43364a7bbc8df3303defb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a2f5a6b43b86bbe3fcaa305b535d9498f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a5cfcf454072c962e09f8a469d7e52cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointer</type>
      <name>iterator</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>aca6916f99eacaa2a8b591acb4b544422</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_pointer</type>
      <name>const_iterator</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a83640e103d5cf6c615b0e124d266ab1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>emplacement_array</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>ada6dae88c98550ebc959dcaebed5eaf3</anchor>
      <arglist>(size_t capacity=0, generic_allocator *allocator=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>emplacement_array</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>ae53f07a891606b8a59b48dfaa03084d1</anchor>
      <arglist>(emplacement_array &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>emplacement_array &amp;</type>
      <name>operator=</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>adfcf3db4a02b48accf0292dbeb042210</anchor>
      <arglist>(emplacement_array &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~emplacement_array</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>af5bc82bfd00bbb171afc4236ca955e58</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>emplace_back</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>ac3820f7a7a3ae295059551a1e6f0e559</anchor>
      <arglist>(Args &amp;&amp;... args) noexcept(std::is_nothrow_constructible_v&lt; T, Args &amp;&amp;... &gt;)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>emplace_back_with</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a4aef6b62fb26d2e417d170ac28c1ad5f</anchor>
      <arglist>(EmplacementFunc &amp;&amp;func) noexcept(std::is_nothrow_invocable_r_v&lt; T &amp;, EmplacementFunc &amp;&amp;, void * &gt;)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a3c2a46dac0211be5fe7db8bdccc4fb8e</anchor>
      <arglist>(size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a61ac7c179c71892cad8f3c7a210ecbeb</anchor>
      <arglist>(size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a53648a57dc8b2b5464d9c9e92c61a29a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>capacity</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>abfd030159ffc17b8b4c410a84311f0a9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>aa526ef5301cfbe4180465bfa993b0b60</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>front</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a7664debee464b174d3b7df7f1b1ec156</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>front</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a115c6cb3fdb405be8253dbc38a87184d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>back</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>ae6594a03106750ea7d4d01a89831f2f8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>back</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a7e40e336f8add1ec783782c2a991379b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>data</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a1317afcacbfca2fa7810b355faf69259</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>data</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a4806579821cebe5a8230c3fb480faf0d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a9f7e09f01b0523011d102f9beeaea3b5</anchor>
      <arglist>() noexcept(std::is_nothrow_destructible_v&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a6b2d20a544a18541bc7a42cc54cbfb0b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a28b080d7f868c02c62594147017fcc07</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a076ad46543e26a0853c675a255d2b93b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>ad05728216925fad0306831e2ab08a7fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a4ebb159a53415dc51c94e891f574f8e7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a6064f88516ef2a0fb3ef27de85e5e39c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a6a6591f4cea29cb19019094aa0696294</anchor>
      <arglist>(emplacement_array &amp;arr) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a953bce0bafa9c8d4fd738943d70273d4</anchor>
      <arglist>(emplacement_array &amp;arr) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const_iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>aecaa151e2982c1b6f8d1accc18cffa21</anchor>
      <arglist>(const emplacement_array &amp;arr) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const_iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a4d060f68272f32e1e1163e9c4c21c55c</anchor>
      <arglist>(const emplacement_array &amp;arr) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>af6fc1a7e15acdd4a0087ac1c8c1a131f</anchor>
      <arglist>(const emplacement_array &amp;arr) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const_iterator</type>
      <name>cend</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>aa69e8b577ec61d6923d6ee5c68b8ffab</anchor>
      <arglist>(const emplacement_array &amp;arr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a6b2d20a544a18541bc7a42cc54cbfb0b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a28b080d7f868c02c62594147017fcc07</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a076ad46543e26a0853c675a255d2b93b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>ad05728216925fad0306831e2ab08a7fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a4ebb159a53415dc51c94e891f574f8e7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a6064f88516ef2a0fb3ef27de85e5e39c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a6a6591f4cea29cb19019094aa0696294</anchor>
      <arglist>(emplacement_array &amp;arr) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a953bce0bafa9c8d4fd738943d70273d4</anchor>
      <arglist>(emplacement_array &amp;arr) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const_iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>aecaa151e2982c1b6f8d1accc18cffa21</anchor>
      <arglist>(const emplacement_array &amp;arr) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const_iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>a4d060f68272f32e1e1163e9c4c21c55c</anchor>
      <arglist>(const emplacement_array &amp;arr) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>af6fc1a7e15acdd4a0087ac1c8c1a131f</anchor>
      <arglist>(const emplacement_array &amp;arr) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const_iterator</type>
      <name>cend</name>
      <anchorfile>classmuu_1_1emplacement__array.html</anchorfile>
      <anchor>aa69e8b577ec61d6923d6ee5c68b8ffab</anchor>
      <arglist>(const emplacement_array &amp;arr) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::euler_angles</name>
    <filename>structmuu_1_1euler__angles.html</filename>
    <templarg>typename Scalar</templarg>
    <member kind="typedef">
      <type>Scalar</type>
      <name>scalar_type</name>
      <anchorfile>structmuu_1_1euler__angles.html</anchorfile>
      <anchor>aabcd8c1321d511d7ea2188bd3f14710f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>euler_angles</name>
      <anchorfile>structmuu_1_1euler__angles.html</anchorfile>
      <anchor>a4b519d3b1385779c61a2a3dd19776581</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>euler_angles</name>
      <anchorfile>structmuu_1_1euler__angles.html</anchorfile>
      <anchor>af799c3d99932c0a05cf3bbf621acc0b6</anchor>
      <arglist>(const euler_angles &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr euler_angles &amp;</type>
      <name>operator=</name>
      <anchorfile>structmuu_1_1euler__angles.html</anchorfile>
      <anchor>a6356761ebb48f89851054553c211de5d</anchor>
      <arglist>(const euler_angles &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>euler_angles</name>
      <anchorfile>structmuu_1_1euler__angles.html</anchorfile>
      <anchor>ab010790677ab3d340f7447aa5d78004e</anchor>
      <arglist>(scalar_type yaw, scalar_type pitch, scalar_type roll=scalar_type{}) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>euler_angles</name>
      <anchorfile>structmuu_1_1euler__angles.html</anchorfile>
      <anchor>ab79830eae2b4dfe9a750f33edf0c8423</anchor>
      <arglist>(const vector&lt; scalar_type, 3 &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>euler_angles</name>
      <anchorfile>structmuu_1_1euler__angles.html</anchorfile>
      <anchor>a9274f66d83810344e3ea8e0b505ca979</anchor>
      <arglist>(const euler_angles&lt; T &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator vector&lt; scalar_type, 3 &gt;</name>
      <anchorfile>structmuu_1_1euler__angles.html</anchorfile>
      <anchor>ace51a4d845f47fd1efb6134d05b7b9ba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr euler_angles &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmuu_1_1euler__angles.html</anchorfile>
      <anchor>a13a2a7de450ca546071a189f042c301a</anchor>
      <arglist>(scalar_type rhs) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>scalar_type</type>
      <name>yaw</name>
      <anchorfile>structmuu_1_1euler__angles.html</anchorfile>
      <anchor>a243345ebff2f2e055960d3dece4360fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scalar_type</type>
      <name>pitch</name>
      <anchorfile>structmuu_1_1euler__angles.html</anchorfile>
      <anchor>a551cbcad0e1b3c3c8d7ebb4c70828e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scalar_type</type>
      <name>roll</name>
      <anchorfile>structmuu_1_1euler__angles.html</anchorfile>
      <anchor>aa4ee1ae394deea49ef828d5562776ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend euler_angles</type>
      <name>operator*</name>
      <anchorfile>structmuu_1_1euler__angles.html</anchorfile>
      <anchor>a69086f4755e603d6adf8761439081172</anchor>
      <arglist>(const euler_angles &amp;lhs, scalar_type rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend euler_angles</type>
      <name>operator*</name>
      <anchorfile>structmuu_1_1euler__angles.html</anchorfile>
      <anchor>a0e227ca0a71b6f21085b0a81ddd46350</anchor>
      <arglist>(scalar_type lhs, const euler_angles &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structmuu_1_1euler__angles.html</anchorfile>
      <anchor>ab240e81d52e65c68650e931c08b18a3d</anchor>
      <arglist>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const euler_angles &amp;rot)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>muu::fnv1a</name>
    <filename>classmuu_1_1fnv1a.html</filename>
    <templarg>size_t Bits</templarg>
    <member kind="function">
      <type>constexpr</type>
      <name>fnv1a</name>
      <anchorfile>classmuu_1_1fnv1a.html</anchorfile>
      <anchor>a0597e4b9f9b1e00bf999bcce6ed6635e</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr fnv1a &amp;</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1fnv1a.html</anchorfile>
      <anchor>a4bafa31c65e5151ca0e6e3b64fc96736</anchor>
      <arglist>(uint8_t byte) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr fnv1a &amp;</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1fnv1a.html</anchorfile>
      <anchor>a05a1cafb51285ce303ed125fd2452ade</anchor>
      <arglist>(std::byte byte) noexcept</arglist>
    </member>
    <member kind="function">
      <type>fnv1a &amp;</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1fnv1a.html</anchorfile>
      <anchor>a3d1848b2c29a5a1c1eeb7b5f39715e3a</anchor>
      <arglist>(const void *data, size_t size) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr fnv1a &amp;</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1fnv1a.html</anchorfile>
      <anchor>ad46d9f8160c13f902f0c08739ff48f4b</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr fnv1a &amp;</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1fnv1a.html</anchorfile>
      <anchor>ac2390c999deca9d0489e30b3314ea41e</anchor>
      <arglist>(std::wstring_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr fnv1a &amp;</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1fnv1a.html</anchorfile>
      <anchor>a5db31728e14dd4f0f41ecd7f9a24eb5d</anchor>
      <arglist>(std::u32string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr fnv1a &amp;</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1fnv1a.html</anchorfile>
      <anchor>ad6ac7397af4a23e1197bf29288956e04</anchor>
      <arglist>(std::u16string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr fnv1a &amp;</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1fnv1a.html</anchorfile>
      <anchor>a1174392926af3454f7fe0ff847f837df</anchor>
      <arglist>(std::u8string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr hash_type</type>
      <name>value</name>
      <anchorfile>classmuu_1_1fnv1a.html</anchorfile>
      <anchor>a3a890cd7b57aa791eeb40eaeddeb4a57</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmuu_1_1fnv1a.html</anchorfile>
      <anchor>ae78845c4421c7e5809841669a4bdee9f</anchor>
      <arglist>(std::basic_ostream&lt; Char, Traits &gt; &amp;lhs, const fnv1a &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>muu::function_view</name>
    <filename>classmuu_1_1function__view.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>remove_callconv&lt; T &gt;</type>
      <name>func_type</name>
      <anchorfile>classmuu_1_1function__view.html</anchorfile>
      <anchor>a7a122326496608c33601fce9919c8a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>function_view</name>
      <anchorfile>classmuu_1_1function__view.html</anchorfile>
      <anchor>a279a5d2c512ce8d36041574fa91c9381</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>function_view</name>
      <anchorfile>classmuu_1_1function__view.html</anchorfile>
      <anchor>aa502354732030ac3e8207113442903b3</anchor>
      <arglist>(U &amp;&amp;func) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1function__view.html</anchorfile>
      <anchor>a415416f10aa50ea71814e8ae3428678a</anchor>
      <arglist>(Args &amp;&amp;...) const noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classmuu_1_1function__view.html</anchorfile>
      <anchor>a24d91bd0cef16708f98650e8331f1db6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::generic_allocator</name>
    <filename>structmuu_1_1generic__allocator.html</filename>
    <member kind="typedef">
      <type>void *(*)(void *data, size_t size, size_t alignment) noexcept</type>
      <name>allocate_func</name>
      <anchorfile>structmuu_1_1generic__allocator.html</anchorfile>
      <anchor>a52e898cce336e1b58148a2bb33abab45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*)(void *data, void *ptr) noexcept</type>
      <name>deallocate_func</name>
      <anchorfile>structmuu_1_1generic__allocator.html</anchorfile>
      <anchor>a8384b617463c8f114ebb971ddd5e9e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1generic__allocator.html</anchorfile>
      <anchor>a9403892a02b19fb82e6202961c14d94d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>allocate_func</type>
      <name>allocate</name>
      <anchorfile>structmuu_1_1generic__allocator.html</anchorfile>
      <anchor>a333fbdb60203d9088f90e31fc5e4556a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>deallocate_func</type>
      <name>deallocate</name>
      <anchorfile>structmuu_1_1generic__allocator.html</anchorfile>
      <anchor>a7ff57b86bbbfa5fc47cb4cf96a5993f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::half</name>
    <filename>structmuu_1_1half.html</filename>
    <member kind="typedef">
      <type>muu::constants&lt; half &gt;</type>
      <name>constants</name>
      <anchorfile>structmuu_1_1half.html</anchorfile>
      <anchor>a330ce245f239afeaf90588eb8493e824</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr half</type>
      <name>from_bits</name>
      <anchorfile>structmuu_1_1half.html</anchorfile>
      <anchor>ab271e624b44ddcace710ac953457e76b</anchor>
      <arglist>(uint16_t val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval half</type>
      <name>operator&quot;&quot;_f16</name>
      <anchorfile>structmuu_1_1half.html</anchorfile>
      <anchor>a13af047e58351ed0d3446aa9cd617902</anchor>
      <arglist>(long double val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval half</type>
      <name>operator&quot;&quot;_f16</name>
      <anchorfile>structmuu_1_1half.html</anchorfile>
      <anchor>abc373f6b1f9679939e03e9421199241a</anchor>
      <arglist>(unsigned long long val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gafea7a631de7f6399fb55e1dffbe79c00</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga5e3a3b5d552cc29822e1a17fdd1cc3bd</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga87bf7f92a62590f695617cea9bb941fe</anchor>
      <arglist>(half a, half b, half epsilon=constants&lt; half &gt;::default_epsilon) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga5df3be4319d056f5a12b082177b1f8dd</anchor>
      <arglist>(half x, half epsilon=constants&lt; half &gt;::default_epsilon) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>ga33492d2d742e23fb32d6feddeb0a12a5</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gadb3f9b52071aea9fe1cf894a7fb9c039</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga435fcf395534dfec9465ed87a52fc88d</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gae9514bab097b1d4944394221097d5449</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>ga3f48d168cf2a5cc17d95fd4860ce8267</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga02cf6ce14db45d5f2148ffbb9e33438e</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>ga2b2e08e3f3a3e7db4751921441317963</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga8bb8129170a7cc7e9902de607e1c8279</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>gab24a151709d5cbfc7c049d279307ec54</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>gac59b7164798fbb5ae72b13010ac7f960</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga7b0d41cadc47ad6e8255fa170f640be1</anchor>
      <arglist>(half y, half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga7d194c0af560d9e78eab17a4e76d17a5</anchor>
      <arglist>(half start, half finish, half alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gae3196eacbe3561ca0edc39d280f31585</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga7569b01664a740bf2ecc532e22c3b487</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; muu::strong_typedef&lt; ValueType, Tag, Traits... &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01muu_1_1strong__typedef_3_01_value_type_00_01_tag_00_01_traits_8_8_8_01_4_01_4.html</filename>
    <templarg>typename ValueType</templarg>
    <templarg>typename Tag</templarg>
    <templarg>template&lt; typename &gt; typename... Traits</templarg>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; muu::uuid &gt;</name>
    <filename>structstd_1_1hash_3_01muu_1_1uuid_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>muu::hash_combiner</name>
    <filename>classmuu_1_1hash__combiner.html</filename>
    <templarg>size_t Bits</templarg>
  </compound>
  <compound kind="struct">
    <name>muu::integral_range</name>
    <filename>structmuu_1_1integral__range.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>ae3553810ee9fa0085de37996470aace0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>size_type</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a6202bbb59a4af7512f46b163f0c008f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>iterator</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a8c433ba48c87aa7fc19973b46ccb0343</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>integral_range</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>af3b09ae8e529fa98c6543b199de2900c</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>integral_range</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a194c54dda08c3e49af416f3e6c85d136</anchor>
      <arglist>(value_type end_) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>integral_range</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a24035a217a61e3dee3305c4ae30cd534</anchor>
      <arglist>(value_type start_, value_type end_) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a4040679116c8e170b091e35b42c3d599</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a9b77365e2a495808b94c58dde6441088</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a3a1ca272fed885429003851fb4bc0bd8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>first</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a93f49da0031942a121562baba044606d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>last</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>aa1d1e005aaaa9b20684d3853a8ca4c69</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>contains</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>ab943d7f5cc1a0effa8d38f0d161866a0</anchor>
      <arglist>(value_type val) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>contains</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a5140e7231b19d04d02d2f4f25c0891e0</anchor>
      <arglist>(const integral_range &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>adjacent</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>afaf845c7da7202d2d63f2b012eb4ad71</anchor>
      <arglist>(const integral_range &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a50b6f153600c77780c0642cfe87cf153</anchor>
      <arglist>(const integral_range &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>intersects_or_adjacent</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a2d270e3a06b82e230e4823aa836899f8</anchor>
      <arglist>(const integral_range &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr integral_range</type>
      <name>union_with</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>ae03858876a744c6f51b0209c32935ddf</anchor>
      <arglist>(const integral_range &amp;other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a4c7ad1113c95fea9548d5e45a79f5482</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a322cb68187dc067d130e08e9d38c5f83</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>s</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a3e95c9d1fdacaa9ff5e47d7a8c963dbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>e</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>ad0f3f7c01b3b8f704c1290f108c4ea53</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a070868c8d1d333395a12038dea5d6ddf</anchor>
      <arglist>(const integral_range &amp;lhs, const integral_range &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a1c2b9095767755d3033a7a4992e7c5dc</anchor>
      <arglist>(const integral_range &amp;lhs, const integral_range &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a6d7ca9a825f8862720f7146a1e4aa86d</anchor>
      <arglist>(const integral_range &amp;range) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>aa18c7c05848712fa64faac8a2599f297</anchor>
      <arglist>(const integral_range &amp;range) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a4c7ad1113c95fea9548d5e45a79f5482</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a322cb68187dc067d130e08e9d38c5f83</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a070868c8d1d333395a12038dea5d6ddf</anchor>
      <arglist>(const integral_range &amp;lhs, const integral_range &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a1c2b9095767755d3033a7a4992e7c5dc</anchor>
      <arglist>(const integral_range &amp;lhs, const integral_range &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>a6d7ca9a825f8862720f7146a1e4aa86d</anchor>
      <arglist>(const integral_range &amp;range) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1integral__range.html</anchorfile>
      <anchor>aa18c7c05848712fa64faac8a2599f297</anchor>
      <arglist>(const integral_range &amp;range) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::line_segment</name>
    <filename>structmuu_1_1line__segment.html</filename>
    <templarg>typename Scalar</templarg>
    <member kind="typedef">
      <type>Scalar</type>
      <name>scalar_type</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>ac0b55997c99143b722bbc3e4f9ba9f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; scalar_type, 3 &gt;</type>
      <name>vector_type</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a80b86b159e42a6335287f4ff583486b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::constants&lt; line_segment &gt;</type>
      <name>constants</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a26c4417a7cb099c4cfc8d5a8ce6bc163</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector_type *</type>
      <name>iterator</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>adf8ec88e83a94706a0140a810aa83c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const vector_type *</type>
      <name>const_iterator</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a1927992db4fc09eefcd39b567b3a99da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>line_segment</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>aab7c54ac4048f2ede0c620c79234fe88</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>line_segment</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>ac45f0e47103f4d7177bd92a30231311b</anchor>
      <arglist>(const line_segment &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr line_segment &amp;</type>
      <name>operator=</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>af3ac58c9e569ae862b3a792a7b99dc2c</anchor>
      <arglist>(const line_segment &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>line_segment</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>ac6eaf729afc0d6da17069fe01396c9e5</anchor>
      <arglist>(const vector_type &amp;p0, const vector_type &amp;p1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>line_segment</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>af6c95b0cc1d6d4be59499a56b7d852ce</anchor>
      <arglist>(const vector_type(&amp;points)[2]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>line_segment</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>aba6b50d93efbcbf3f8a433e1ca5fcb5d</anchor>
      <arglist>(scalar_type p0_x, scalar_type p0_y, scalar_type p0_z, scalar_type p1_x, scalar_type p1_y, scalar_type p1_z) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>line_segment</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a26521510fcd3bff3a1529e6376cb1f02</anchor>
      <arglist>(const line_segment&lt; S &gt; &amp;seg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>line_segment</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>af2771c5118f6a44c5d4663e65e0cdbdc</anchor>
      <arglist>(const T &amp;blittable) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type &amp;</type>
      <name>get</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a9f23d13abc8711f38c4e1f2846db5fd5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const vector_type &amp;</type>
      <name>get</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a85575bff56bf1a4b50a3a968cf5a1ad8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>aa1cfb69d1487748a905ed55781cddf87</anchor>
      <arglist>(size_t p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const vector_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>aa045504ef62427faa0b1a50263dafdd3</anchor>
      <arglist>(size_t p) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a236113cca24c7d1f4d735dee0f53635b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a22ca62f28b9de1426132251cd2d0aac6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>ad318f02fb1d1961996426099534c6a15</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>aac13a05ddbc6188af378951594906bc6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a16c3541e8b76b22213bac7325fbc10f5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a17e15ac6c3d42a6e4f52c971ffef9e60</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>abab1072bf6117744227b717b3cc85ce0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cend</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a49ae7fbd53bd6ef443521ac0a344c45f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>vector_type</type>
      <name>points</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a2156330bc7c31a1fbbd4984b779c24cf</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>af0dbe18d87aa08d0193466ba384828d8</anchor>
      <arglist>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const line_segment &amp;seg)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>aa8300fa061ba07aa720c23c2b7c930c6</anchor>
      <arglist>(line_segment &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a9b8847db1eab17efc3fc7d65031895b2</anchor>
      <arglist>(line_segment &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a26918eb6e2561a9cdc90a96461ff417c</anchor>
      <arglist>(const line_segment &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>ac82e233c6d3a5e39184f790797bb99a2</anchor>
      <arglist>(const line_segment &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>aa34e1e4fc00d1685fce84ff7191698be</anchor>
      <arglist>(const line_segment &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>cend</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a36dc3de74ba10e5d62a2f52fe39301fc</anchor>
      <arglist>(const line_segment &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gafe018cc9e24195a2edf98017340c2263</anchor>
      <arglist>(const line_segment&lt; S &gt; &amp;seg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga9feb4d4d3c2c67ad383254a73fdeff52</anchor>
      <arglist>(const line_segment&lt; S &gt; &amp;seg1, const line_segment&lt; T &gt; &amp;seg2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gac5e6b9f30f0e565a9893ba7c7fea821b</anchor>
      <arglist>(const line_segment&lt; S &gt; &amp;seg, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type &amp;</type>
      <name>get</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a9f23d13abc8711f38c4e1f2846db5fd5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const vector_type &amp;</type>
      <name>get</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a85575bff56bf1a4b50a3a968cf5a1ad8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>aa1cfb69d1487748a905ed55781cddf87</anchor>
      <arglist>(size_t p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const vector_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>aa045504ef62427faa0b1a50263dafdd3</anchor>
      <arglist>(size_t p) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a236113cca24c7d1f4d735dee0f53635b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a22ca62f28b9de1426132251cd2d0aac6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type</type>
      <name>direction</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a0119355a5234186d377e56d9da7f0065</anchor>
      <arglist>(scalar_type &amp;length_out) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type</type>
      <name>direction</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a8c5e3fb8ef958798b91bb47f0ea1eb1d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type</type>
      <name>midpoint</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a9419eb973d274819f1af82858832553e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>length_squared</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a63db9af5c343e923d51e11df2e97dd4f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>length</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a32c22db30d44b3ad0dd6b7663d754135</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>degenerate</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a2293e254b7a4c9e841dcef108c274ca5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector_type</type>
      <name>direction</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a1a64ae1471c34f5c8e61f6a96c0a8e09</anchor>
      <arglist>(const line_segment &amp;seg, scalar_type &amp;length_out) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector_type</type>
      <name>direction</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>adf2fe253c77ffedffdb2a9393e72dcf3</anchor>
      <arglist>(const line_segment &amp;seg) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector_type</type>
      <name>midpoint</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a483eca88f4f25c77674e35d6de3f09b5</anchor>
      <arglist>(const line_segment &amp;seg) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr scalar_type</type>
      <name>length_squared</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a5957753238f54765a531f31070cbde5a</anchor>
      <arglist>(const line_segment &amp;seg) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr scalar_type</type>
      <name>length</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>ab70641900a7848972e1ad313dcf3bf6a</anchor>
      <arglist>(const line_segment &amp;seg) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>degenerate</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>aa2dc1ee9a89725fae385509e4c0b876c</anchor>
      <arglist>(const line_segment &amp;seg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>afd7da2af5abf2abcc04e1c8896f1f038</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a57b0cb28fbdab9ae1ef095919c9d1647</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a78b7742abe2c6e2f9f61367668630b23</anchor>
      <arglist>(const line_segment &amp;seg) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a3658396761ffd2fb51652e7f026b654f</anchor>
      <arglist>(const line_segment &amp;seg) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>ad488efb18123198f7f0684a23da880fd</anchor>
      <arglist>(const line_segment &amp;lhs, const line_segment&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a2c5d54d42db6135d41d732f1a4fca9ff</anchor>
      <arglist>(const line_segment &amp;lhs, const line_segment&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>af82499d51c74452b53f94b727bdd1824</anchor>
      <arglist>(const line_segment&lt; T &gt; &amp;seg, epsilon_type&lt; scalar_type, T &gt; epsilon=default_epsilon&lt; scalar_type, T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>acd8d0eb4a6fff4438027e674b42b3542</anchor>
      <arglist>(scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>ad1c8ad5ecf9b298ba0f15a052078b925</anchor>
      <arglist>(const line_segment &amp;seg1, const line_segment&lt; T &gt; &amp;seg2, epsilon_type&lt; scalar_type, T &gt; epsilon=default_epsilon&lt; scalar_type, T &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>afc321c5898d8d4cdcdcfcf2ed183ecd4</anchor>
      <arglist>(const line_segment &amp;seg, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>colinear</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a510645c6e3b87db9f1d61e3fa751afc0</anchor>
      <arglist>(const vector_type &amp;point, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>colinear</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a14d92e0e3fb1ab461cf354e7f9c75340</anchor>
      <arglist>(const line_segment &amp;seg, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>contains</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a25f7dd7056610d5543ce582ec656bd38</anchor>
      <arglist>(const vector_type &amp;point, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>coplanar</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>af7e1c5c5d4cb22ae82a02285a2a619bc</anchor>
      <arglist>(const line_segment &amp;seg, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>colinear</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>aa5d0d3dd6620e64c398e7dafbeace6dc</anchor>
      <arglist>(const line_segment &amp;seg, const vector_type &amp;point, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>colinear</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a3fd5938c199baa2e5ce7d960745c5839</anchor>
      <arglist>(const line_segment &amp;seg1, const line_segment &amp;seg2, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>contains</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>aeeba844435bd2294ec5c1669ee4d2b47</anchor>
      <arglist>(const line_segment &amp;seg, const vector_type &amp;point, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>coplanar</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>ac9b7f6c5fcef994830e2e3bd338fd706</anchor>
      <arglist>(const line_segment &amp;seg1, const line_segment &amp;seg2, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a2699867786d45f90b8a559a5ace80216</anchor>
      <arglist>(const bounding_box&lt; scalar_type &gt; &amp;bb) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a3cc873954b4e12f43cee793d33b8a6fd</anchor>
      <arglist>(const plane&lt; scalar_type &gt; &amp;p) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a4d442030860090f4479d36450a3a8a86</anchor>
      <arglist>(const line_segment &amp;seg, const bounding_box&lt; scalar_type &gt; &amp;bb) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a07c1a3ae275e14c6381e3f3e5a732307</anchor>
      <arglist>(const line_segment &amp;seg, const plane&lt; scalar_type &gt; &amp;p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr line_segment &amp;</type>
      <name>reverse</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>acd1d493e6742744f5caee1fadc6a56a3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr line_segment</type>
      <name>reverse</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a7f285a0c418bc42d387c5d176e9853a1</anchor>
      <arglist>(const line_segment &amp;seg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>ad318f02fb1d1961996426099534c6a15</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>aac13a05ddbc6188af378951594906bc6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a16c3541e8b76b22213bac7325fbc10f5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a17e15ac6c3d42a6e4f52c971ffef9e60</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>abab1072bf6117744227b717b3cc85ce0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cend</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a49ae7fbd53bd6ef443521ac0a344c45f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>aa8300fa061ba07aa720c23c2b7c930c6</anchor>
      <arglist>(line_segment &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a9b8847db1eab17efc3fc7d65031895b2</anchor>
      <arglist>(line_segment &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a26918eb6e2561a9cdc90a96461ff417c</anchor>
      <arglist>(const line_segment &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>ac82e233c6d3a5e39184f790797bb99a2</anchor>
      <arglist>(const line_segment &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>aa34e1e4fc00d1685fce84ff7191698be</anchor>
      <arglist>(const line_segment &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>cend</name>
      <anchorfile>structmuu_1_1line__segment.html</anchorfile>
      <anchor>a36dc3de74ba10e5d62a2f52fe39301fc</anchor>
      <arglist>(const line_segment &amp;v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::matrix</name>
    <filename>structmuu_1_1matrix.html</filename>
    <templarg>typename Scalar</templarg>
    <templarg>size_t Rows</templarg>
    <templarg>size_t Columns</templarg>
    <member kind="typedef">
      <type>Scalar</type>
      <name>scalar_type</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>ac0c7c109a5cfe476070e466f0fef8f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; scalar_type, columns &gt;</type>
      <name>row_type</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a82625b8c9fe89c6fc5e201649760c0a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; scalar_type, rows &gt;</type>
      <name>column_type</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a58afa02dd5888b308b1db7e578064d4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>quaternion&lt; scalar_type &gt;</type>
      <name>quaternion_type</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a1f4caac903121cbec6374c962bbd660a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>axis_angle&lt; scalar_type &gt;</type>
      <name>axis_angle_type</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>ae39460b625eb36f8b63132a0b38dbe21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>euler_angles&lt; scalar_type &gt;</type>
      <name>euler_type</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>aaf31f1397ed0627ebb0871844e4887c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::constants&lt; matrix &gt;</type>
      <name>constants</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a39aa9cffee0c8df320aa62d7f0a5abc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; is_integral&lt; scalar_type &gt;, impl::highest_ranked&lt; make_signed&lt; scalar_type &gt;, int &gt;, scalar_type &gt;</type>
      <name>determinant_type</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>ac4cd66fa42b6c0b41a209d4eb775a3f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; is_integral&lt; scalar_type &gt;, double, scalar_type &gt;</type>
      <name>inverse_scalar_type</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>ac3bcacddbbf474003f9f94b9c59634c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>matrix&lt; inverse_scalar_type, Rows, Columns &gt;</type>
      <name>inverse_type</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a424c6b47a92a7aa50de28a12dea0fe10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>matrix</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>add7e478a779bd04fe35758793a7a20d0</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>matrix</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a4e7118b871205f485f7d771de0469ea3</anchor>
      <arglist>(const matrix &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>af9f42bbf9167eec17bb9bc86bc4bdcf3</anchor>
      <arglist>(const matrix &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>matrix</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a7e6e3e611f1af0548d22bc555ba2d6e1</anchor>
      <arglist>(scalar_type fill) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>matrix</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a13b969ce2982626eba1f684daa8fe95b</anchor>
      <arglist>(scalar_type v0, scalar_type v1, const T &amp;... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>matrix</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>abb3a11204c1d332eafade6f0615c4a59</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;mat) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>matrix</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a6f6992ca5bcb35af69c85153aeb9f782</anchor>
      <arglist>(const T &amp;blittable) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>matrix</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>ad5abee3b85bc6f510980338c24e9c5c3</anchor>
      <arglist>(const vector&lt; S0, D0 &gt; &amp;col0, const vector&lt; S1, D1 &gt; &amp;col1, const Cols &amp;... cols) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type &amp;</type>
      <name>column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a639ad30790fa5317a3d81dd3d768c1b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const column_type &amp;</type>
      <name>column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>af2dfa75917dc999ad009812aa9b1ad50</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type &amp;</type>
      <name>x_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a973dcfb9d6a8667f0242308b3dbd8db4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const column_type &amp;</type>
      <name>x_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a8db9524d09c97f22c78882b2323eb412</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type &amp;</type>
      <name>y_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>add3322f88733938713e6ce883b2ba4ec</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const column_type &amp;</type>
      <name>y_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a66498727d9194f1cbcc5c22cccb3d19b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type &amp;</type>
      <name>z_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a517f86b423e8095316e78f94373f7130</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const column_type &amp;</type>
      <name>z_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>ac77afff8fbc85634fc0e207edf659862</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type &amp;</type>
      <name>w_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a0a194fe3adaa8d988c4a8d31a7ad79cd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const column_type &amp;</type>
      <name>w_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a79d0605e8be194ef3b26562b4b8835d0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type &amp;</type>
      <name>translation_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a17995bc0f6d6951175c213946ae50527</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const column_type &amp;</type>
      <name>translation_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a5751eb43ab506f1701e72b50859daef3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type &amp;</type>
      <name>get</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a71c4c90f6491573dfc1d5b9da35930c6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type &amp;</type>
      <name>get</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>adca05c2d4d4d607d886db1c4411c763b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type &amp;</type>
      <name>operator()</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>afdeed69a22233f335853fc9b20e39375</anchor>
      <arglist>(size_t r, size_t c) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type &amp;</type>
      <name>operator()</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a9a3678dd6b823e82a3d19721440caea5</anchor>
      <arglist>(size_t r, size_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a68994711ec5b1b22af112afe85b0c05b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a482a05d0104bb8c3d55580b176685a21</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_2d_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>afbc4fb2cc7d63d5acbd8282a60592af2</anchor>
      <arglist>(scalar_type x, scalar_type y) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_2d_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a9447164cfaca5292944a957ce441070a</anchor>
      <arglist>(const vector&lt; scalar_type, D &gt; &amp;scale) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_3d_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a95ed73fc1c29b007ef46655a18f22c1b</anchor>
      <arglist>(scalar_type x, scalar_type y, scalar_type z=Scalar{ 1 }) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_3d_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a9ef96911ddef1c529535caf0584af52d</anchor>
      <arglist>(const vector&lt; scalar_type, D &gt; &amp;scale) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>aa233b035a7a473fb2a49c47dd9d64905</anchor>
      <arglist>(scalar_type x, scalar_type y) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a9412c966c1869fb76186c71038c12c54</anchor>
      <arglist>(scalar_type x, scalar_type y, scalar_type z) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a33b51a4ca9c06d88eb76b509db588c85</anchor>
      <arglist>(const vector&lt; scalar_type, 2 &gt; &amp;scale) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>aeaa03691413769c8860f572c5b2c37bd</anchor>
      <arglist>(const vector&lt; scalar_type, 3 &gt; &amp;scale) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_2d_translation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a023095e602661eedb3fa46fbd269fd22</anchor>
      <arglist>(scalar_type x, scalar_type y) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_2d_translation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a5eba87c8e3e7b71783c32f84fc8de985</anchor>
      <arglist>(const vector&lt; scalar_type, D &gt; &amp;xlat) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_3d_translation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>af229a405edb9f64dc5f13fbc51259b24</anchor>
      <arglist>(scalar_type x, scalar_type y, scalar_type z=Scalar{}) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_3d_translation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a269bb0036126025f9b52714cd1cbe575</anchor>
      <arglist>(const vector&lt; scalar_type, D &gt; &amp;xlat) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_translation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>aede0d6b7e4e6281e99500f37ea367644</anchor>
      <arglist>(scalar_type x, scalar_type y) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_translation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>ab265d92bd7f7317ae21de6ea1c7c7ea5</anchor>
      <arglist>(scalar_type x, scalar_type y, scalar_type z) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_translation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a4993af9ea11ca906acef27d2a91e3070</anchor>
      <arglist>(const vector&lt; scalar_type, 2 &gt; &amp;xlat) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_translation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>afcf61d031627037a510b480bec8ecb08</anchor>
      <arglist>(const vector&lt; scalar_type, 3 &gt; &amp;xlat) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>column_type</type>
      <name>m</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>aa9374ff95558bb843c99282aa7335224</anchor>
      <arglist>[columns]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>rows</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a228170eec0384c3a2f974a9defe4e628</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>columns</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a9e484f8d23156004ee20bf7249105d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>aa58692cee8066ae4618735b5fa13cd2f</anchor>
      <arglist>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const matrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga1f57b7af70f0235ad644486a5943e582</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gac9148a5c5b63c63d14ca506aee43484e</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m1, const matrix&lt; T, R, C &gt; &amp;m2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gae6774c12326004b4e421e554a35afe8b</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr matrix&lt; S, C, R &gt;</type>
      <name>transpose</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a4d11bad2718bdbb090fb73ab6c5def00</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr determinant_type</type>
      <name>determinant</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a4cb7a56d0f2260af3ceb0b0c5204ed0b</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr inverse_type</type>
      <name>invert</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a279539802143d8a8227c503be45aa972</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr matrix&lt; S, R, C &gt;</type>
      <name>orthonormalize</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>abe6723009e315776a0868a4062e4537b</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_2d_shear</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a629ba64ede6c8f9161e387fb14472c33</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_3d_shear</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a5e37b9c72e81e94988ef4c6d9a9d0dfe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_2d_rotation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>ac253df72b0a6090ea245617ff6928f75</anchor>
      <arglist>(const matrix&lt; scalar_type, R, C &gt; &amp;rot) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_rotation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>aa746d6f50050ec632cdea5d278339fc3</anchor>
      <arglist>(const matrix&lt; scalar_type, 2, 2 &gt; &amp;rot) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_rotation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a21140aa6625cfd0f231d35316db36a6e</anchor>
      <arglist>(const matrix&lt; scalar_type, 2, 3 &gt; &amp;rot) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_3d_rotation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>aaeeed3324aeac34a0b04d20928c52d01</anchor>
      <arglist>(const matrix&lt; scalar_type, R, C &gt; &amp;rot) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_rotation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a90f9a29776928b16711dd4da9787bb12</anchor>
      <arglist>(const matrix&lt; scalar_type, 3, 3 &gt; &amp;rot) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_rotation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a787e7a744d2be98100fc2c8617d57504</anchor>
      <arglist>(const matrix&lt; scalar_type, 3, 4 &gt; &amp;rot) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_rotation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a00dc717aef6ab590262d271310dcf63f</anchor>
      <arglist>(const matrix&lt; scalar_type, 4, 4 &gt; &amp;rot) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_quaternion</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>adf8d5bcc6abeb0a00716928a6f796489</anchor>
      <arglist>(const quaternion_type &amp;quat) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_axis_angle</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>ad64e9541ec96188c0b22b6a4383b93ac</anchor>
      <arglist>(const vector&lt; scalar_type, 3 &gt; &amp;axis, scalar_type angle) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_axis_angle</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a94f32de9a1014a6cfb2776a5165a17d7</anchor>
      <arglist>(const axis_angle_type &amp;aa) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_euler</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>aac9b759c67f7bdcc288f45c1b167defd</anchor>
      <arglist>(scalar_type yaw, scalar_type pitch, scalar_type roll) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_euler</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>aafc872b6f752d975a75f6e95227bc4aa</anchor>
      <arglist>(const euler_type &amp;angles) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_axes</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a6adee52c61eae0ad9d4f81346ff281db</anchor>
      <arglist>(const vector&lt; Scalar, 2 &gt; &amp;x, const vector&lt; Scalar, 2 &gt; &amp;y) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_axes</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a12bf6878e3127cf38cd120afe71e153e</anchor>
      <arglist>(const vector&lt; Scalar, 3 &gt; &amp;x, const vector&lt; Scalar, 3 &gt; &amp;y, const vector&lt; Scalar, 3 &gt; &amp;z) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type &amp;</type>
      <name>column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a639ad30790fa5317a3d81dd3d768c1b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const column_type &amp;</type>
      <name>column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>af2dfa75917dc999ad009812aa9b1ad50</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type &amp;</type>
      <name>x_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a973dcfb9d6a8667f0242308b3dbd8db4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const column_type &amp;</type>
      <name>x_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a8db9524d09c97f22c78882b2323eb412</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type &amp;</type>
      <name>y_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>add3322f88733938713e6ce883b2ba4ec</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const column_type &amp;</type>
      <name>y_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a66498727d9194f1cbcc5c22cccb3d19b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type &amp;</type>
      <name>z_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a517f86b423e8095316e78f94373f7130</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const column_type &amp;</type>
      <name>z_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>ac77afff8fbc85634fc0e207edf659862</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type &amp;</type>
      <name>w_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a0a194fe3adaa8d988c4a8d31a7ad79cd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const column_type &amp;</type>
      <name>w_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a79d0605e8be194ef3b26562b4b8835d0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type &amp;</type>
      <name>translation_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a17995bc0f6d6951175c213946ae50527</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const column_type &amp;</type>
      <name>translation_column</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a5751eb43ab506f1701e72b50859daef3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type &amp;</type>
      <name>get</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a71c4c90f6491573dfc1d5b9da35930c6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type &amp;</type>
      <name>get</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>adca05c2d4d4d607d886db1c4411c763b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type &amp;</type>
      <name>operator()</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>afdeed69a22233f335853fc9b20e39375</anchor>
      <arglist>(size_t r, size_t c) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type &amp;</type>
      <name>operator()</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a9a3678dd6b823e82a3d19721440caea5</anchor>
      <arglist>(size_t r, size_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a68994711ec5b1b22af112afe85b0c05b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a482a05d0104bb8c3d55580b176685a21</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a3d3394a8e617dc6a0875b9c9c87367f0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>ac80d96a85e2d95f5bf7e4096b589f011</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a02c8f050c3465938848790f69abd7183</anchor>
      <arglist>(const matrix &amp;m) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>ab7c61c64ca180d40b790d7313c5bcc60</anchor>
      <arglist>(const matrix &amp;m) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a8386b98ca92a3781a1bc35e2d4fb2950</anchor>
      <arglist>(const matrix &amp;lhs, const matrix&lt; T, rows, columns &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a0d464ba1e94f2155bcaf28ffebd18570</anchor>
      <arglist>(const matrix &amp;lhs, const matrix&lt; T, rows, columns &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a28dc67dedc67b7ab08fd343f3430207e</anchor>
      <arglist>(const matrix&lt; T, rows, columns &gt; &amp;m, epsilon_type&lt; scalar_type, T &gt; epsilon=default_epsilon&lt; scalar_type, T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a0f71605faa2fa82f02abbacd61605964</anchor>
      <arglist>(scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>aeaf3bde7029c53524aa632fefcebb949</anchor>
      <arglist>(const matrix &amp;m1, const matrix&lt; T, rows, columns &gt; &amp;m2, epsilon_type&lt; scalar_type, T &gt; epsilon=default_epsilon&lt; scalar_type, T &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a268b110023cb590b67aa4141554ead1e</anchor>
      <arglist>(const matrix &amp;m, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr matrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a27bf2f92cf6b79669941809489e0b2d2</anchor>
      <arglist>(const matrix &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr matrix</type>
      <name>operator+</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a4dd1836f1bf1e2353b4fc08e05c0e6f0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend matrix</type>
      <name>operator+</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a56d5ff720bc56a1815e93aee36c20a25</anchor>
      <arglist>(const matrix &amp;lhs, const matrix &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr matrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a2e5c9e7954223792ef653a7d1db10087</anchor>
      <arglist>(const matrix &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr matrix</type>
      <name>operator-</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a3460593457d7db05c0ad631047c45897</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend matrix</type>
      <name>operator-</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a8705428af36a2e5c962fba04a27d4c03</anchor>
      <arglist>(const matrix &amp;lhs, const matrix &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr matrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a025796952565b3e266db539abbc7e87c</anchor>
      <arglist>(const matrix &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr matrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>ae0b87400772f1d607fa451f9e9548c8d</anchor>
      <arglist>(scalar_type rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend matrix&lt; scalar_type, rows, C &gt;</type>
      <name>operator*</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>af907855a38b77402be6defbb5e00531a</anchor>
      <arglist>(const matrix &amp;lhs, const matrix&lt; scalar_type, columns, C &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend column_type</type>
      <name>operator*</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>afe6e5481324e306f0f938f79a3421bf4</anchor>
      <arglist>(const matrix &amp;lhs, const vector&lt; scalar_type, columns &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend row_type</type>
      <name>operator*</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>abad69ec3b7d9187965dbee190941333f</anchor>
      <arglist>(const vector&lt; scalar_type, rows &gt; &amp;lhs, const matrix &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend matrix</type>
      <name>operator*</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>adf49cbaa32a6de2e3b36af53916d9aa2</anchor>
      <arglist>(const matrix &amp;lhs, scalar_type rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend matrix</type>
      <name>operator*</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a0898a0f30f9cfbc75e23d0ee33f6c2f8</anchor>
      <arglist>(scalar_type lhs, const matrix &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr matrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a8a253e3054bce0248ede8f7919ba605d</anchor>
      <arglist>(scalar_type rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend matrix</type>
      <name>operator/</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a4c476dad87c48d20c778710e27a2c6ff</anchor>
      <arglist>(const matrix &amp;lhs, scalar_type rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr matrix &amp;</type>
      <name>transpose</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>abdf68e567d61b72c9b2273bdaad7eb4d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix&lt; scalar_type, columns, rows &gt;</type>
      <name>transpose</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a9546248f4fbe20a1fde5b908de8ff016</anchor>
      <arglist>(const matrix &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr determinant_type</type>
      <name>determinant</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a219afb9f807add298f88ef241c19d3e1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr matrix &amp;</type>
      <name>invert</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>ae268a7221bf0ff6c24257b7638f337b9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr determinant_type</type>
      <name>determinant</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>aa37c7b1214a11db42e3288bfcb54ff6b</anchor>
      <arglist>(const matrix &amp;m) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr inverse_type</type>
      <name>invert</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a76f7e010c833b8d44ec943e01e19ccee</anchor>
      <arglist>(const matrix &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr matrix &amp;</type>
      <name>orthonormalize</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a5cadade40d4864c6a07dade22bf58a13</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>orthonormalized</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a5d320e20ca581f36b3e67b962dcf41c9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>orthonormalize</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>aa15f83179ece20ae31d5f6e3f674bfbc</anchor>
      <arglist>(const matrix &amp;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>orthonormalized</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>afd8c1449ef5abd3b4378ff3ecb32de96</anchor>
      <arglist>(const matrix &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; scalar_type, 3 &gt;</type>
      <name>transform_position</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a623d1033a19402df8871e74615d6ef55</anchor>
      <arglist>(const vector&lt; scalar_type, 3 &gt; &amp;pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; scalar_type, 3 &gt;</type>
      <name>transform_without_translating</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a40daeeb9d1ae14b61c969eac4c1da509</anchor>
      <arglist>(const vector&lt; scalar_type, 3 &gt; &amp;v) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; scalar_type, 3 &gt;</type>
      <name>transform_direction</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a3754be9bee88e3a7b2da6d1c907ab2e0</anchor>
      <arglist>(const vector&lt; scalar_type, 3 &gt; &amp;dir) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; scalar_type, 2 &gt;</type>
      <name>extract_2d_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>abd506f0334c547b376c4327603477e7c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; scalar_type, 3 &gt;</type>
      <name>extract_3d_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>ab1875ad3f3b9ffd74ca16e0888a46719</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector&lt; scalar_type, 3 &gt;</type>
      <name>transform_position</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a97e61f752b68c1fd0b42bc3cbcc26f2f</anchor>
      <arglist>(const matrix &amp;xform, const vector&lt; scalar_type, 3 &gt; &amp;pos) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector&lt; scalar_type, 3 &gt;</type>
      <name>transform_without_translating</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a59d0f5254995c35e39fd1a9926d8f597</anchor>
      <arglist>(const matrix &amp;xform, const vector&lt; scalar_type, 3 &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector&lt; scalar_type, 3 &gt;</type>
      <name>transform_direction</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>aadde62cb9f7d7c6e320c89bdd6a91e9a</anchor>
      <arglist>(const matrix &amp;xform, const vector&lt; scalar_type, 3 &gt; &amp;dir) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector&lt; scalar_type, 2 &gt;</type>
      <name>extract_2d_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a96fad04de29aa0e77caf017b1e502de2</anchor>
      <arglist>(const matrix &amp;mat) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector&lt; scalar_type, 3 &gt;</type>
      <name>extract_3d_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>aed72dba01ce627ca56635813c2c189c9</anchor>
      <arglist>(const matrix &amp;mat) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend vector&lt; scalar_type, 3 &gt;</type>
      <name>operator*</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a6bb6e8d6c8f41487f87a5a4b14719498</anchor>
      <arglist>(const matrix &amp;xform, const vector&lt; scalar_type, 3 &gt; &amp;pos) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_2d_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>afbc4fb2cc7d63d5acbd8282a60592af2</anchor>
      <arglist>(scalar_type x, scalar_type y) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_2d_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a9447164cfaca5292944a957ce441070a</anchor>
      <arglist>(const vector&lt; scalar_type, D &gt; &amp;scale) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_3d_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a95ed73fc1c29b007ef46655a18f22c1b</anchor>
      <arglist>(scalar_type x, scalar_type y, scalar_type z=Scalar{ 1 }) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_3d_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a9ef96911ddef1c529535caf0584af52d</anchor>
      <arglist>(const vector&lt; scalar_type, D &gt; &amp;scale) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>aa233b035a7a473fb2a49c47dd9d64905</anchor>
      <arglist>(scalar_type x, scalar_type y) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a9412c966c1869fb76186c71038c12c54</anchor>
      <arglist>(scalar_type x, scalar_type y, scalar_type z) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a33b51a4ca9c06d88eb76b509db588c85</anchor>
      <arglist>(const vector&lt; scalar_type, 2 &gt; &amp;scale) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_scale</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>aeaa03691413769c8860f572c5b2c37bd</anchor>
      <arglist>(const vector&lt; scalar_type, 3 &gt; &amp;scale) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_2d_translation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a023095e602661eedb3fa46fbd269fd22</anchor>
      <arglist>(scalar_type x, scalar_type y) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_2d_translation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a5eba87c8e3e7b71783c32f84fc8de985</anchor>
      <arglist>(const vector&lt; scalar_type, D &gt; &amp;xlat) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_3d_translation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>af229a405edb9f64dc5f13fbc51259b24</anchor>
      <arglist>(scalar_type x, scalar_type y, scalar_type z=Scalar{}) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_3d_translation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a269bb0036126025f9b52714cd1cbe575</anchor>
      <arglist>(const vector&lt; scalar_type, D &gt; &amp;xlat) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_translation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>aede0d6b7e4e6281e99500f37ea367644</anchor>
      <arglist>(scalar_type x, scalar_type y) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_translation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>ab265d92bd7f7317ae21de6ea1c7c7ea5</anchor>
      <arglist>(scalar_type x, scalar_type y, scalar_type z) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_translation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>a4993af9ea11ca906acef27d2a91e3070</anchor>
      <arglist>(const vector&lt; scalar_type, 2 &gt; &amp;xlat) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr matrix</type>
      <name>from_translation</name>
      <anchorfile>structmuu_1_1matrix.html</anchorfile>
      <anchor>afcf61d031627037a510b480bec8ecb08</anchor>
      <arglist>(const vector&lt; scalar_type, 3 &gt; &amp;xlat) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::numeric_limits&lt; muu::half &gt;</name>
    <filename>structstd_1_1numeric__limits_3_01muu_1_1half_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>muu::oriented_bounding_box</name>
    <filename>structmuu_1_1oriented__bounding__box.html</filename>
    <templarg>typename Scalar</templarg>
    <member kind="typedef">
      <type>Scalar</type>
      <name>scalar_type</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a2395efcd9d8cf5ae331a86fdcb5c9cd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; scalar_type, 3 &gt;</type>
      <name>vector_type</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a9c13ab31dc67846a59a7533c36c4fc54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>matrix&lt; scalar_type, 3, 3 &gt;</type>
      <name>axes_type</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>abf37942d5f32f6dcf31336990fca9fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::constants&lt; oriented_bounding_box &gt;</type>
      <name>constants</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a2fc9b68af2ad45481eade55cf33d8f37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>oriented_bounding_box</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>ab6acfa161bf45756bba4b47ed6c3ee8f</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>oriented_bounding_box</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>abcee89059bc5c0bef4d156c697295221</anchor>
      <arglist>(const oriented_bounding_box &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr oriented_bounding_box &amp;</type>
      <name>operator=</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>aa6c5e3d8e9fc68b4c5af8a9957cc7c35</anchor>
      <arglist>(const oriented_bounding_box &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>oriented_bounding_box</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>abb145280c8a133ee93b6dfaf7da4dbf6</anchor>
      <arglist>(const vector_type &amp;cen, const vector_type &amp;ext, const axes_type &amp;rot=axes_constants::identity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>oriented_bounding_box</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>aace39fe245f69d71029d23e2423203fb</anchor>
      <arglist>(const vector_type &amp;cen, scalar_type ext_x, scalar_type ext_y, scalar_type ext_z, const axes_type &amp;rot=axes_constants::identity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>oriented_bounding_box</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>aea08fcdd543b285510b71591f1e0e090</anchor>
      <arglist>(const vector_type &amp;cen, scalar_type ext, const axes_type &amp;rot=axes_constants::identity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>oriented_bounding_box</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>acd2da562736af93ffcb9ad67071a46bf</anchor>
      <arglist>(const vector_type &amp;ext, const axes_type &amp;rot=axes_constants::identity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>oriented_bounding_box</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a6b134fd5096fd18af398aa82d890928b</anchor>
      <arglist>(scalar_type cen_x, scalar_type cen_y, scalar_type cen_z, const vector_type &amp;ext, const axes_type &amp;rot=axes_constants::identity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>oriented_bounding_box</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>ae5d93db6e381c03588ebd7ff75deaf32</anchor>
      <arglist>(scalar_type cen_x, scalar_type cen_y, scalar_type cen_z, scalar_type ext_x, scalar_type ext_y, scalar_type ext_z, const axes_type &amp;rot=axes_constants::identity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>oriented_bounding_box</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a664646d09fbd8d67cd23d7f3c7ecc56e</anchor>
      <arglist>(scalar_type ext, const axes_type &amp;rot=axes_constants::identity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>oriented_bounding_box</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a26c97079d2340b6ce69933cabe8441d5</anchor>
      <arglist>(const oriented_bounding_box&lt; S &gt; &amp;bb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>oriented_bounding_box</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a04b7966c37e8d27c44ec39da6c2da058</anchor>
      <arglist>(const T &amp;blittable) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>ab691724ec6d1b40c1bddeb3cc32d7194</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a7057976f5c6b8bbbea89afb75953e9f1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>width</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a23fbae24deb285286d6b5f370419aab6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>height</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a42b619cb0292870b30c574772ded549e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>depth</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a8ab3110c8ffa5c91d3c007b49616a375</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>diagonal</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>aa0bdad0153bf50a8df0bb4d4c0128cec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type &amp;</type>
      <name>shortest_extent</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a8a103afae4fe537d9429828834a9eb12</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type &amp;</type>
      <name>longest_extent</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a371f4238d84e89a56c509fc078bf7b85</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type &amp;</type>
      <name>shortest_extent</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a92632202298fe2388bc4d45630975891</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type &amp;</type>
      <name>longest_extent</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a57afc721917b9298bf23e869d8166a9c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>shortest_side</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>af12acf86104a1c9b700262cffa3e2c44</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>longest_side</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>aa1eeaa2cb32dc0fbab840bee5e3ce40f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>volume</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a66b0ff4d757468a63397f3acdc5e6b4c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>mass</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a8574bbecdb31fe44bb57d44698289096</anchor>
      <arglist>(scalar_type density) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>density</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>ac3f351d5d65a443686a0eec3ec29c6e0</anchor>
      <arglist>(scalar_type mass) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>degenerate</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>aa5de84ac81f4b8f0df92db8151a7dd04</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>vector_type</type>
      <name>center</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a93a7c36e8fc43c3737ac4170c949a5f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_type</type>
      <name>extents</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>ac4542677a8de3faee8f11390bcffe84c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>axes_type</type>
      <name>axes</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a06266afb86562e550b7442dfd6d525ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gade7f3e7d056853c9e542ec453394a9c4</anchor>
      <arglist>(const oriented_bounding_box&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga44033f904b7ed733949dab5e6acccd16</anchor>
      <arglist>(const oriented_bounding_box&lt; S &gt; &amp;q1, const oriented_bounding_box&lt; T &gt; &amp;q2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga4c274a76495695493647b4e0b7af1299</anchor>
      <arglist>(const oriented_bounding_box&lt; S &gt; &amp;q, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>ab691724ec6d1b40c1bddeb3cc32d7194</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a7057976f5c6b8bbbea89afb75953e9f1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>width</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a23fbae24deb285286d6b5f370419aab6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>height</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a42b619cb0292870b30c574772ded549e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>depth</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a8ab3110c8ffa5c91d3c007b49616a375</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>diagonal</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>aa0bdad0153bf50a8df0bb4d4c0128cec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type &amp;</type>
      <name>shortest_extent</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a8a103afae4fe537d9429828834a9eb12</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type &amp;</type>
      <name>longest_extent</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a371f4238d84e89a56c509fc078bf7b85</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type &amp;</type>
      <name>shortest_extent</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a92632202298fe2388bc4d45630975891</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type &amp;</type>
      <name>longest_extent</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a57afc721917b9298bf23e869d8166a9c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>shortest_side</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>af12acf86104a1c9b700262cffa3e2c44</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>longest_side</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>aa1eeaa2cb32dc0fbab840bee5e3ce40f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>volume</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a66b0ff4d757468a63397f3acdc5e6b4c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>mass</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a8574bbecdb31fe44bb57d44698289096</anchor>
      <arglist>(scalar_type density) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>density</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>ac3f351d5d65a443686a0eec3ec29c6e0</anchor>
      <arglist>(scalar_type mass) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>degenerate</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>aa5de84ac81f4b8f0df92db8151a7dd04</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>abab6f53a91b7de77345ae17e4171c215</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a6821c423748c91dc25f6e0281e10f51b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a70e3d89d9a50eee55ae7e6caad33ec7f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a04d8bb7b2d9cd6f14fe9487a0b244ee4</anchor>
      <arglist>(const oriented_bounding_box &amp;lhs, const oriented_bounding_box&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a0e5fa8d1fb2631dfec6a793ade4b52af</anchor>
      <arglist>(const oriented_bounding_box &amp;lhs, const oriented_bounding_box&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>af601531135ef4114c58ba7c0640faa5e</anchor>
      <arglist>(const oriented_bounding_box &amp;bb) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>empty</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a98684dcc2ca0a421595386e1041a744f</anchor>
      <arglist>(const oriented_bounding_box &amp;bb) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>abbade33e83f93e4ef7989a789465c98a</anchor>
      <arglist>(const oriented_bounding_box &amp;bb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a036da045eaa42924a49db5069de765d9</anchor>
      <arglist>(const oriented_bounding_box&lt; T &gt; &amp;bb, epsilon_type&lt; scalar_type, T &gt; epsilon=default_epsilon&lt; scalar_type, T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a8c691d72ed53ee9abd25d8a8292e8be5</anchor>
      <arglist>(scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_empty</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>ac0ea263ca8231e840c6d869b1963b6c8</anchor>
      <arglist>(scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a068191ce40cda58a5c698dd85dc24d41</anchor>
      <arglist>(const oriented_bounding_box &amp;bb1, const oriented_bounding_box&lt; T &gt; &amp;bb2, epsilon_type&lt; scalar_type, T &gt; epsilon=default_epsilon&lt; scalar_type, T &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>ad5eae7fd6e033ff0d2f1fe6f26b57f8a</anchor>
      <arglist>(const oriented_bounding_box &amp;bb, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_empty</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>ade9ef8665b56174cd7ecd25fdb884612</anchor>
      <arglist>(const oriented_bounding_box &amp;bb, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type</type>
      <name>corner</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>afad2a18986d9be74adfb474d7aa78aa6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type</type>
      <name>corner</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a16c6c91c3f5442ff291de03c27c141ff</anchor>
      <arglist>(box_corner which) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type</type>
      <name>min_corner</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a44284127a6816ae5e43d86151551ccae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type</type>
      <name>max_corner</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a212aeb2948556abc3dd3fc95a150d6b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector_type</type>
      <name>corner</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>aecac4c800600c1eaeaa6b9ce9ea7eead</anchor>
      <arglist>(const oriented_bounding_box &amp;bb) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector_type</type>
      <name>corner</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a059e5ad5317cc00899ba8d0f9efeab9d</anchor>
      <arglist>(const oriented_bounding_box &amp;bb, box_corner which) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector_type</type>
      <name>min_corner</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a6697c571306ab44f3394bb3eb8a51fec</anchor>
      <arglist>(const oriented_bounding_box &amp;bb) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector_type</type>
      <name>max_corner</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a00d1cb3e9f64b75b7430fa5df43fd102</anchor>
      <arglist>(const oriented_bounding_box &amp;bb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr oriented_bounding_box &amp;</type>
      <name>translate</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>aebff1db2fb7a0ed35c4f07f68405a792</anchor>
      <arglist>(const vector_type &amp;offset) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr oriented_bounding_box</type>
      <name>translate</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a3e2fd19ae31e7fbd5d8c93b7b8d897dc</anchor>
      <arglist>(const oriented_bounding_box &amp;bb, const vector_type &amp;offset) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr oriented_bounding_box &amp;</type>
      <name>scale</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>abce84ebbd395a20132fa2ba5a30fe210</anchor>
      <arglist>(const vector_type &amp;scale_) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr oriented_bounding_box</type>
      <name>scale</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>adba7fd88ffaa708f3366fb1b48b68352</anchor>
      <arglist>(const oriented_bounding_box &amp;bb, const vector_type &amp;scale_) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr oriented_bounding_box &amp;</type>
      <name>transform</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a6a0587b14522e743659d6e18708c65f3</anchor>
      <arglist>(const matrix&lt; scalar_type, 4, 4 &gt; &amp;tx) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr oriented_bounding_box</type>
      <name>transform</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>aaf6cfe8f4d3013234df5ac9dd229aa37</anchor>
      <arglist>(const oriented_bounding_box &amp;bb, const matrix&lt; scalar_type, 4, 4 &gt; &amp;tx) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>ab1872cd9def090e649fe370cb4f36903</anchor>
      <arglist>(const bounding_box&lt; scalar_type &gt; &amp;aabb) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>a0d132f82c8229850219d108af20032ee</anchor>
      <arglist>(const oriented_bounding_box &amp;bb) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>aceeebd08a3e2c01219536c8115b5fbde</anchor>
      <arglist>(const oriented_bounding_box &amp;obb, const bounding_box&lt; scalar_type &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1oriented__bounding__box.html</anchorfile>
      <anchor>ad40a1aab831164ca6e42b8f98e3e2a79</anchor>
      <arglist>(const oriented_bounding_box &amp;bb1, const oriented_bounding_box &amp;bb2) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::packed_unit_vector</name>
    <filename>structmuu_1_1packed__unit__vector.html</filename>
    <templarg>typename Integer</templarg>
    <templarg>size_t Dimensions</templarg>
    <member kind="typedef">
      <type>muu::constants&lt; packed_unit_vector &gt;</type>
      <name>constants</name>
      <anchorfile>structmuu_1_1packed__unit__vector.html</anchorfile>
      <anchor>a4f4b6c4e7d9c57716cf8097d65663d19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Integer</type>
      <name>integer_type</name>
      <anchorfile>structmuu_1_1packed__unit__vector.html</anchorfile>
      <anchor>a6bbcaff4fcb03f6cd054c6b9649fe79d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>packed_unit_vector</name>
      <anchorfile>structmuu_1_1packed__unit__vector.html</anchorfile>
      <anchor>a0fbbd14a92c4f06243ec22a20f28c379</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>packed_unit_vector</name>
      <anchorfile>structmuu_1_1packed__unit__vector.html</anchorfile>
      <anchor>ad8ae2d6bcd2b5bdf923858ac3fdc73da</anchor>
      <arglist>(const packed_unit_vector &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr packed_unit_vector &amp;</type>
      <name>operator=</name>
      <anchorfile>structmuu_1_1packed__unit__vector.html</anchorfile>
      <anchor>ae39745b69611dd7364cf7b4492aea51d</anchor>
      <arglist>(const packed_unit_vector &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>packed_unit_vector</name>
      <anchorfile>structmuu_1_1packed__unit__vector.html</anchorfile>
      <anchor>a038a99584a22b6fc765c4328191228e9</anchor>
      <arglist>(const vector&lt; T, dimensions &gt; &amp;vec) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; T, dimensions &gt;</type>
      <name>unpack</name>
      <anchorfile>structmuu_1_1packed__unit__vector.html</anchorfile>
      <anchor>afeea6a55ee88ef573a3a8646e41e8a31</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator vector&lt; T, dimensions &gt;</name>
      <anchorfile>structmuu_1_1packed__unit__vector.html</anchorfile>
      <anchor>a4e4b57405b4a192a2fc107f168725ffe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>x_negative</name>
      <anchorfile>structmuu_1_1packed__unit__vector.html</anchorfile>
      <anchor>a81b1b9846a0c85aa365a2834d53f4149</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>y_negative</name>
      <anchorfile>structmuu_1_1packed__unit__vector.html</anchorfile>
      <anchor>a3286b807ff7ea63c7088bf73ad1167e5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>z_negative</name>
      <anchorfile>structmuu_1_1packed__unit__vector.html</anchorfile>
      <anchor>ac8b03b6463a1ce040702cd2a396dbd5c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>integer_type</type>
      <name>bits</name>
      <anchorfile>structmuu_1_1packed__unit__vector.html</anchorfile>
      <anchor>afaa290cd8093351bd5973a831c988734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>dimensions</name>
      <anchorfile>structmuu_1_1packed__unit__vector.html</anchorfile>
      <anchor>aec7dcdcc76d16a6dc95f852e0a5428c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structmuu_1_1packed__unit__vector.html</anchorfile>
      <anchor>a5579c4dc7e12a1b95d0ee77e35d7c2cd</anchor>
      <arglist>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const packed_unit_vector &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::plane</name>
    <filename>structmuu_1_1plane.html</filename>
    <templarg>typename Scalar</templarg>
    <member kind="typedef">
      <type>Scalar</type>
      <name>scalar_type</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>adcab9f359b67e7e522de98b8c8104e22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; scalar_type, 3 &gt;</type>
      <name>vector_type</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>ab84d1abc27ca95d88dec6b24d159df84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::constants&lt; plane &gt;</type>
      <name>constants</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a453a259e27f328a2449503cea5ce4318</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>plane</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>ab1bb14fea3b8c93184e4797a1022916d</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>plane</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>aa385fff11dce097c1dbd8ad561b94e47</anchor>
      <arglist>(const plane &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr plane &amp;</type>
      <name>operator=</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a34d70856ba77358a6dcfa28f7bb2d2ce</anchor>
      <arglist>(const plane &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>plane</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>aeb288621dc35283e56d82c69f99433a6</anchor>
      <arglist>(const vector_type &amp;n, scalar_type d) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>plane</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a3a3c3e1038a6cbc3415d0ae7f6d4919b</anchor>
      <arglist>(const vector_type &amp;position, const vector_type &amp;direction) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>plane</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>ab5188313e156faee8bfbf82181926923</anchor>
      <arglist>(const vector_type &amp;p0, const vector_type &amp;p1, const vector_type &amp;p2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>plane</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a3ed725fedf9441521faf7b01ddc64ea5</anchor>
      <arglist>(const triangle&lt; scalar_type &gt; &amp;tri) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>plane</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>afca3fcf801ccac6cb758af5b3bb5538c</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>plane</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>aa021fffd4654f4bc1f44303f41ac6997</anchor>
      <arglist>(const T &amp;blittable) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a92d0c6b24eaa9efa73f56763c6c3d1e8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a5ffa8874106cdb9e7ce97e29b909ec01</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr plane</type>
      <name>from_triangle</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a06b4f8ddd080f7f1dcf7b6bbfe381a29</anchor>
      <arglist>(const vector_type &amp;p0, const vector_type &amp;p1, const vector_type &amp;p2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr plane</type>
      <name>from_triangle</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>ad16ba39b12add75a71091c9f2d2304d7</anchor>
      <arglist>(const triangle&lt; scalar_type &gt; &amp;tri) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>vector_type</type>
      <name>n</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a05c0d64b7b5eacc0c0d3f88b4c13e047</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scalar_type</type>
      <name>d</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a4f6422b3ea83f89e939ce521d6d06aa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>af90b8d7f47eb1c7a031b855c47c5135c</anchor>
      <arglist>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const plane &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gaa55cd1d8c3534c8ffc01aea226c26997</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gae2d90458dab99f2b1ff2283177ba5835</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p1, const plane&lt; T &gt; &amp;p2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gaffffd5920be4c9358ad1e0e0e57a7e15</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>normalized</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a3d29ca53ac092c2e6f66617be57f61b2</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a92d0c6b24eaa9efa73f56763c6c3d1e8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a5ffa8874106cdb9e7ce97e29b909ec01</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a7cbefafdbf691a8245df81394ae5210d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a733c81629d2c92b37e84528847431308</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>aec8b3a9016fcb4680d4967454dc1b0c7</anchor>
      <arglist>(const plane &amp;p) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>af1923ff478b5291f13138eca16c2baf8</anchor>
      <arglist>(const plane &amp;p) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a0fb8c8305c60c530f4875c966707fe4e</anchor>
      <arglist>(const plane &amp;lhs, const plane&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a295e8990c6ede4cec00b3255b7a190ba</anchor>
      <arglist>(const plane &amp;lhs, const plane&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>ad8b5c0a78be7df3766e48dcb6d6e0666</anchor>
      <arglist>(const plane&lt; T &gt; &amp;p, epsilon_type&lt; scalar_type, T &gt; epsilon=default_epsilon&lt; scalar_type, T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a0361e927ddbef9c6c1cf658bf3cf157c</anchor>
      <arglist>(scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_empty</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a3bf25ef232d42cec5734dc6e7f60643b</anchor>
      <arglist>(scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a1aa7b971c7db4e18df62e28ebd31e670</anchor>
      <arglist>(const plane &amp;p1, const plane&lt; T &gt; &amp;p2, epsilon_type&lt; scalar_type, T &gt; epsilon=default_epsilon&lt; scalar_type, T &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>adf8ac43672339b9b30c69c48e3e41661</anchor>
      <arglist>(const plane &amp;p, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_empty</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>aae015261375676408d61b5a8e3434081</anchor>
      <arglist>(const plane &amp;p, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr plane &amp;</type>
      <name>normalize</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a744f22c9bdba9e93ba1a322a550e5ed0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>normalized</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a16efc1d15f1177149a1ad349cee164a6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr plane</type>
      <name>normalize</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a81f9f0f92c3e55d8c2d4299d1414f217</anchor>
      <arglist>(const plane &amp;p) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>normalized</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a4cd48d19b05b164156b0a9fe58a405a1</anchor>
      <arglist>(const plane &amp;p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>signed_distance</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>acac6bf0f89fb9b8773e34e6c21e8e708</anchor>
      <arglist>(const vector_type &amp;point) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>distance</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>aacffe605c2b847161e1e232b74f89081</anchor>
      <arglist>(const vector_type &amp;point) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type</type>
      <name>project</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a278b38f3419153f7bdcb7e04cf8f830c</anchor>
      <arglist>(const vector_type &amp;point) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type</type>
      <name>origin</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a5e1e2847a035c2ca1ee716e59ab763f8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr scalar_type</type>
      <name>signed_distance</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a46032d29a79d0f4e239c3c331783c733</anchor>
      <arglist>(const plane &amp;p, const vector_type &amp;point) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr scalar_type</type>
      <name>distance</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>af0831c4724a7948d3bb9a1f212e6a530</anchor>
      <arglist>(const plane &amp;p, const vector_type &amp;point) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector_type</type>
      <name>project</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a52a7c3d8492dec7e675ddbce471e0c65</anchor>
      <arglist>(const plane &amp;p, const vector_type &amp;point) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector_type</type>
      <name>origin</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>af38b322e72fd58e2ad82af2b40783fe7</anchor>
      <arglist>(const plane &amp;p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>contains</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a0cac5c4810799635509c6c81c1a46a0d</anchor>
      <arglist>(const vector_type &amp;point) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>contains</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a7317470da577b714f161efd8b77538de</anchor>
      <arglist>(const plane &amp;p, const vector_type &amp;point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a4030a437b43210003cd9e6b7a5bf0746</anchor>
      <arglist>(const line_segment&lt; scalar_type &gt; &amp;seg) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a1d71a75ce5543a0a4a5abc8d258c1ef9</anchor>
      <arglist>(const bounding_box&lt; scalar_type &gt; &amp;bb) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>ae8557edd5d516b5ef10cc79f8954b82b</anchor>
      <arglist>(const plane &amp;p, const line_segment&lt; scalar_type &gt; &amp;seg) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a4e9f367c8d12193247c5bbef139b7ba7</anchor>
      <arglist>(const plane &amp;p, const bounding_box&lt; scalar_type &gt; &amp;bb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr plane &amp;</type>
      <name>transform</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a0858b3bacc7c8935d9c93906f78fe3fa</anchor>
      <arglist>(const matrix&lt; scalar_type, 4, 4 &gt; &amp;tx) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr plane</type>
      <name>transform</name>
      <anchorfile>structmuu_1_1plane.html</anchorfile>
      <anchor>a9a39a48d4772a6a25adda404862e4538</anchor>
      <arglist>(const plane &amp;p, const matrix&lt; scalar_type, 4, 4 &gt; &amp;tx) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::pointer_traits&lt; muu::tagged_ptr&lt; T, MinAlign &gt; &gt;</name>
    <filename>structstd_1_1pointer__traits_3_01muu_1_1tagged__ptr_3_01_t_00_01_min_align_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <templarg>size_t MinAlign</templarg>
  </compound>
  <compound kind="struct">
    <name>muu::quaternion</name>
    <filename>structmuu_1_1quaternion.html</filename>
    <templarg>typename Scalar</templarg>
    <member kind="typedef">
      <type>Scalar</type>
      <name>scalar_type</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a3e98bb4b06ea6527ae03261a20971647</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; scalar_type, 3 &gt;</type>
      <name>vector_type</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a6f37d9dfd591c57a0e51174a983adbc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>axis_angle&lt; scalar_type &gt;</type>
      <name>axis_angle_type</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a433fabbb2d4a6738c6647201f3823b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>euler_angles&lt; scalar_type &gt;</type>
      <name>euler_type</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>aa6b8cf1d84b6f1f72f02f5b9dbb77841</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::constants&lt; quaternion &gt;</type>
      <name>constants</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>abb4291dbb6fcf83f5ef35478d490bc19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>quaternion</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a5e662b4b9fd295ecd30de5fdb13befab</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>quaternion</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>aa5bd5e7afa937df16bd84807b5305545</anchor>
      <arglist>(const quaternion &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr quaternion &amp;</type>
      <name>operator=</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>ad2de42de614cd79e074757bf9ab06f13</anchor>
      <arglist>(const quaternion &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>quaternion</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a795795744f43d6eeecb97c9af2177f37</anchor>
      <arglist>(scalar_type s, scalar_type vx, scalar_type vy, scalar_type vz) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>quaternion</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>ae6e9f2bb8f383ffe641980edc0f03f18</anchor>
      <arglist>(scalar_type s, const vector_type &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>quaternion</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a300a11619180c4956e2f3d263b044c68</anchor>
      <arglist>(const quaternion&lt; T &gt; &amp;quat) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>quaternion</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a8d005331afbb55af777a756ef4274ce5</anchor>
      <arglist>(const axis_angle_type &amp;aa) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>quaternion</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a14e272d9918ad0e505c600ffb0f41ab5</anchor>
      <arglist>(const euler_type &amp;euler) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>quaternion</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a797d024f715cf35c32a4b89aeecb0ed6</anchor>
      <arglist>(const matrix&lt; scalar_type, 3, 3 &gt; &amp;rot) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>quaternion</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>aed4aa14615616727c9315f8705aca5a1</anchor>
      <arglist>(const matrix&lt; scalar_type, 3, 4 &gt; &amp;rot) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>quaternion</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a73f625542acd4e3a8829ea60c29b60e6</anchor>
      <arglist>(const matrix&lt; scalar_type, 4, 4 &gt; &amp;rot) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>quaternion</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>af3526894b4d0dc8924b9ca19522a84bf</anchor>
      <arglist>(const T &amp;blittable) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const auto &amp;</type>
      <name>get</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a8c727ea4e2ec6e391f0235ee35e7ef64</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>ae9f68c3086d34e6586d342d88b4fa5c5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a4b909979d2823821766f450c6e0414b5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a70f44666c011f25c4173dd74e7585f68</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr quaternion &amp;</type>
      <name>slerp</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a743eba3d0f4a70f284a51d23ea7b9253</anchor>
      <arglist>(const quaternion &amp;target, scalar_type alpha) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr quaternion</type>
      <name>slerp</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>af59dd952c988f03e02998f66a0f07f6f</anchor>
      <arglist>(const quaternion &amp;start, const quaternion &amp;finish, scalar_type alpha) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>scalar_type</type>
      <name>s</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a6c2f0ae2c6add6a837a24026ef5002eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_type</type>
      <name>v</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>ac767617ff07f372a2b4800741adb3f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a2c52228d78821b341654a06267380337</anchor>
      <arglist>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const quaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gaffcaea7f39fc17894285d8221923387e</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga6b8d6921c4f39c5881a7ea6f95f33392</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q1, const quaternion&lt; T &gt; &amp;q2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga04dec66856dc79915e9130ef3693e9f2</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>normalized</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>aa0566104402180d9b3945e6bae7f3615</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr S</type>
      <name>dot</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>ae3e92df79fe85ed96266ca70d660de8d</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q1, const quaternion&lt; S &gt; &amp;q2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr quaternion&lt; S &gt;</type>
      <name>normalize</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>aa80b85fea6664e3d955f129f9eff4a41</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr quaternion&lt; S &gt;</type>
      <name>slerp</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a8df75ca3a9d767d9132a8bf68c922ea7</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;start, const quaternion&lt; S &gt; &amp;finish, S alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a5de37390d2a3192015c3718c1188c06c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a67fd9e506febc8e47d1f3cf45f753594</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a929b40f3632992486f2d3ff640f1a077</anchor>
      <arglist>(const quaternion &amp;lhs, const quaternion&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>afb67dd853abc2299263f049ddd8fc765</anchor>
      <arglist>(const quaternion &amp;lhs, const quaternion&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a86c52f38dfb67102744b6ae8cf9e3266</anchor>
      <arglist>(const quaternion &amp;q) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>aa73599d073a11e20e83a62a6bff92682</anchor>
      <arglist>(const quaternion &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a6ee8ed2fdcf2fd017677cf99d4acc525</anchor>
      <arglist>(const quaternion&lt; T &gt; &amp;q, epsilon_type&lt; scalar_type, T &gt; epsilon=default_epsilon&lt; scalar_type, T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a28c8b69d105ad42118beafef659da195</anchor>
      <arglist>(scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>aedc3132c8c2ea6a38fe049f2005c7674</anchor>
      <arglist>(const quaternion &amp;q1, const quaternion&lt; T &gt; &amp;q2, epsilon_type&lt; scalar_type, T &gt; epsilon=default_epsilon&lt; scalar_type, T &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a4c2ca504683d3af15443db9bd49adf6a</anchor>
      <arglist>(const quaternion &amp;q, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>dot</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a9a3e3ad75dcc0c7a2ea37a9691c10a4b</anchor>
      <arglist>(const quaternion &amp;q) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr scalar_type</type>
      <name>dot</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>aa7cc3f4bb1b37effed2d84a2a64a9e9c</anchor>
      <arglist>(const quaternion &amp;q1, const quaternion &amp;q2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr quaternion &amp;</type>
      <name>normalize</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a36aa1796676b0c19ee1bf7cc865b015b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>normalized</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a1ce28a44e301349333106cc868529945</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr quaternion</type>
      <name>normalize</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>ac7c2a825862798bdf28f8d36ece6a49b</anchor>
      <arglist>(const quaternion &amp;q) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>normalized</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a423f11901b4166e38166c0e4027f58b6</anchor>
      <arglist>(const quaternion &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr quaternion</type>
      <name>conjugate</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a87a9219ff001bff34a40651cdb04da0c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr quaternion</type>
      <name>conjugate</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>afffd73b1d0225fa2a67e031c415f8522</anchor>
      <arglist>(const quaternion &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr axis_angle_type</type>
      <name>to_axis_angle</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>ab607b0f34dd2812a2515e810acbee99f</anchor>
      <arglist>(bool shortest_path=true) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr euler_type</type>
      <name>to_euler</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>ac92ca68ed0a4f9c79e834bb9317ff658</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr quaternion</type>
      <name>from_axis_angle</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>aada2e201cd70d1ff27897a1b13a8e0ac</anchor>
      <arglist>(const vector_type &amp;axis, scalar_type angle) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr quaternion</type>
      <name>from_axis_angle</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>aebdbf2ff42efa947d0b90ddfd258cf2a</anchor>
      <arglist>(const axis_angle_type &amp;aa) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr axis_angle_type</type>
      <name>to_axis_angle</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a7f732196d41df8c12384c0aefc6b84c5</anchor>
      <arglist>(const quaternion &amp;quat, bool shortest_path=true) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr quaternion</type>
      <name>from_euler</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>aba10b60ca039010903016a081fcdc17a</anchor>
      <arglist>(scalar_type yaw, scalar_type pitch, scalar_type roll) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr quaternion</type>
      <name>from_euler</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a8010b6ef8fd271c00b3ccb9ee09394d7</anchor>
      <arglist>(const euler_type &amp;euler) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr euler_type</type>
      <name>to_euler</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a09849b661edfd74a2b3123251c2b9985</anchor>
      <arglist>(const quaternion &amp;q) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr quaternion</type>
      <name>from_rotation</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>ae98f818d1da37d019c6c6d1f536ec2c0</anchor>
      <arglist>(const vector_type &amp;from, const vector_type &amp;to) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr quaternion</type>
      <name>from_rotation</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a25a16391d71524e9afbb63b85e9a9ab5</anchor>
      <arglist>(const matrix&lt; Scalar, 3, 3 &gt; &amp;rot) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr quaternion</type>
      <name>from_rotation</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a0ef2795375e5593b8eeb48c6f0a2a179</anchor>
      <arglist>(const matrix&lt; Scalar, 3, 4 &gt; &amp;rot) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr quaternion</type>
      <name>from_rotation</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>ab8e36297fa78e45c097b7cb75d530a14</anchor>
      <arglist>(const matrix&lt; Scalar, 4, 4 &gt; &amp;rot) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr quaternion &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a52287b5c0a87601e82bd0ccd7413d158</anchor>
      <arglist>(const quaternion &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr quaternion &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a011d2224aa4d008c13b328cfa81823ed</anchor>
      <arglist>(scalar_type rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend quaternion</type>
      <name>operator*</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a86c6d98f26d7cee4f66fb9138785e41b</anchor>
      <arglist>(const quaternion &amp;lhs, const quaternion &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend vector_type</type>
      <name>operator*</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>ac2e34ff956e86a2a85aacf99cd2221fc</anchor>
      <arglist>(const quaternion &amp;lhs, const vector_type &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend vector_type</type>
      <name>operator*</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a789b2466d90c6b58ab53c9b81f961b6d</anchor>
      <arglist>(const vector_type &amp;lhs, const quaternion &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend quaternion</type>
      <name>operator*</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>a2374f94da554459d8dbe786328d81cc1</anchor>
      <arglist>(const quaternion &amp;lhs, scalar_type rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend quaternion</type>
      <name>operator*</name>
      <anchorfile>structmuu_1_1quaternion.html</anchorfile>
      <anchor>abf36ca1a9fddb8cce1e5ab4a4983b5e4</anchor>
      <arglist>(scalar_type lhs, const quaternion &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::sat_tester</name>
    <filename>structmuu_1_1sat__tester.html</filename>
    <templarg>typename Scalar</templarg>
    <templarg>size_t Dimensions</templarg>
    <member kind="typedef">
      <type>Scalar</type>
      <name>scalar_type</name>
      <anchorfile>structmuu_1_1sat__tester.html</anchorfile>
      <anchor>a42a8df0ee91aa69281300a6dfcc7346f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; scalar_type, Dimensions &gt;</type>
      <name>vector_type</name>
      <anchorfile>structmuu_1_1sat__tester.html</anchorfile>
      <anchor>abfe6b1b2608453df1b1e30db8238d54d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr sat_tester &amp;</type>
      <name>reset</name>
      <anchorfile>structmuu_1_1sat__tester.html</anchorfile>
      <anchor>af898e107afb627dbee4a8d077bb7f596</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr sat_tester &amp;</type>
      <name>add</name>
      <anchorfile>structmuu_1_1sat__tester.html</anchorfile>
      <anchor>a2cec6985184700e7dcc340d4adb14fe6</anchor>
      <arglist>(const vector_type &amp;axis, const vector_type &amp;point, const T &amp;... points) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr sat_tester &amp;</type>
      <name>add</name>
      <anchorfile>structmuu_1_1sat__tester.html</anchorfile>
      <anchor>ad00a843d8e594a30910546f6ec90ee6b</anchor>
      <arglist>(index_tag&lt; Dimension &gt;, const vector_type &amp;point, const T &amp;... points) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr sat_tester &amp;</type>
      <name>add</name>
      <anchorfile>structmuu_1_1sat__tester.html</anchorfile>
      <anchor>a1a0219d35e6c87199222c6419fc1ec8a</anchor>
      <arglist>(const vector_type &amp;axis, const vector_type(&amp;points)[N]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr sat_tester &amp;</type>
      <name>add</name>
      <anchorfile>structmuu_1_1sat__tester.html</anchorfile>
      <anchor>ab20bddde12b773cc249047d2b4f72bb4</anchor>
      <arglist>(const vector_type &amp;axis, const vector_type *begin, const vector_type *end) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>sat_tester</name>
      <anchorfile>structmuu_1_1sat__tester.html</anchorfile>
      <anchor>aa8a98e0c73f9cce1b1674bdb5369aa33</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>sat_tester</name>
      <anchorfile>structmuu_1_1sat__tester.html</anchorfile>
      <anchor>a0d841c79e3c63317a7385eecaf502965</anchor>
      <arglist>(scalar_type min_max) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>sat_tester</name>
      <anchorfile>structmuu_1_1sat__tester.html</anchorfile>
      <anchor>ae12573e37f4ca2ad8c7018b1af2d787a</anchor>
      <arglist>(const vector_type &amp;axis, const vector_type &amp;point, const T &amp;... points) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>sat_tester</name>
      <anchorfile>structmuu_1_1sat__tester.html</anchorfile>
      <anchor>ae856cc1a2dc9aef6ae78a8999a1ff73c</anchor>
      <arglist>(index_tag&lt; Dimension &gt;, const vector_type &amp;point, const T &amp;... points) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>sat_tester</name>
      <anchorfile>structmuu_1_1sat__tester.html</anchorfile>
      <anchor>a8d8797d5f5917decc8c1fdc7a11579c6</anchor>
      <arglist>(const vector_type &amp;axis, const vector_type(&amp;points)[N]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>structmuu_1_1sat__tester.html</anchorfile>
      <anchor>a658027e71527669fa50a9ba0c3b0f26a</anchor>
      <arglist>(scalar_type val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>structmuu_1_1sat__tester.html</anchorfile>
      <anchor>afed6ab3cda96151c8b1db9bdda54a3df</anchor>
      <arglist>(scalar_type min_val, scalar_type max_val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>structmuu_1_1sat__tester.html</anchorfile>
      <anchor>a7424a2e1bc685cfd212c9194e5c0ff46</anchor>
      <arglist>(const sat_tester &amp;other) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>scalar_type</type>
      <name>min</name>
      <anchorfile>structmuu_1_1sat__tester.html</anchorfile>
      <anchor>a37a7d00bef9e0ab19e9196e147b93bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scalar_type</type>
      <name>max</name>
      <anchorfile>structmuu_1_1sat__tester.html</anchorfile>
      <anchor>a86aacef81d6300deff8b39a1f1a1e9a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>dimensions</name>
      <anchorfile>structmuu_1_1sat__tester.html</anchorfile>
      <anchor>a86367d669564cc8efcb23cb764afd4c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>muu::scope_fail</name>
    <filename>classmuu_1_1scope__fail.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>scope_fail</name>
      <anchorfile>classmuu_1_1scope__fail.html</anchorfile>
      <anchor>af92c54aec156f11a324d787b880ad83a</anchor>
      <arglist>(U &amp;&amp;func) noexcept(std::is_nothrow_constructible_v&lt; base, U &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dismiss</name>
      <anchorfile>classmuu_1_1scope__fail.html</anchorfile>
      <anchor>a4247d44d5ad613d6fb362532b83161e5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dismissed</name>
      <anchorfile>classmuu_1_1scope__fail.html</anchorfile>
      <anchor>abc9fd59bd235069a7464955b292fe243</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>muu::scope_guard</name>
    <filename>classmuu_1_1scope__guard.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>scope_guard</name>
      <anchorfile>classmuu_1_1scope__guard.html</anchorfile>
      <anchor>a4e8e12e25f054486d8b3428de65a037c</anchor>
      <arglist>(U &amp;&amp;func) noexcept(std::is_nothrow_constructible_v&lt; base, U &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dismiss</name>
      <anchorfile>classmuu_1_1scope__guard.html</anchorfile>
      <anchor>a44879b040554411653acd5b47b57de96</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dismissed</name>
      <anchorfile>classmuu_1_1scope__guard.html</anchorfile>
      <anchor>ad0ec67f5b252e11dd2e7c0c68b5620ca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>muu::scope_success</name>
    <filename>classmuu_1_1scope__success.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>scope_success</name>
      <anchorfile>classmuu_1_1scope__success.html</anchorfile>
      <anchor>aea5c38c55b94d464b36a6a215c03c9b3</anchor>
      <arglist>(U &amp;&amp;func) noexcept(std::is_nothrow_constructible_v&lt; base, U &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dismiss</name>
      <anchorfile>classmuu_1_1scope__success.html</anchorfile>
      <anchor>a37f89b718e115d959e72d3903038574b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dismissed</name>
      <anchorfile>classmuu_1_1scope__success.html</anchorfile>
      <anchor>a0ad4eaad61953aafcb0ad3506518f238</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>muu::sha1</name>
    <filename>classmuu_1_1sha1.html</filename>
    <member kind="function">
      <type></type>
      <name>sha1</name>
      <anchorfile>classmuu_1_1sha1.html</anchorfile>
      <anchor>a9d150620de9ae087a42b9d49e37b0abd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>sha1 &amp;</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1sha1.html</anchorfile>
      <anchor>ac039bd5671573a6ec0f61e1101286e20</anchor>
      <arglist>(uint8_t byte) noexcept</arglist>
    </member>
    <member kind="function">
      <type>sha1 &amp;</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1sha1.html</anchorfile>
      <anchor>a2cfc2f933f53af2ba83d2b85daf3f0b6</anchor>
      <arglist>(std::byte byte) noexcept</arglist>
    </member>
    <member kind="function">
      <type>sha1 &amp;</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1sha1.html</anchorfile>
      <anchor>a03f22b6388d84cc768d060c8316afc3b</anchor>
      <arglist>(const void *data, size_t size) noexcept</arglist>
    </member>
    <member kind="function">
      <type>sha1 &amp;</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1sha1.html</anchorfile>
      <anchor>ac9ed2ee364a7d0a3cf32af0fe292d6cb</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>sha1 &amp;</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1sha1.html</anchorfile>
      <anchor>a0dfb107c3588a2cf043122aaa4293cc2</anchor>
      <arglist>(std::wstring_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>sha1 &amp;</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1sha1.html</anchorfile>
      <anchor>a663e577e76f1bfca07b242b7e6d8b7cb</anchor>
      <arglist>(std::u32string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>sha1 &amp;</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1sha1.html</anchorfile>
      <anchor>a38a9f1fefb6706abd2a6b17575706249</anchor>
      <arglist>(std::u16string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>sha1 &amp;</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1sha1.html</anchorfile>
      <anchor>a0c0fa278c442a6e169d8ca9007e4e3d3</anchor>
      <arglist>(std::u8string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>sha1 &amp;</type>
      <name>finish</name>
      <anchorfile>classmuu_1_1sha1.html</anchorfile>
      <anchor>a78d696ccc194131132ffdc5792571415</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const hash_type &amp;</type>
      <name>value</name>
      <anchorfile>classmuu_1_1sha1.html</anchorfile>
      <anchor>a653ab6f85c2ce69355b5e45e3c7edca6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmuu_1_1sha1.html</anchorfile>
      <anchor>a830b5f6209cf1b5f958fe56c0d5953eb</anchor>
      <arglist>(std::basic_ostream&lt; Char, Traits &gt; &amp;lhs, const sha1 &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>muu::span</name>
    <filename>classmuu_1_1span.html</filename>
    <templarg>typename T</templarg>
    <templarg>size_t Extent</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>ac92b58600d3f008c78cdddd953fdf62d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; T &gt;</type>
      <name>value_type</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a508ddae2a2f2a96fe25bd3854e104b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a3cd9478023baf81463edcff1a84b3de4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>ac14cfafd07a93294fcc337f53dd344bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::add_pointer_t&lt; T &gt;</type>
      <name>pointer</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a2ecf9ad0b0fe4ac9e97b6085d8899459</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::add_pointer_t&lt; std::add_const_t&lt; T &gt; &gt;</type>
      <name>const_pointer</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>ac49c7cf65564e7a9730a26a423c8e92a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::add_lvalue_reference_t&lt; T &gt;</type>
      <name>reference</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a24e731f2ae120051119afabd76154bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::add_lvalue_reference_t&lt; std::add_const_t&lt; T &gt; &gt;</type>
      <name>const_reference</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>ab15436b2672ae1ee241a02c44610da0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointer</type>
      <name>iterator</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>ae35fb784f6a296753c0c2ca136eef2e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>af594aec84276bdb24a26ab33fdd3f5e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>abab13f0fe05b97351c1c513678ce7930</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a1c9b392a0e11f762151432fa40f20444</anchor>
      <arglist>(It first, size_t count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>aba4ea951565d50e0d3aac8d1eee08e10</anchor>
      <arglist>(It first, End last) noexcept(noexcept(last - first))</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a4e8db51e6442462ecc50ff5c7e9228fd</anchor>
      <arglist>(element_type(&amp;arr)[N]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a833777c44fb3c2e8f193006f43724b25</anchor>
      <arglist>(std::array&lt; U, N &gt; &amp;arr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a3507165435a2f4a0dc4bac59cb0a8fa4</anchor>
      <arglist>(const std::array&lt; U, N &gt; &amp;arr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a734ebde437bf4f428d31ed4480e13b03</anchor>
      <arglist>(const span&lt; U, E &gt; &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a191e5406eec3ef665f7cba40e8af9925</anchor>
      <arglist>(const span &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr span &amp;</type>
      <name>operator=</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a28055e4265412650cc185f1285002848</anchor>
      <arglist>(const span &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_t</type>
      <name>size</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>aaf4ace4a250781ff1810c51989a2cc6e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_t</type>
      <name>size_bytes</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a365d47c0cfab280d98fbf4f9132029b9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>aa4b62a3e6650bfe2e56c7afc26539831</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>front</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>af84aebf2e93288fcab28889e44bd0f70</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>back</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a2712445129446fb432c02f82d6f5a993</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>acd02792eb9b093f69cebaeef2cf087bd</anchor>
      <arglist>(size_t idx) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a9365aafaba0d08b0a3d29cc7276a4d6f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr span&lt; element_type, Count &gt;</type>
      <name>first</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a6970b7c81046a494a441d41f823d5ed2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr span&lt; element_type &gt;</type>
      <name>first</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>acd112446e0c757976b2d083f0edbe283</anchor>
      <arglist>(size_t count) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr span&lt; element_type, Count &gt;</type>
      <name>last</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a2028f89508be8380d6b9298959f80848</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr span&lt; element_type &gt;</type>
      <name>last</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a78108eb5705e17d05d5f9400ded8c369</anchor>
      <arglist>(size_t count) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>subspan</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a262d1958d13b5e64ad99dabdd3769f2d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr span&lt; element_type &gt;</type>
      <name>subspan</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>ae56bfb76dd7b371035d0f18a6c357121</anchor>
      <arglist>(size_t offset, size_t count=dynamic_extent) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>ae35e9976ec1a3acfa41503078b6a53cb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a52f4378629db27673d633deb7c645de5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a167648be83a620b370e89745e8adabc6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a74aaa29a2581bf90ecfcf5f9ee70d8c6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>extent</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a98e1fe87f955719f40e1f20cc1b42e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a3317434d7057b280005cd9b5fcc87c5f</anchor>
      <arglist>(const span &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a1693e47e3509f25e3e93a7e3ce11195b</anchor>
      <arglist>(const span &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>af6d1387625f6f699a6003965741f28e0</anchor>
      <arglist>(const span &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>af8581a3d03e16fae11b739a62c7410aa</anchor>
      <arglist>(const span &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>span&lt; const std::byte, impl::as_bytes_extent&lt; T, N &gt; &gt;</type>
      <name>as_bytes</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>gacaa08dc6422b5847e58a7c4ab9557362</anchor>
      <arglist>(span&lt; T, N &gt; s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>span&lt; std::byte, impl::as_bytes_extent&lt; T, N &gt; &gt;</type>
      <name>as_writable_bytes</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>gab6812fcab12e2e24abb7261d0f895fcb</anchor>
      <arglist>(span&lt; T, N &gt; s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>ae35e9976ec1a3acfa41503078b6a53cb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a52f4378629db27673d633deb7c645de5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a167648be83a620b370e89745e8adabc6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a74aaa29a2581bf90ecfcf5f9ee70d8c6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a3317434d7057b280005cd9b5fcc87c5f</anchor>
      <arglist>(const span &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>a1693e47e3509f25e3e93a7e3ce11195b</anchor>
      <arglist>(const span &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>af6d1387625f6f699a6003965741f28e0</anchor>
      <arglist>(const span &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classmuu_1_1span.html</anchorfile>
      <anchor>af8581a3d03e16fae11b739a62c7410aa</anchor>
      <arglist>(const span &amp;s) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>muu::static_string</name>
    <filename>classmuu_1_1static__string.html</filename>
    <templarg>typename Character</templarg>
    <templarg>size_t Length</templarg>
    <member kind="typedef">
      <type>Character</type>
      <name>value_type</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a5d3e7de401ad122618175b155a9c7c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::char_traits&lt; Character &gt;</type>
      <name>traits_type</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a8b0fa2877676f7d3b125c05d39ede32e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Character *</type>
      <name>pointer</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a9b9c1aaa92e22598ac1214a7b0adb7be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Character *</type>
      <name>const_pointer</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a1f006c509283654e43b80533fbe48097</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Character &amp;</type>
      <name>reference</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>af5768f5ac1a28a15e3778eff0e92541d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Character &amp;</type>
      <name>const_reference</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ad1a89bb4b4970d435640dc05c77662f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointer</type>
      <name>iterator</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>acf5fde4d0c2f53c4fd11217220afc771</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_pointer</type>
      <name>const_iterator</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a5b1651a0e29cf54dfea5fe185ba8e2d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a25095615f71b9736b00a2f204700a0c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>adfb48c4c0308f9050aa375ed0adb73d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a45bdb0f11776fd1f2b51468b04297193</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ace6ecfaceb4c2368baef03930d036183</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::basic_string_view&lt; Character &gt;</type>
      <name>view_type</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a72b073a4e8307659f1a3c1e05ec6d47e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>static_string</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>aa7fbc5a19e6a1d81e7168f489b01634f</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>static_string</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a3721a2be5e0d1fd95756a2cfc099a1e1</anchor>
      <arglist>(const static_string &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr static_string &amp;</type>
      <name>operator=</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a1efb98c619a8f8cf292de55d4b277f49</anchor>
      <arglist>(const static_string &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>static_string</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a91429beef953c4f1312dda46db5bee5d</anchor>
      <arglist>(const value_type(&amp;arr)[N]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>static_string</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a26b6e826ed85813131126492a06a1f8d</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>static_string</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a5e413456aa8f66b6104eebe6642f4bd9</anchor>
      <arglist>(const static_string&lt; value_type, Len &gt; &amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>static_string</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a3a348414f2066b9a0435058e8ecf7c07</anchor>
      <arglist>(value_type fill) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>static_string</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a8165991c8f92f944a99a71afb0bb88eb</anchor>
      <arglist>(const value_type *str, index_tag&lt; Len &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>front</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a2a98eca124e8cd977346429d53a538ee</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>back</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a606b51e07ff03a191052bf13f63a630e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>front</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a4b97f82bb6bb41169d69598d22afa41d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>back</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>aa8f90c6f633d94fbe8b535359694d3e3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>get</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>adca8257376a204300f9da20d7c8e248f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>get</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>adce810928840672531fd28f80dce7a11</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a606f3093070af70bf7d1481c753603f7</anchor>
      <arglist>(size_type idx) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>aef01cfe9e73783a20cce59298cda6025</anchor>
      <arglist>(size_type idx) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>aa1b20aaa9da744127a728b9f37df82fa</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ac758f426a63bd6de91b2a59eefcad312</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>c_str</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>aa5b80c1bb6f14ee76f0b45d7e76fe85d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ac95af9b3fa150ac601497391338f5320</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a0f3b16cca4fccb4f357918287b6849d7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a81539ee1fed6898a2b374e608474411d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>length</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a8682e8c22a4e260d2bbe198f5caa15f2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ac37189ccbd02c4d8eb802bcf917c8ca6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a092af58c40cac282f5397641178af8cb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>aeab3cad664903ac8e8836e682e6073a9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a335b8f0a2484cf61294bf508804e8c70</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a5a30da9c07ed8f84032660aed96651ba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cend</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ac35f573ef02a45ab7e23dfc19893310a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>acef28b00a0c95079b9b5aebd3548e350</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a590f211fc7f851baff0504ab475cd7c6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>aa33135af18bb84d771c43b47e8ec29a4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a3f4c5f42068accb60a5bc5269c29f4b9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ad22e17935c2505418386a4afd9c98813</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>adcc044b4eddd95475dadf7453bf90903</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr view_type</type>
      <name>view</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a121b702f9f7d36c7999a05df0441d480</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator view_type</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a365f8d5f334b348c145c1d286ad6fd52</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>substr</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>aa1a599e039beec8f1b432434015497c4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>slice</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ab6d289e4b4f48a97ac8763431b104f61</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>string_length</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ac424f497a3ea0eb69f2b6dd0c38d1dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a7ab4981808fdf69f9546076120f1aa8e</anchor>
      <arglist>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const static_string &amp;str)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a9259f70e1fdc15787582bbe7a1d0cc0d</anchor>
      <arglist>(static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a7bc817a43af26884a257df59aa7305e6</anchor>
      <arglist>(static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a40b161620f5b1433cbc59af1fb3172ae</anchor>
      <arglist>(const static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ad4c3904a07a05f37c6bdac327d1d34cd</anchor>
      <arglist>(const static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>af9da8bc158c30cb74045d6466883b22b</anchor>
      <arglist>(const static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>cend</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a05e85a21ee69cfd38252cdc4c8cf61ad</anchor>
      <arglist>(const static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>afef81aab577cc02043cae88ad6cfa2af</anchor>
      <arglist>(static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>aa5ef58a6dce4bd74d3336f4855b876a1</anchor>
      <arglist>(static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a1c3bcb426405e23ebdc18470259849e8</anchor>
      <arglist>(const static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a5aef08100182f7d1718675f72ceb785e</anchor>
      <arglist>(const static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a2b124a1058101a6bb50113d73858a2e6</anchor>
      <arglist>(const static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a2e6b1a4898a7daf5cb4337a0c6917e7f</anchor>
      <arglist>(const static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend static_string&lt; value_type, Length+Len &gt;</type>
      <name>operator+</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a46c949d05d12af2f0bde724615f30425</anchor>
      <arglist>(const static_string &amp;lhs, const static_string&lt; value_type, Len &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend static_string&lt; value_type, Length+1 &gt;</type>
      <name>operator+</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a4bcdfb71e9e8fc6ded5f011448e15d8b</anchor>
      <arglist>(const static_string &amp;lhs, value_type rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend static_string&lt; value_type, Length+1 &gt;</type>
      <name>operator+</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ab49411c9a14e2f8168f4de1345d68679</anchor>
      <arglist>(value_type lhs, const static_string &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval auto</type>
      <name>operator&quot;&quot;_ss</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ac4b1112aae002fe8962e5e624cdde438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>front</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a2a98eca124e8cd977346429d53a538ee</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>back</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a606b51e07ff03a191052bf13f63a630e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>front</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a4b97f82bb6bb41169d69598d22afa41d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>back</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>aa8f90c6f633d94fbe8b535359694d3e3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>get</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>adca8257376a204300f9da20d7c8e248f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>get</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>adce810928840672531fd28f80dce7a11</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a606f3093070af70bf7d1481c753603f7</anchor>
      <arglist>(size_type idx) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>aef01cfe9e73783a20cce59298cda6025</anchor>
      <arglist>(size_type idx) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>aa1b20aaa9da744127a728b9f37df82fa</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ac758f426a63bd6de91b2a59eefcad312</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>c_str</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>aa5b80c1bb6f14ee76f0b45d7e76fe85d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ac95af9b3fa150ac601497391338f5320</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a0f3b16cca4fccb4f357918287b6849d7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a81539ee1fed6898a2b374e608474411d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>length</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a8682e8c22a4e260d2bbe198f5caa15f2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ac37189ccbd02c4d8eb802bcf917c8ca6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a092af58c40cac282f5397641178af8cb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>aeab3cad664903ac8e8836e682e6073a9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a335b8f0a2484cf61294bf508804e8c70</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a5a30da9c07ed8f84032660aed96651ba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cend</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ac35f573ef02a45ab7e23dfc19893310a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>acef28b00a0c95079b9b5aebd3548e350</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a590f211fc7f851baff0504ab475cd7c6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>aa33135af18bb84d771c43b47e8ec29a4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a3f4c5f42068accb60a5bc5269c29f4b9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ad22e17935c2505418386a4afd9c98813</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>adcc044b4eddd95475dadf7453bf90903</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr view_type</type>
      <name>view</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a121b702f9f7d36c7999a05df0441d480</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator view_type</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a365f8d5f334b348c145c1d286ad6fd52</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>substr</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>aa1a599e039beec8f1b432434015497c4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>slice</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ab6d289e4b4f48a97ac8763431b104f61</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a9c952c0234ebd2eaac91f8801703cd6c</anchor>
      <arglist>(const static_string&lt; value_type, Len &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a3d40d423643ec604ef50eadcfbe4fc4d</anchor>
      <arglist>(const static_string &amp;lhs, const static_string&lt; value_type, Len &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ab6681a6935373e84871bdc7bfa37b6a6</anchor>
      <arglist>(const static_string &amp;lhs, const static_string&lt; value_type, Len &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a9392f851db545972a2a44c070d6c1981</anchor>
      <arglist>(const static_string &amp;lhs, const static_string&lt; value_type, Len &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a2cc4cd0a784f77cf4e25b015f6fd902f</anchor>
      <arglist>(const static_string &amp;lhs, const static_string&lt; value_type, Len &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a06ab9205c067bc722d071c474f2c79a8</anchor>
      <arglist>(const static_string &amp;lhs, const static_string&lt; value_type, Len &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a26bc866313e9002f1f4a88c8ed927cc2</anchor>
      <arglist>(const static_string &amp;lhs, const static_string&lt; value_type, Len &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr int</type>
      <name>compare</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ab90370a7496a730818364b9c2d69fb54</anchor>
      <arglist>(const static_string &amp;lhs, const static_string&lt; value_type, Len &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a9259f70e1fdc15787582bbe7a1d0cc0d</anchor>
      <arglist>(static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a7bc817a43af26884a257df59aa7305e6</anchor>
      <arglist>(static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>begin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a40b161620f5b1433cbc59af1fb3172ae</anchor>
      <arglist>(const static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>end</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ad4c3904a07a05f37c6bdac327d1d34cd</anchor>
      <arglist>(const static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>af9da8bc158c30cb74045d6466883b22b</anchor>
      <arglist>(const static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>cend</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a05e85a21ee69cfd38252cdc4c8cf61ad</anchor>
      <arglist>(const static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>afef81aab577cc02043cae88ad6cfa2af</anchor>
      <arglist>(static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>aa5ef58a6dce4bd74d3336f4855b876a1</anchor>
      <arglist>(static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a1c3bcb426405e23ebdc18470259849e8</anchor>
      <arglist>(const static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a5aef08100182f7d1718675f72ceb785e</anchor>
      <arglist>(const static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a2b124a1058101a6bb50113d73858a2e6</anchor>
      <arglist>(const static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a2e6b1a4898a7daf5cb4337a0c6917e7f</anchor>
      <arglist>(const static_string &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend static_string&lt; value_type, Length+Len &gt;</type>
      <name>operator+</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a46c949d05d12af2f0bde724615f30425</anchor>
      <arglist>(const static_string &amp;lhs, const static_string&lt; value_type, Len &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend static_string&lt; value_type, Length+1 &gt;</type>
      <name>operator+</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>a4bcdfb71e9e8fc6ded5f011448e15d8b</anchor>
      <arglist>(const static_string &amp;lhs, value_type rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend static_string&lt; value_type, Length+1 &gt;</type>
      <name>operator+</name>
      <anchorfile>classmuu_1_1static__string.html</anchorfile>
      <anchor>ab49411c9a14e2f8168f4de1345d68679</anchor>
      <arglist>(value_type lhs, const static_string &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>muu::string_param</name>
    <filename>classmuu_1_1string__param.html</filename>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>ab4689943a50e5709f1a20415c3b13713</anchor>
      <arglist>(T &amp;&amp;string_viewable) noexcept</arglist>
    </member>
    <member kind="function">
      <type>string_param &amp;</type>
      <name>operator=</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a96697ca2a73523ea3b976160c115a7af</anchor>
      <arglist>(string_param &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>af7ba420e863eee51dee1c374da8b1c06</anchor>
      <arglist>(string_param &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a7ac3fd8df057059a4092ac5b43b0ed2f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a6969c40b36ba9f268aa7a1e0796c1322</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a372e9c79d3d58c1dce0d0d9aa3d6cd59</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>owning</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>adf7bc87b6a36f000b08178739299c2ef</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>string_param &amp;</type>
      <name>trim</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a033076fc750cb5530691a073a4cde2f5</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>string_param &amp;&amp;</type>
      <name>trim</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>aad37b10944128ca724522cac418d2e14</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a45ee522d53e9174b8303a0e236a90c2c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a947dc0d89465ce9595f743fcb7a3df49</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>aca3ec2d295a103c431553e8a12e61967</anchor>
      <arglist>(const std::string &amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a51bc9be1d2969af9a94b3742403fc40b</anchor>
      <arglist>(const char *str, size_t len) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a73994f27626d50f0ceb314ed5d2aa5f8</anchor>
      <arglist>(const char *str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a0b36597518c46b18f672354b0c2d8491</anchor>
      <arglist>(std::string &amp;&amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>ab8a3b240052b1376d842749e0f0fa834</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a4f71d4a8656f788c1db358741f355d8d</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a7491415027cbf9e1bd4c57770b7bef30</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a47263d191c8ac4f82bf000e2ff604b2c</anchor>
      <arglist>(std::wstring_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a9ec651bea653d82f95c3da94d0043f05</anchor>
      <arglist>(const std::wstring &amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a5f723ec13eee392885b4ebd28cc13e14</anchor>
      <arglist>(const wchar_t *str, size_t len) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a996af6661267f0ce4a308782158fbe41</anchor>
      <arglist>(const wchar_t *str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a43789e7cb827de7eed36ef94629c97b4</anchor>
      <arglist>(std::wstring &amp;&amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::wstring_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a707324fb5b730b2e097ce4a57a24e17a</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::wstring_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a0af7002d6ec02771b164893f13c15e95</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::wstring</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a3b0a8b559b388b7639421d8d1c6f9e7c</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>abaed4a4d61c2a284c13a1dfd43c9d1e6</anchor>
      <arglist>(std::u16string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>ad5972133ebb58d22b17d8278803baaa4</anchor>
      <arglist>(const std::u16string &amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>acb12ea03827c108fa04f4da0c0086df6</anchor>
      <arglist>(const char16_t *str, size_t len) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a5df3051ce641008a1dce77a690816477</anchor>
      <arglist>(const char16_t *str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a33e302b2384c90faac80721602e39a20</anchor>
      <arglist>(std::u16string &amp;&amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::u16string_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a5698df2f1d67d91102debf0072154564</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::u16string_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a062784eca5cf871a64db8b2bf9fc3db7</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::u16string</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a8e707e861f0ecf68210dfb480c1bdcc6</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>adaeae8143fd27adb3fe39d9aa8c579fc</anchor>
      <arglist>(std::u32string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>af5b86f00342794ee9017b0feb6185399</anchor>
      <arglist>(const std::u32string &amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>ad8479d9fac040ff5fdbc50d838f716ec</anchor>
      <arglist>(const char32_t *str, size_t len) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a8dadcc88532a11b7a940692e24c33890</anchor>
      <arglist>(const char32_t *str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a41b0a3b4021b83d92fa4f6449f64d145</anchor>
      <arglist>(std::u32string &amp;&amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::u32string_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a5b95213f410f5e332e86d48a127563b2</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::u32string_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>af8935a227ec8b1b5c312a453d6e31b82</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::u32string</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a6180bfdf8684cde23ef746ea578d4f0b</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a6cb3008bf7e63624d0b5a97df08542bf</anchor>
      <arglist>(std::u8string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a6f8325b4dcab95cf5952a2f0c26e421d</anchor>
      <arglist>(const std::u8string &amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>ac42a74136f7ba33fa3c193cfc335de53</anchor>
      <arglist>(const char8_t *str, size_t len) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>aa11a737fef1aa5863ccd6c44c356a8e3</anchor>
      <arglist>(const char8_t *str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>ac2ffb5484cad4beaee18d7bc61b64139</anchor>
      <arglist>(std::u8string &amp;&amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::u8string_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a7a87b1017b075114b85c52901bb5c765</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::u8string_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a219e28a7cba0d8a0fb304629e5e2c1db</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::u8string</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a0a9a8f1540df8298002d6b539a16df03</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>ab2a0ced7bf560eb039e5c504b25e6183</anchor>
      <arglist>(std::basic_ostream&lt; Char, Traits &gt; &amp;lhs, const string_param &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a45ee522d53e9174b8303a0e236a90c2c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a947dc0d89465ce9595f743fcb7a3df49</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>aca3ec2d295a103c431553e8a12e61967</anchor>
      <arglist>(const std::string &amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a51bc9be1d2969af9a94b3742403fc40b</anchor>
      <arglist>(const char *str, size_t len) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a73994f27626d50f0ceb314ed5d2aa5f8</anchor>
      <arglist>(const char *str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a0b36597518c46b18f672354b0c2d8491</anchor>
      <arglist>(std::string &amp;&amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>ab8a3b240052b1376d842749e0f0fa834</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a4f71d4a8656f788c1db358741f355d8d</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a7491415027cbf9e1bd4c57770b7bef30</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a47263d191c8ac4f82bf000e2ff604b2c</anchor>
      <arglist>(std::wstring_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a9ec651bea653d82f95c3da94d0043f05</anchor>
      <arglist>(const std::wstring &amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a5f723ec13eee392885b4ebd28cc13e14</anchor>
      <arglist>(const wchar_t *str, size_t len) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a996af6661267f0ce4a308782158fbe41</anchor>
      <arglist>(const wchar_t *str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a43789e7cb827de7eed36ef94629c97b4</anchor>
      <arglist>(std::wstring &amp;&amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::wstring_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a707324fb5b730b2e097ce4a57a24e17a</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::wstring_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a0af7002d6ec02771b164893f13c15e95</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::wstring</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a3b0a8b559b388b7639421d8d1c6f9e7c</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>abaed4a4d61c2a284c13a1dfd43c9d1e6</anchor>
      <arglist>(std::u16string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>ad5972133ebb58d22b17d8278803baaa4</anchor>
      <arglist>(const std::u16string &amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>acb12ea03827c108fa04f4da0c0086df6</anchor>
      <arglist>(const char16_t *str, size_t len) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a5df3051ce641008a1dce77a690816477</anchor>
      <arglist>(const char16_t *str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a33e302b2384c90faac80721602e39a20</anchor>
      <arglist>(std::u16string &amp;&amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::u16string_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a5698df2f1d67d91102debf0072154564</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::u16string_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a062784eca5cf871a64db8b2bf9fc3db7</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::u16string</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a8e707e861f0ecf68210dfb480c1bdcc6</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>adaeae8143fd27adb3fe39d9aa8c579fc</anchor>
      <arglist>(std::u32string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>af5b86f00342794ee9017b0feb6185399</anchor>
      <arglist>(const std::u32string &amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>ad8479d9fac040ff5fdbc50d838f716ec</anchor>
      <arglist>(const char32_t *str, size_t len) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a8dadcc88532a11b7a940692e24c33890</anchor>
      <arglist>(const char32_t *str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a41b0a3b4021b83d92fa4f6449f64d145</anchor>
      <arglist>(std::u32string &amp;&amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::u32string_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a5b95213f410f5e332e86d48a127563b2</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::u32string_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>af8935a227ec8b1b5c312a453d6e31b82</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::u32string</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a6180bfdf8684cde23ef746ea578d4f0b</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a6cb3008bf7e63624d0b5a97df08542bf</anchor>
      <arglist>(std::u8string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a6f8325b4dcab95cf5952a2f0c26e421d</anchor>
      <arglist>(const std::u8string &amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>ac42a74136f7ba33fa3c193cfc335de53</anchor>
      <arglist>(const char8_t *str, size_t len) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>aa11a737fef1aa5863ccd6c44c356a8e3</anchor>
      <arglist>(const char8_t *str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_param</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>ac2ffb5484cad4beaee18d7bc61b64139</anchor>
      <arglist>(std::u8string &amp;&amp;str) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::u8string_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a7a87b1017b075114b85c52901bb5c765</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::u8string_view</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a219e28a7cba0d8a0fb304629e5e2c1db</anchor>
      <arglist>() const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::u8string</name>
      <anchorfile>classmuu_1_1string__param.html</anchorfile>
      <anchor>a0a9a8f1540df8298002d6b539a16df03</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::strong_typedef</name>
    <filename>structmuu_1_1strong__typedef.html</filename>
    <templarg>typename ValueType</templarg>
    <templarg>typename Tag</templarg>
    <templarg>template&lt; typename &gt; typename... Traits</templarg>
    <member kind="typedef">
      <type>ValueType</type>
      <name>value_type</name>
      <anchorfile>structmuu_1_1strong__typedef.html</anchorfile>
      <anchor>a26c7bd7a2caf1f43d72a55bf2c6fec4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>strong_typedef</name>
      <anchorfile>structmuu_1_1strong__typedef.html</anchorfile>
      <anchor>ad0712871a5e6ee370d0629de1dfdb487</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>strong_typedef</name>
      <anchorfile>structmuu_1_1strong__typedef.html</anchorfile>
      <anchor>a1e8459918ead7bb4391c8fcf789fce85</anchor>
      <arglist>(const strong_typedef &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>strong_typedef</name>
      <anchorfile>structmuu_1_1strong__typedef.html</anchorfile>
      <anchor>a09a80bbb74fd34ab3267d3d8830fc2d5</anchor>
      <arglist>(strong_typedef &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>strong_typedef &amp;</type>
      <name>operator=</name>
      <anchorfile>structmuu_1_1strong__typedef.html</anchorfile>
      <anchor>a45ec076a4caa9598ee7841948b5baf5c</anchor>
      <arglist>(const strong_typedef &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>strong_typedef &amp;</type>
      <name>operator=</name>
      <anchorfile>structmuu_1_1strong__typedef.html</anchorfile>
      <anchor>a0ff05ef3e1cc407b2a7f76eb3c400f34</anchor>
      <arglist>(strong_typedef &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>strong_typedef</name>
      <anchorfile>structmuu_1_1strong__typedef.html</anchorfile>
      <anchor>a5fb7e66378666e345675dbbde2b33f14</anchor>
      <arglist>(const value_type &amp;val) noexcept(std::is_nothrow_copy_constructible_v&lt; value_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>strong_typedef</name>
      <anchorfile>structmuu_1_1strong__typedef.html</anchorfile>
      <anchor>a794bef4669d3e752742a663ba118547f</anchor>
      <arglist>(value_type &amp;&amp;val) noexcept(std::is_nothrow_move_constructible_v&lt; value_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>strong_typedef</name>
      <anchorfile>structmuu_1_1strong__typedef.html</anchorfile>
      <anchor>a995a04e4a8782bfced69213258d89354</anchor>
      <arglist>(value_type val) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>structmuu_1_1strong__typedef.html</anchorfile>
      <anchor>a278bfc333850d5f772308cc2faf71150</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>muu::tagged_ptr</name>
    <filename>classmuu_1_1tagged__ptr.html</filename>
    <templarg>typename T</templarg>
    <templarg>size_t MinAlign</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>af7dad5fa9d70aef72a0ef9a6e96a7493</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::add_pointer_t&lt; T &gt;</type>
      <name>pointer</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a7247bfb909220ebd53747353103a1001</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::add_pointer_t&lt; add_const&lt; T &gt; &gt;</type>
      <name>const_pointer</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>aa8e95e16638a31de7d053c2e8d8a14dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename tptr::tag_type</type>
      <name>tag_type</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a3ba4cecae88ae7af97ef65dcb7539eb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>tagged_ptr</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a2240737b6daa475ef00fb96b9098b64b</anchor>
      <arglist>(pointer value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>tagged_ptr</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>ad19441f70ced31f04dd87e5a2f9fc08d</anchor>
      <arglist>(pointer value, const U &amp;tag_value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>tagged_ptr</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a8b0b113a4b87dbf8036226a479fc528e</anchor>
      <arglist>(nullptr_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tagged_ptr</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>ae5d5e35d9df585271b004a0c65d6f4e7</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tagged_ptr</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a72b3e835a295d8a858c48215d9a15572</anchor>
      <arglist>(const tagged_ptr &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>tagged_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a41f0b0c1410e64b178f39eed002f948d</anchor>
      <arglist>(const tagged_ptr &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~tagged_ptr</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>abab6df8dbd3a73b6d276dcbc3fa70a9b</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr tagged_ptr &amp;</type>
      <name>reset</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a089961cf8dfe40c86b88ac2e305d1128</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr tagged_ptr &amp;</type>
      <name>reset</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>adb067dd24a45dda382300c5c74fc945e</anchor>
      <arglist>(pointer value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr tagged_ptr &amp;</type>
      <name>reset</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>afbb60e5a3540809e5b5ff62e844f8acd</anchor>
      <arglist>(pointer value, const U &amp;tag_value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>ptr</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a1ad9a0886e811625d49fd15eacdc7482</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>get</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a534b6c3c5ebf17533d825e0e6450eb56</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator pointer</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>afe0573f5cc1c73c4934e1b7c1df16627</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>operator()</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a9120e621b5353e9266c3d141ac74f8f8</anchor>
      <arglist>(U &amp;&amp;... args) const noexcept(std::is_nothrow_invocable_v&lt; element_type, U &amp;&amp;... &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr element_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>ac469554751276264c106e1e34020436b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>ab44a4528f2d077614aa5a40013ead76d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr tagged_ptr &amp;</type>
      <name>ptr</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a7992fc787e3501ebb4b332bfcf9b05eb</anchor>
      <arglist>(pointer value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr tagged_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a2a894a89e164d6bff75990cbcc64d53f</anchor>
      <arglist>(pointer rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr tagged_ptr &amp;</type>
      <name>clear_ptr</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>ad8fdfd5c7b75746cfe36363de460a344</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr U</type>
      <name>tag</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a0d3339deeddb5db29e29160db710bab2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr tagged_ptr &amp;</type>
      <name>tag</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a89bc66a45123a8f3a42b40672592505b</anchor>
      <arglist>(const U &amp;tag_value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>tag_bit</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>ac4b316ed78f483aa31b9d8cb917681bd</anchor>
      <arglist>(size_t tag_bit_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr tagged_ptr &amp;</type>
      <name>tag_bit</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>aea3e98b1f44b9c854439fd8a49a3f473</anchor>
      <arglist>(size_t tag_bit_index, bool val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr tagged_ptr &amp;</type>
      <name>clear_tag</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>aaf3b86c86cafc8f157348220c33f6def</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a5b08ed11193638bf054741ecdb8480d0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>minimum_alignment</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a9d6100f8416398418017c6dd54698ba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>tag_bit_count</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>ae5fe8e1897b9fefb22165b720d2c7568</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr tag_type</type>
      <name>max_tag</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a9c9e9fb3be864a53cc192b6f75aa7ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a5be784855e42b6c3dca5bc5922fd4d76</anchor>
      <arglist>(tagged_ptr lhs, const_pointer rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a6c3f4744679870e0a9012a34b75a186a</anchor>
      <arglist>(tagged_ptr lhs, const_pointer rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a94d219933714bae5327dabc37bdeea69</anchor>
      <arglist>(const_pointer lhs, tagged_ptr rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a08031ff5015c8f8b15c28eb13315bcde</anchor>
      <arglist>(const_pointer lhs, tagged_ptr rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a2234528d4e4f8d4fb50cca33d9bef211</anchor>
      <arglist>(tagged_ptr lhs, tagged_ptr rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classmuu_1_1tagged__ptr.html</anchorfile>
      <anchor>a161f3db32391e02ddf8e6f00837fa5c2</anchor>
      <arglist>(tagged_ptr lhs, tagged_ptr rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>muu::thread_pool</name>
    <filename>classmuu_1_1thread__pool.html</filename>
    <member kind="function">
      <type></type>
      <name>thread_pool</name>
      <anchorfile>classmuu_1_1thread__pool.html</anchorfile>
      <anchor>a816fa41cb2488dfe46f29799b32d76b6</anchor>
      <arglist>(size_t worker_count=0, size_t task_queue_size=0, string_param name={}, generic_allocator *allocator=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>thread_pool</name>
      <anchorfile>classmuu_1_1thread__pool.html</anchorfile>
      <anchor>aefe68216d89fa74fdf0a0ac446503e3f</anchor>
      <arglist>(string_param name, generic_allocator *allocator=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>thread_pool</name>
      <anchorfile>classmuu_1_1thread__pool.html</anchorfile>
      <anchor>a55c8d3fccd135b97ae4d20a8504d20a1</anchor>
      <arglist>(thread_pool &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>thread_pool &amp;</type>
      <name>operator=</name>
      <anchorfile>classmuu_1_1thread__pool.html</anchorfile>
      <anchor>ae8ccb244ff4bc2db327711c4dcbc9174</anchor>
      <arglist>(thread_pool &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~thread_pool</name>
      <anchorfile>classmuu_1_1thread__pool.html</anchorfile>
      <anchor>a5ba93e4777f41fc34b6829a7748d4318</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>workers</name>
      <anchorfile>classmuu_1_1thread__pool.html</anchorfile>
      <anchor>adf3e1d1f730ff1f86f61a9c645a949fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>classmuu_1_1thread__pool.html</anchorfile>
      <anchor>a9ea03b02643976fa8a65dddcfdd09295</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>classmuu_1_1thread__pool.html</anchorfile>
      <anchor>a0be5fc12fedc8dbb694b614a6e53ec23</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>thread_pool &amp;</type>
      <name>enqueue</name>
      <anchorfile>classmuu_1_1thread__pool.html</anchorfile>
      <anchor>a495ad269689dadf8eebb7a8bd23574ec</anchor>
      <arglist>(Task &amp;&amp;task) noexcept</arglist>
    </member>
    <member kind="function">
      <type>thread_pool &amp;</type>
      <name>for_each</name>
      <anchorfile>classmuu_1_1thread__pool.html</anchorfile>
      <anchor>a8f4b6d4bbed147da00ec02ff29cc505e</anchor>
      <arglist>(Iter begin, Iter end, Task &amp;&amp;task) noexcept</arglist>
    </member>
    <member kind="function">
      <type>thread_pool &amp;</type>
      <name>for_each</name>
      <anchorfile>classmuu_1_1thread__pool.html</anchorfile>
      <anchor>a3cc58fa2c82e63f14ec668f96f654d19</anchor>
      <arglist>(T &amp;&amp;collection, Task &amp;&amp;task) noexcept</arglist>
    </member>
    <member kind="function">
      <type>thread_pool &amp;</type>
      <name>for_range</name>
      <anchorfile>classmuu_1_1thread__pool.html</anchorfile>
      <anchor>afd645f9d69c3cf18994cb33194c733f9</anchor>
      <arglist>(T start, T end, Task &amp;&amp;task) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::triangle</name>
    <filename>structmuu_1_1triangle.html</filename>
    <templarg>typename Scalar</templarg>
    <member kind="typedef">
      <type>Scalar</type>
      <name>scalar_type</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a6f139156800ade1637a72ba97c96d732</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; scalar_type, 3 &gt;</type>
      <name>vector_type</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a4f332b7b6aca26c58fd69ac540ced5ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::constants&lt; triangle &gt;</type>
      <name>constants</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>affe3f9bb91c0cb68f01221dd24d4d647</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector_type *</type>
      <name>iterator</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a54f5077477478a20758652b65750b0ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const vector_type *</type>
      <name>const_iterator</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>ad18c1105a14dc95ddab17d76c969870d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>triangle</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a008badd21dc32e07c6d0100741a5df57</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>triangle</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a784f45cef96310d107477a54cb120107</anchor>
      <arglist>(const triangle &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr triangle &amp;</type>
      <name>operator=</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a380e4bcba5e09675ce293ddf46ac3cf4</anchor>
      <arglist>(const triangle &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>triangle</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a53d1b3e41e7bbf89565eccbb5691a082</anchor>
      <arglist>(const vector_type &amp;p0, const vector_type &amp;p1, const vector_type &amp;p2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>triangle</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a34a188e18bf0de3a44d0d5a575e4673d</anchor>
      <arglist>(const vector_type(&amp;points)[3]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>triangle</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>ab661d9e40c80b577251b9dbdc88d6a5a</anchor>
      <arglist>(scalar_type p0_x, scalar_type p0_y, scalar_type p0_z, scalar_type p1_x, scalar_type p1_y, scalar_type p1_z, scalar_type p2_x, scalar_type p2_y, scalar_type p2_z) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>triangle</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>af4b31ca78425c0908348d90eaeb52d83</anchor>
      <arglist>(const triangle&lt; S &gt; &amp;tri) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>triangle</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a362a7c6b0042a437d03d81548eee7b06</anchor>
      <arglist>(const T &amp;blittable) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type &amp;</type>
      <name>get</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a06895e28a2c8fa354b815dc653b43727</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const vector_type &amp;</type>
      <name>get</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>abf1991e4c407566a7a38b1d57a5257c5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>adf5b83643bb7bd06861117c6fd432beb</anchor>
      <arglist>(size_t p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const vector_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a93ee7fa50f820c250e1fe0139d020ffa</anchor>
      <arglist>(size_t p) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>aa6f1637afb3cee7f659f8b030b14d62e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>aad93246a4e021e8baf3138ccdd193f2f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>af6d5d3bd123107dbca91f50582112157</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a780dfd6db11f243a60fb3852111acf14</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a4a00085611ed4674a724eb7c5908681f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a73f0d9f0ce0be43675b8d4d6fc4edfb1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a47852d1960a08501209441c1346f7fc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cend</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>aa917bc386bdb4b0e722ecf483a2c1b2c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>vector_type</type>
      <name>points</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a87225c94bf34d036b961fc51504b2586</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a0e1e0cde0ea112747041cb27cf8919c4</anchor>
      <arglist>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const triangle &amp;tri)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>ab20f39e79ec6b7069a1508fdaccc98f3</anchor>
      <arglist>(triangle &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>aee32a2e84d4f19948c75880fde35a1b2</anchor>
      <arglist>(triangle &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>ab1b94510289ecccc9fe7db29bb17c6e7</anchor>
      <arglist>(const triangle &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a75490ffaaf4ce267d7c2aa27872079cd</anchor>
      <arglist>(const triangle &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>aaac9b81160367ccc61e7ae5613ae8e99</anchor>
      <arglist>(const triangle &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>cend</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>ac2071249ae10c9da3baf1964101a48c2</anchor>
      <arglist>(const triangle &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga73ae74e7ab9484fb2ee90a67e91c1b08</anchor>
      <arglist>(const triangle&lt; S &gt; &amp;tri) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga2881bac8c2bf5248013bbc7d94867005</anchor>
      <arglist>(const triangle&lt; S &gt; &amp;tri1, const triangle&lt; T &gt; &amp;tri2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga634f1c2a41e507ca065b3783a0401c3c</anchor>
      <arglist>(const triangle&lt; S &gt; &amp;tri, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type &amp;</type>
      <name>get</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a06895e28a2c8fa354b815dc653b43727</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const vector_type &amp;</type>
      <name>get</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>abf1991e4c407566a7a38b1d57a5257c5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>adf5b83643bb7bd06861117c6fd432beb</anchor>
      <arglist>(size_t p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const vector_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a93ee7fa50f820c250e1fe0139d020ffa</anchor>
      <arglist>(size_t p) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>aa6f1637afb3cee7f659f8b030b14d62e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>aad93246a4e021e8baf3138ccdd193f2f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type</type>
      <name>normal</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a53dd160e37e290a66d6062105e849daf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type</type>
      <name>centroid</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>ac45d0c9a3993bb80460c1e06628583ea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>perimeter</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a05605becf5039f2d39118971123ed937</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>area</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a67cc766e93450deb63f5f84a0088fc93</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>degenerate</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>af9075d4c90279701a3e2208a1f180435</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr muu::plane&lt; scalar_type &gt;</type>
      <name>plane</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a17e6e99aae779335c52378ff8b3b0c26</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator muu::plane&lt; scalar_type &gt;</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a2d68c3966ea99611e279433b186a89ed</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector_type</type>
      <name>normal</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a43dfb7e83c3b43c58d00f74b707e2862</anchor>
      <arglist>(const vector_type &amp;p0, const vector_type &amp;p1, const vector_type &amp;p2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector_type</type>
      <name>centroid</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>afa1dcf5b1ad93222c73fb448cd2fd71c</anchor>
      <arglist>(const vector_type &amp;p0, const vector_type &amp;p1, const vector_type &amp;p2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr scalar_type</type>
      <name>perimeter</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>aaf2b896a14372d47161001869ef88b81</anchor>
      <arglist>(const vector_type &amp;p0, const vector_type &amp;p1, const vector_type &amp;p2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr scalar_type</type>
      <name>area</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a018ca567841827cc01ddcc4384bb631b</anchor>
      <arglist>(const vector_type &amp;p0, const vector_type &amp;p1, const vector_type &amp;p2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>degenerate</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>ac891350e77133647bb9b9c3800564ba6</anchor>
      <arglist>(const vector_type &amp;p0, const vector_type &amp;p1, const vector_type &amp;p2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr muu::plane&lt; scalar_type &gt;</type>
      <name>plane</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>acdbb5300f7faeb424d1cab2a2b89c87f</anchor>
      <arglist>(const vector_type &amp;p0, const vector_type &amp;p1, const vector_type &amp;p2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>ad4a210ccd0cbf81ef9c80cd1e6734a56</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>ab98d85af8f104aebbe9a0e5040d30cc8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a8ba2ece2bafc08a34d60b4a5128ac278</anchor>
      <arglist>(const triangle &amp;tri) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>aa6dd25aeeba2dbb7a0237688c5ba554e</anchor>
      <arglist>(const triangle &amp;tri) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a2243c114d58c6b5b5def0436770dfaf2</anchor>
      <arglist>(const triangle &amp;lhs, const triangle&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a89f9fb5ac5be6311bd9e90e350163ffa</anchor>
      <arglist>(const triangle &amp;lhs, const triangle&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>ad89d0fb8bf5bdcf44159547f83653971</anchor>
      <arglist>(const triangle&lt; T &gt; &amp;tri, epsilon_type&lt; scalar_type, T &gt; epsilon=default_epsilon&lt; scalar_type, T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a3684bf95361a50f5d1a26e6809296cb3</anchor>
      <arglist>(scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a6f36d3a5fe42c3b59a8c90e81e89c6b5</anchor>
      <arglist>(const triangle &amp;tri1, const triangle&lt; T &gt; &amp;tri2, epsilon_type&lt; scalar_type, T &gt; epsilon=default_epsilon&lt; scalar_type, T &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a088b7e68956e8d3bf98cd0aaf524230a</anchor>
      <arglist>(const triangle &amp;tri, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>coplanar</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a3d8f835445e079d196746f6eb215adf5</anchor>
      <arglist>(const vector_type &amp;point) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>contains</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>ad667f1f626714fc800e8c06fb0cf7b9a</anchor>
      <arglist>(const vector_type &amp;point) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>coplanar</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>af1c8179a45b0f04460b2783fd62c77c0</anchor>
      <arglist>(const vector_type &amp;p0, const vector_type &amp;p1, const vector_type &amp;p2, const vector_type &amp;point) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>coplanar</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a9b02d704299c7fdf472cedf9e8561b73</anchor>
      <arglist>(const triangle &amp;tri, const vector_type &amp;point) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>contains</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>afd20f1a4bad93eaae90b6b4870956d82</anchor>
      <arglist>(const vector_type &amp;p0, const vector_type &amp;p1, const vector_type &amp;p2, const vector_type &amp;point) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>contains</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>ae5b331c44513becdc04ca36fbc23c0d3</anchor>
      <arglist>(const triangle &amp;tri, const vector_type &amp;point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>ad9f77091ab2178fa24ca801f00effaf5</anchor>
      <arglist>(const bounding_box&lt; scalar_type &gt; &amp;bb) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>ae4d9e12c3f98e4dd427974a65c78d797</anchor>
      <arglist>(const vector_type &amp;p0, const vector_type &amp;p1, const vector_type &amp;p2, const bounding_box&lt; scalar_type &gt; &amp;bb) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>intersects</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>af266c2c8468e08e18fb8394aee9c2567</anchor>
      <arglist>(const triangle &amp;tri, const bounding_box&lt; scalar_type &gt; &amp;bb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector_type</type>
      <name>barycentric</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a21acec5bbcaa2d28cb74ea96056f9502</anchor>
      <arglist>(const vector_type &amp;point) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>barycentric_generator</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a5917ff6a72c46204b658e8c8217f255e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector_type</type>
      <name>barycentric</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a6cb7995e188a6636f73bdd48a9c162e3</anchor>
      <arglist>(const vector_type &amp;p0, const vector_type &amp;p1, const vector_type &amp;p2, const vector_type &amp;point) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>barycentric_generator</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a7778dfe5fdefea10456a1fef8a63f14c</anchor>
      <arglist>(const vector_type &amp;p0, const vector_type &amp;p1, const vector_type &amp;p2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>af6d5d3bd123107dbca91f50582112157</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a780dfd6db11f243a60fb3852111acf14</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a4a00085611ed4674a724eb7c5908681f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a73f0d9f0ce0be43675b8d4d6fc4edfb1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a47852d1960a08501209441c1346f7fc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cend</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>aa917bc386bdb4b0e722ecf483a2c1b2c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>ab20f39e79ec6b7069a1508fdaccc98f3</anchor>
      <arglist>(triangle &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>aee32a2e84d4f19948c75880fde35a1b2</anchor>
      <arglist>(triangle &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>ab1b94510289ecccc9fe7db29bb17c6e7</anchor>
      <arglist>(const triangle &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>a75490ffaaf4ce267d7c2aa27872079cd</anchor>
      <arglist>(const triangle &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>aaac9b81160367ccc61e7ae5613ae8e99</anchor>
      <arglist>(const triangle &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>cend</name>
      <anchorfile>structmuu_1_1triangle.html</anchorfile>
      <anchor>ac2071249ae10c9da3baf1964101a48c2</anchor>
      <arglist>(const triangle &amp;v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::tuple_element&lt; I, muu::bounding_box&lt; Scalar &gt; &gt;</name>
    <filename>structstd_1_1tuple__element_3_01_i_00_01muu_1_1bounding__box_3_01_scalar_01_4_01_4.html</filename>
    <templarg>size_t I</templarg>
    <templarg>typename Scalar</templarg>
  </compound>
  <compound kind="struct">
    <name>std::tuple_element&lt; I, muu::compressed_pair&lt; First, Second &gt; &gt;</name>
    <filename>structstd_1_1tuple__element_3_01_i_00_01muu_1_1compressed__pair_3_01_first_00_01_second_01_4_01_4.html</filename>
    <templarg>size_t I</templarg>
    <templarg>typename First</templarg>
    <templarg>typename Second</templarg>
  </compound>
  <compound kind="struct">
    <name>std::tuple_element&lt; I, muu::oriented_bounding_box&lt; Scalar &gt; &gt;</name>
    <filename>structstd_1_1tuple__element_3_01_i_00_01muu_1_1oriented__bounding__box_3_01_scalar_01_4_01_4.html</filename>
    <templarg>size_t I</templarg>
    <templarg>typename Scalar</templarg>
  </compound>
  <compound kind="struct">
    <name>std::tuple_element&lt; I, muu::plane&lt; Scalar &gt; &gt;</name>
    <filename>structstd_1_1tuple__element_3_01_i_00_01muu_1_1plane_3_01_scalar_01_4_01_4.html</filename>
    <templarg>size_t I</templarg>
    <templarg>typename Scalar</templarg>
  </compound>
  <compound kind="struct">
    <name>std::tuple_element&lt; I, muu::quaternion&lt; Scalar &gt; &gt;</name>
    <filename>structstd_1_1tuple__element_3_01_i_00_01muu_1_1quaternion_3_01_scalar_01_4_01_4.html</filename>
    <templarg>size_t I</templarg>
    <templarg>typename Scalar</templarg>
  </compound>
  <compound kind="struct">
    <name>std::tuple_element&lt; I, muu::vector&lt; Scalar, Dimensions &gt; &gt;</name>
    <filename>structstd_1_1tuple__element_3_01_i_00_01muu_1_1vector_3_01_scalar_00_01_dimensions_01_4_01_4.html</filename>
    <templarg>size_t I</templarg>
    <templarg>typename Scalar</templarg>
    <templarg>size_t Dimensions</templarg>
  </compound>
  <compound kind="struct">
    <name>std::tuple_element&lt; Index, muu::strong_typedef&lt; ValueType, Tag, Traits... &gt; &gt;</name>
    <filename>structstd_1_1tuple__element_3_01_index_00_01muu_1_1strong__typedef_3_01_value_type_00_01_tag_00_01_traits_8_8_8_01_4_01_4.html</filename>
    <templarg>size_t Index</templarg>
    <templarg>typename ValueType</templarg>
    <templarg>typename Tag</templarg>
    <templarg>template&lt; typename &gt; typename... Traits</templarg>
  </compound>
  <compound kind="struct">
    <name>std::tuple_element&lt; P, muu::line_segment&lt; Scalar &gt; &gt;</name>
    <filename>structstd_1_1tuple__element_3_01_p_00_01muu_1_1line__segment_3_01_scalar_01_4_01_4.html</filename>
    <templarg>size_t P</templarg>
    <templarg>typename Scalar</templarg>
  </compound>
  <compound kind="struct">
    <name>std::tuple_element&lt; P, muu::triangle&lt; Scalar &gt; &gt;</name>
    <filename>structstd_1_1tuple__element_3_01_p_00_01muu_1_1triangle_3_01_scalar_01_4_01_4.html</filename>
    <templarg>size_t P</templarg>
    <templarg>typename Scalar</templarg>
  </compound>
  <compound kind="struct">
    <name>std::tuple_size&lt; muu::bounding_box&lt; Scalar &gt; &gt;</name>
    <filename>structstd_1_1tuple__size_3_01muu_1_1bounding__box_3_01_scalar_01_4_01_4.html</filename>
    <templarg>typename Scalar</templarg>
  </compound>
  <compound kind="struct">
    <name>std::tuple_size&lt; muu::compressed_pair&lt; First, Second &gt; &gt;</name>
    <filename>structstd_1_1tuple__size_3_01muu_1_1compressed__pair_3_01_first_00_01_second_01_4_01_4.html</filename>
    <templarg>typename First</templarg>
    <templarg>typename Second</templarg>
  </compound>
  <compound kind="struct">
    <name>std::tuple_size&lt; muu::line_segment&lt; Scalar &gt; &gt;</name>
    <filename>structstd_1_1tuple__size_3_01muu_1_1line__segment_3_01_scalar_01_4_01_4.html</filename>
    <templarg>typename Scalar</templarg>
  </compound>
  <compound kind="struct">
    <name>std::tuple_size&lt; muu::oriented_bounding_box&lt; Scalar &gt; &gt;</name>
    <filename>structstd_1_1tuple__size_3_01muu_1_1oriented__bounding__box_3_01_scalar_01_4_01_4.html</filename>
    <templarg>typename Scalar</templarg>
  </compound>
  <compound kind="struct">
    <name>std::tuple_size&lt; muu::plane&lt; Scalar &gt; &gt;</name>
    <filename>structstd_1_1tuple__size_3_01muu_1_1plane_3_01_scalar_01_4_01_4.html</filename>
    <templarg>typename Scalar</templarg>
  </compound>
  <compound kind="struct">
    <name>std::tuple_size&lt; muu::quaternion&lt; Scalar &gt; &gt;</name>
    <filename>structstd_1_1tuple__size_3_01muu_1_1quaternion_3_01_scalar_01_4_01_4.html</filename>
    <templarg>typename Scalar</templarg>
  </compound>
  <compound kind="struct">
    <name>std::tuple_size&lt; muu::strong_typedef&lt; ValueType, Tag, Traits... &gt; &gt;</name>
    <filename>structstd_1_1tuple__size_3_01muu_1_1strong__typedef_3_01_value_type_00_01_tag_00_01_traits_8_8_8_01_4_01_4.html</filename>
    <templarg>typename ValueType</templarg>
    <templarg>typename Tag</templarg>
    <templarg>template&lt; typename &gt; typename... Traits</templarg>
  </compound>
  <compound kind="struct">
    <name>std::tuple_size&lt; muu::triangle&lt; Scalar &gt; &gt;</name>
    <filename>structstd_1_1tuple__size_3_01muu_1_1triangle_3_01_scalar_01_4_01_4.html</filename>
    <templarg>typename Scalar</templarg>
  </compound>
  <compound kind="struct">
    <name>std::tuple_size&lt; muu::vector&lt; Scalar, Dimensions &gt; &gt;</name>
    <filename>structstd_1_1tuple__size_3_01muu_1_1vector_3_01_scalar_00_01_dimensions_01_4_01_4.html</filename>
    <templarg>typename Scalar</templarg>
    <templarg>size_t Dimensions</templarg>
  </compound>
  <compound kind="struct">
    <name>muu::type_list</name>
    <filename>structmuu_1_1type__list.html</filename>
    <templarg>typename... T</templarg>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>first</name>
      <anchorfile>structmuu_1_1type__list.html</anchorfile>
      <anchor>a0b1d54c39538ac038e178c915e80cd67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>first</type>
      <name>type</name>
      <anchorfile>structmuu_1_1type__list.html</anchorfile>
      <anchor>adf836ec5894110f63566e8bfb54a78aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>select</name>
      <anchorfile>structmuu_1_1type__list.html</anchorfile>
      <anchor>a4e383a46f2f141dac3a5ff14e44d8f54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>slice</name>
      <anchorfile>structmuu_1_1type__list.html</anchorfile>
      <anchor>a525094f21f1941eb9910b8aaa24c9365</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>flatten</name>
      <anchorfile>structmuu_1_1type__list.html</anchorfile>
      <anchor>a781df73d70a5cecbc215db625c454786</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>remove</name>
      <anchorfile>structmuu_1_1type__list.html</anchorfile>
      <anchor>ab9ebb4442446fd37362bc5a3dea3f618</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::type_list&lt; T..., U... &gt;</type>
      <name>append</name>
      <anchorfile>structmuu_1_1type__list.html</anchorfile>
      <anchor>ab3d0e88d24a6b4b32c03f9aea336e0a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>length</name>
      <anchorfile>structmuu_1_1type__list.html</anchorfile>
      <anchor>a7bc9e54b6100181e7203d433a5e1b31b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>index_of</name>
      <anchorfile>structmuu_1_1type__list.html</anchorfile>
      <anchor>ac721e0f97de92f684b6caa3423253800</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::uuid</name>
    <filename>structmuu_1_1uuid.html</filename>
    <member kind="typedef">
      <type>muu::constants&lt; uuid &gt;</type>
      <name>constants</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>ab0df339caf9ad01abf31bb6f208bb72f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>uuid</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>ac6d637c87ce5a7d9a0745ec52964f0ad</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>uuid</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a3f394360cf4bc0fa6e8828ec5ef60661</anchor>
      <arglist>(uint32_t time_low, uint16_t time_mid, uint16_t time_high_and_version, uint8_t clock_seq_high_and_reserved, uint8_t clock_seq_low, uint64_t node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>uuid</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a52d9303cb2231fcd1613b2819b8c4ba1</anchor>
      <arglist>(uint32_t time_low, uint16_t time_mid, uint16_t time_high_and_version, uint16_t clock_seq, uint64_t node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>uuid</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a8d29048ee0984dcf90335a8a7507a040</anchor>
      <arglist>(std::nullptr_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>uuid</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>aef18acb93c75e1c427639b855030b373</anchor>
      <arglist>(uint128_t val) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>uuid</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>aeffec1e0d86eba26298f34d0103c6228</anchor>
      <arglist>(const uuid &amp;name_space, const void *name_data, size_t name_size) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>uuid</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>af01488b5a153b0659278c7c7ae6ca75d</anchor>
      <arglist>(const uuid &amp;name_space, std::string_view name) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>uuid</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a8ca2e68bb49a0579a53bf607e6be67ee</anchor>
      <arglist>(const uuid &amp;name_space, std::u8string_view name) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr uuid_variant</type>
      <name>variant</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>afcbbb495f4dd099810e261b4238a1578</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr uuid_version</type>
      <name>version</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a8ee49a1025c2dd2494ec5a293e1af7d7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr uint32_t</type>
      <name>time_low</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a0445f7982a6afa971040f61acbc55b7c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr uint16_t</type>
      <name>time_mid</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>ab481a846a20ae5b7095fa8fef2bd2ce5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr uint16_t</type>
      <name>time_high_and_version</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a5fbb66418327dc3c0969c69b217cf31d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr uint8_t</type>
      <name>clock_seq_high_and_reserved</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a0142dd278affa6dcddfe0a3a8db98786</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr uint8_t</type>
      <name>clock_seq_low</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a75c354441ef8da4a6f0cd474c3746fcd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr uint64_t</type>
      <name>node</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a761a163d20263bfce093f280151977d2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator uint128_t</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a507cb7feaab9dc6e2a83def097249324</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a999e785719acedf45fdf4dfbc97c1c65</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uuid</type>
      <name>generate</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a0d71e15720bef12a18b7922331be4386</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr int32_t</type>
      <name>compare</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>ab19449ba8e22d8be85e9f790555e952f</anchor>
      <arglist>(const uuid &amp;lhs, const uuid &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::optional&lt; uuid &gt;</type>
      <name>parse</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>ad6beda74aec99774e4b10d615aacacd5</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::optional&lt; uuid &gt;</type>
      <name>parse</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>af01a611af40c4882a7f603850c5bb412</anchor>
      <arglist>(std::u8string_view str) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::optional&lt; uuid &gt;</type>
      <name>parse</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>aa1a4bb59450d2f4e648a66da6fb1f741</anchor>
      <arglist>(std::u16string_view str) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::optional&lt; uuid &gt;</type>
      <name>parse</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a96fe8c4fc9edefe1a57059b5ba0236cb</anchor>
      <arglist>(std::u32string_view str) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::optional&lt; uuid &gt;</type>
      <name>parse</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a9b88e7c6887bc24aab802e8748e798ca</anchor>
      <arglist>(std::wstring_view str) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>impl::uuid_bytes</type>
      <name>bytes</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a6f04e89c59ce24cb6d2f19bc149f2277</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>aceb36e3dbf16250c8ee9e74e8669b25e</anchor>
      <arglist>(const uuid &amp;lhs, const uuid &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a01aa7ebbc1ab07350bf14ee893710e00</anchor>
      <arglist>(const uuid &amp;lhs, const uuid &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>ac453086e7f9261eaf9791fa3680cb504</anchor>
      <arglist>(const uuid &amp;lhs, const uuid &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>ac63dc0944f3c3346efa0f3ddcfd89e05</anchor>
      <arglist>(const uuid &amp;lhs, const uuid &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a0dc1c90782c2688914e3aaaf4146d974</anchor>
      <arglist>(const uuid &amp;lhs, const uuid &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a89a8947cb5bd1f53e510223fad0c0771</anchor>
      <arglist>(const uuid &amp;lhs, const uuid &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char, std::char_traits&lt; Char &gt; &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a3da33bb3f7dc064f29ca93b260d52e61</anchor>
      <arglist>(std::basic_ostream&lt; Char, std::char_traits&lt; Char &gt;&gt; &amp;lhs, const uuid &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>consteval uuid</type>
      <name>operator&quot;&quot;_uuid</name>
      <anchorfile>structmuu_1_1uuid.html</anchorfile>
      <anchor>a03372c885efd4ad9b5dafb757ed61f8f</anchor>
      <arglist>(const char *str, size_t len) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>muu::vector</name>
    <filename>structmuu_1_1vector.html</filename>
    <templarg>typename Scalar</templarg>
    <templarg>size_t Dimensions</templarg>
    <member kind="typedef">
      <type>Scalar</type>
      <name>scalar_type</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ad9d2b50a3d332271a3e7301e68bb356e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; is_integral&lt; scalar_type &gt;, double, scalar_type &gt;</type>
      <name>delta_scalar_type</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>af0501cc0152058287509d48f0f31f628</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; delta_scalar_type, dimensions &gt;</type>
      <name>delta_type</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a62f5fa0ad993de62cd7159cb0657039a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; is_integral&lt; scalar_type &gt;, impl::highest_ranked&lt; make_signed&lt; scalar_type &gt;, int &gt;, scalar_type &gt;</type>
      <name>product_scalar_type</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a636679a1c6d383e2ab954ca3eb81d65d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; product_scalar_type, dimensions &gt;</type>
      <name>product_type</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a0e27e8a11edd16cede6937abb42ad594</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::constants&lt; vector &gt;</type>
      <name>constants</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>af86353cc02b9274871a182b6157a7136</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>scalar_type *</type>
      <name>iterator</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aaee97133e6f66be9c816eaa532987bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const scalar_type *</type>
      <name>const_iterator</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a851f2bde2b5c8a45cb0f02ac53cf85d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ab715d1fb4d9aa87cd5918037b933956b</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a7bc4befd275281134a09944414ab5b8b</anchor>
      <arglist>(const vector &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector &amp;</type>
      <name>operator=</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a110b0bad8da61328dc19cfdcfb4f3995</anchor>
      <arglist>(const vector &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a0f9026824be861f778dadb15a091a8dc</anchor>
      <arglist>(scalar_type fill) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ae04a9e78ea8934c2167ab193a9a953d6</anchor>
      <arglist>(scalar_type x, scalar_type y) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a728ee8868452ad9f6768c4ab6f961a0c</anchor>
      <arglist>(scalar_type x, scalar_type y, scalar_type z) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aeb9e04efd86f59a605130bb438e18c55</anchor>
      <arglist>(scalar_type x, scalar_type y, scalar_type z, scalar_type w) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a5b1d318171e35256ff26b32181c9813a</anchor>
      <arglist>(scalar_type x, scalar_type y, scalar_type z, scalar_type w, const T &amp;... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>af1b7d1818bcca46bdca2881451f25ab4</anchor>
      <arglist>(const scalar_type(&amp;arr)[N]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aba94ad73fe20b986aa96e6eb23944cbe</anchor>
      <arglist>(const T(&amp;arr)[N]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a406ddd92df734f4b5fb5012a4571f91f</anchor>
      <arglist>(const std::array&lt; scalar_type, N &gt; &amp;arr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ae0170699052e7287ac2d618b3f2168cb</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;arr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aa8ac1519ddfb8ae28ef7dc4ce23e8085</anchor>
      <arglist>(const T &amp;tuple_or_bitcastable) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a803695ea1592669752281dc217bd83d3</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;vec) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a5daf0c0082c5fd76435808d7517ef7a3</anchor>
      <arglist>(const vector&lt; S1, D1 &gt; &amp;vec1, const vector&lt; S2, D2 &gt; &amp;vec2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ab95403dc8fdf56329da3f669a48b7988</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;vec, const T &amp;... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a88801e28c816d55516cb880cc094997a</anchor>
      <arglist>(const T *vals, size_t num) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a943cab78806fe1e13f8ebaf974cb34b2</anchor>
      <arglist>(const T *vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a52cf1994498457bd3ac6e93244b4811e</anchor>
      <arglist>(const muu::span&lt; T, N &gt; &amp;vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>vector</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ae9e5f1a81b891f045778c02650af9a7f</anchor>
      <arglist>(const muu::span&lt; T &gt; &amp;vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector &amp;</type>
      <name>lerp</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a861c95312f359b219748ae117574d436</anchor>
      <arglist>(const vector &amp;target, delta_scalar_type alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>angle</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ab7f8c82352fbaeaf90646c4e9cc4e201</anchor>
      <arglist>(const vector &amp;v) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector</type>
      <name>abs</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a2e477752279697172cd6f6b1a429690a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector</type>
      <name>ceil</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>af560d2d0165aecf0134a273fc954fbf9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector</type>
      <name>floor</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a904549bd751d72f8a2cc8781ff2ba53e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type &amp;</type>
      <name>get</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a6c9dc88b7400a51411156d4147b03b96</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type &amp;</type>
      <name>get</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a0d9b9b73cbc2caa305f06f91234d4476</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ae70bab749dba6c5e53255a1a41e0c5f5</anchor>
      <arglist>(size_t dim) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ad1fd1e088703c0b1b4704874e28aaa44</anchor>
      <arglist>(size_t dim) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a6645c377ccfc635ddcc331cdd01f9256</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a24f7be704e05ddc538e94e1c35e9c65c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a3154923b04ea04a932ff42786eed4f57</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a9198e267442a545ebb0d112dac7b2a0c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a32412aa1e3b099208bf73cb8465d2981</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ac63ba31b9822742901e481fec5f3c8dd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a822727b7a2a55b7ce06e0f0a65f874ea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cend</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ae618ff7b03b4ea6f26d290c0f7af9108</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector</type>
      <name>lerp</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a72ec424c45c548c712fbc8a1d5c4624e</anchor>
      <arglist>(const vector &amp;start, const vector &amp;finish, delta_scalar_type alpha) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr delta_scalar_type</type>
      <name>angle</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aa4ba0c7b3918ad947415990410d410b0</anchor>
      <arglist>(const vector &amp;v1, const vector &amp;v2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector</type>
      <name>abs</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a935a9bc44bb2bef21b75b1f914a1de8d</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector</type>
      <name>ceil</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a4918d06dc4adbee8e320dd8b9918d510</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector</type>
      <name>floor</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aa00b6803a1adf5e2b576b8c3ff13db5d</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>scalar_type</type>
      <name>x</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a03d091d31e6dae7ed1d279258555598b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scalar_type</type>
      <name>y</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>adcf17a6ab7f9efab07681df837a63fc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scalar_type</type>
      <name>z</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ae3a7217dfe2109b3aa2d0da555862367</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scalar_type</type>
      <name>w</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aa4f5a42ad04a011d2b4de2c4404ef5d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scalar_type</type>
      <name>values</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a0dd98b6ea7851559cf9c8feb3c45dddb</anchor>
      <arglist>[dimensions]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>dimensions</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a8c5d32031f530edbe83b5464c497e33c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; Char, Traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a31bf388115e8fbe083aa056f5523bbbc</anchor>
      <arglist>(std::basic_ostream&lt; Char, Traits &gt; &amp;os, const vector &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a072ba2759b288b15963887d74fecd277</anchor>
      <arglist>(vector &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ab837a1246db560433337a3c1c24affee</anchor>
      <arglist>(vector &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ae423119e0bdfbbee72988f546a58d9fd</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a10bc39751925224817204975587a5641</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ab76b38d7c2d6406c434f8bb589c073ea</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>cend</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a29fa2209bbaa1542881ab8293e680646</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga302affada638f7a69a77c925b1f38d93</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga5d86e15710b89e3c79399cd98f597efe</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v1, const vector&lt; T, D &gt; &amp;v2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gaa7e15ecff78c10af4eaa5b463eee9ca6</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>normalized</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a528d334a55d0d8e0349b3b746bfd8f58</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>length_squared</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>af307f925c296e9d48af1ac07f8397976</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>length</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a3a4a6f056f9ccb03312234014d928c82</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval delta_scalar_type</type>
      <name>consteval_length</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a4468463759178ee381f007205619c7f9</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>distance_squared</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aa4daf32f61f3d16a4951ed22f1a17b27</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;p1, const vector&lt; S, D &gt; &amp;p2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>distance</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a2544755914a8b5e912e5c363b5696b1e</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;p1, const vector&lt; S, D &gt; &amp;p2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval delta_scalar_type</type>
      <name>consteval_distance</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a59590b8f7b7b8d67db414c1c719ebde9</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;p1, const vector&lt; S, D &gt; &amp;p2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr product_scalar_type</type>
      <name>dot</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a458166cf1b29e986402f7b3130ecbbed</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v1, const vector&lt; S, D &gt; &amp;v2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr product_type</type>
      <name>cross</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a69747a8040656c2d281a3078feed3f04</anchor>
      <arglist>(const vector&lt; S, 3 &gt; &amp;lhs, const vector&lt; S, 3 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>normalize</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ac7f7d7901bd21fcfa2848c992e75dab6</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v, delta_scalar_type &amp;length_out) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>normalize</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a0901b5c81729a1e28b3dab7c0cf1bba3</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval vector&lt; S, D &gt;</type>
      <name>consteval_normalize</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ac738833e62a49a9e0a4b977809d534ad</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_type</type>
      <name>direction</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a301d7c955199fcc78010b6b55d2797b5</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;from, const vector&lt; S, D &gt; &amp;to, delta_scalar_type &amp;distance_out) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_type</type>
      <name>direction</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ac63b2e49523e6dc701fe704270fa0b39</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;from, const vector&lt; S, D &gt; &amp;to) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>min</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a7a74c1b4efea2acad86192f3fd9039c0</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v1, const vector&lt; S, D &gt; &amp;v2, const T &amp;... vecs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>max</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a6e1d12ec3b75c4b972128a0ca872da58</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v1, const vector&lt; S, D &gt; &amp;v2, const T &amp;... vecs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>clamp</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a13427afa8abc10b68dec66a3e6d30c94</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v, const vector&lt; S, D &gt; &amp;low, const vector&lt; S, D &gt; &amp;high) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>gabcb72a5920c41c8b337d9060ff775b77</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;start, const vector&lt; S, D &gt; &amp;finish, delta_scalar_type alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>angle</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a6ba11c907004b9c139971dce77af94ad</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v1, const vector&lt; S, D &gt; &amp;v2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga3d9f7436810436103ec0af7e77597b04</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gae07fcd5b9220de0b39fa3461c3c529de</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>gaa9989749869046cff6731ead1b56f0df</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type &amp;</type>
      <name>get</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a6c9dc88b7400a51411156d4147b03b96</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type &amp;</type>
      <name>get</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a0d9b9b73cbc2caa305f06f91234d4476</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ae70bab749dba6c5e53255a1a41e0c5f5</anchor>
      <arglist>(size_t dim) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ad1fd1e088703c0b1b4704874e28aaa44</anchor>
      <arglist>(size_t dim) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a6645c377ccfc635ddcc331cdd01f9256</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type *</type>
      <name>data</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a24f7be704e05ddc538e94e1c35e9c65c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a600a005f13c53d4b8fb0c1defc5ccf04</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aeb666e11d5ba6ebd37600da746fa4ece</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ab8aaf9b6dcb54a7b2512bf26b84f57bf</anchor>
      <arglist>(const vector &amp;lhs, const vector&lt; T, dimensions &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a6a42ea429501a372c40fa7799fc4b4fd</anchor>
      <arglist>(const vector &amp;lhs, const vector&lt; T, dimensions &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>zero</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a177638d0c10f289c0d6a6a453d7c28a7</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aee0c79f215573ab7b818bf89b6744953</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a56ce66cfee8729e2ba1ee88725e8de3c</anchor>
      <arglist>(const vector&lt; T, dimensions &gt; &amp;v, epsilon_type&lt; scalar_type, T &gt; epsilon=default_epsilon&lt; scalar_type, T &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a5a645202fa0cc9e970fb0532416f2533</anchor>
      <arglist>(scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a35fe1423143996ce50300eeeeeda2eb5</anchor>
      <arglist>(const vector &amp;v1, const vector&lt; T, dimensions &gt; &amp;v2, epsilon_type&lt; scalar_type, T &gt; epsilon=default_epsilon&lt; scalar_type, T &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a397a1a85527bdd10d525e7b909f6266f</anchor>
      <arglist>(const vector &amp;v, scalar_type epsilon=default_epsilon&lt; scalar_type &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>length_squared</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a4f1621f3574371c223778e55c1a5cdce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>length</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a31052e40abdaae397385a11751e444cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>distance_squared</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a307b99e5b357f211d423932ca658e465</anchor>
      <arglist>(const vector &amp;p) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>distance</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a90c9a6f5b08f8341164c4c3ea0b8b7f8</anchor>
      <arglist>(const vector &amp;p) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr delta_scalar_type</type>
      <name>length_squared</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aad9d7547d1a9d339a1dfc40672f06b03</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr delta_scalar_type</type>
      <name>length</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>abbefae1f94f6c1eac393706e1594150f</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static consteval delta_scalar_type</type>
      <name>consteval_length</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a6380f3dbb5040cf2ad4ce3d1a11296ee</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr delta_scalar_type</type>
      <name>distance_squared</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a6b0b5092de4a2a42e54ef266fafdb69c</anchor>
      <arglist>(const vector &amp;p1, const vector &amp;p2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr delta_scalar_type</type>
      <name>distance</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a1047e8b5bf25b8bc519786621ff39478</anchor>
      <arglist>(const vector &amp;p1, const vector &amp;p2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static consteval delta_scalar_type</type>
      <name>consteval_distance</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>afdf3f3dd883b60c60b444735b45b1dc4</anchor>
      <arglist>(const vector &amp;p1, const vector &amp;p2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr product_scalar_type</type>
      <name>dot</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a06c5437850e12b0cbfc84035f86addeb</anchor>
      <arglist>(const vector &amp;v) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr product_scalar_type</type>
      <name>dot</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a65ac3ad85ea22fe61345b2adb1e46844</anchor>
      <arglist>(index_tag&lt; Dimension &gt;) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr product_scalar_type</type>
      <name>dot</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a5d55dcff78f6bca17c701b3b5a387205</anchor>
      <arglist>(const vector &amp;v1, const vector &amp;v2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr product_scalar_type</type>
      <name>dot</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a07e6d2bae74f0ec455dc13011f2726ae</anchor>
      <arglist>(const vector &amp;v, index_tag&lt; Dimension &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr product_scalar_type</type>
      <name>dot</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a9d5055c5cf8d7504a2af80bfd80d9da1</anchor>
      <arglist>(index_tag&lt; Dimension &gt;, const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; product_scalar_type, 3 &gt;</type>
      <name>cross</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a79ef9d7cc5c50009151a32256226d9a5</anchor>
      <arglist>(const vector &amp;v) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; product_scalar_type, 3 &gt;</type>
      <name>cross</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aaeb2f60f873e78011846bcc39f82716e</anchor>
      <arglist>(index_tag&lt; Dimension &gt;) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; product_scalar_type, 3 &gt;</type>
      <name>orthogonal</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a5adba8336be58303167c36839ad333f6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector&lt; product_scalar_type, 3 &gt;</type>
      <name>cross</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a55719371ee717ad76fa5d28e24278344</anchor>
      <arglist>(const vector &amp;v1, const vector &amp;v2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector&lt; product_scalar_type, 3 &gt;</type>
      <name>cross</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a0cda73c1b6d8d758cb5e4f06db29fc45</anchor>
      <arglist>(const vector &amp;v, index_tag&lt; Dimension &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector&lt; product_scalar_type, 3 &gt;</type>
      <name>cross</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a3a5b7e70bb031f403f7d981519f52535</anchor>
      <arglist>(index_tag&lt; Dimension &gt;, const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector&lt; product_scalar_type, 3 &gt;</type>
      <name>orthogonal</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a798546d2891f883d37daf90ddcdc7dc2</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a882ed443d0e3f05b03f54e657e8123eb</anchor>
      <arglist>(const vector &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector</type>
      <name>operator+</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a002ce4751b12edcefd80a5451e71f0cb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>sum</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a38152f13dcda92e4c1528f2266ab4778</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend vector</type>
      <name>operator+</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a4b54abe8bbd52a16bb64d13bfbb28484</anchor>
      <arglist>(const vector &amp;lhs, const vector &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr scalar_type</type>
      <name>sum</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a9c646c7e05a22fa464669487703f80fd</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>abcc7aeaedd318b0478b08cb1ce2b79f9</anchor>
      <arglist>(const vector &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector</type>
      <name>operator-</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a7bbd962860ee3708ef34032f0c5f039f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend vector</type>
      <name>operator-</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a58ad62fa3554a8c54b21da1a576f5d90</anchor>
      <arglist>(const vector &amp;lhs, const vector &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a37ca8b644294870b49a3624a024ad80a</anchor>
      <arglist>(const vector &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ae6da16a9c85f3da2b57bcde4ccecd99d</anchor>
      <arglist>(scalar_type rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr scalar_type</type>
      <name>product</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a2027697a8ab331b0c178ee092c9007b7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend vector</type>
      <name>operator*</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a9c18ba7c63d516edc1b44d3b34d97f8f</anchor>
      <arglist>(const vector &amp;lhs, const vector &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend vector</type>
      <name>operator*</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a377875f9428f0c0a45072ae8085d96be</anchor>
      <arglist>(const vector &amp;lhs, scalar_type rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend vector</type>
      <name>operator*</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>afabbdaf1a0e26c72658c2811e03cbbab</anchor>
      <arglist>(scalar_type lhs, const vector &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr scalar_type</type>
      <name>product</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a9b6539edd89f0d4640eae20569161a53</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a38041affca344940ad8e7919d50922d0</anchor>
      <arglist>(const vector &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a2e815494ef568124e5ed587a98f77aea</anchor>
      <arglist>(scalar_type rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend vector</type>
      <name>operator/</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a952b8ffe2f57c1f1d6de141d0a044ad6</anchor>
      <arglist>(const vector &amp;lhs, const vector &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend vector</type>
      <name>operator/</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a1ad97c9f673e1175e9844e1098f3b4f4</anchor>
      <arglist>(const vector &amp;lhs, scalar_type rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector &amp;</type>
      <name>operator%=</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a6e1ec667d68aa4222c0f1bc010b01159</anchor>
      <arglist>(const vector &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector &amp;</type>
      <name>operator%=</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aacbb6000957c79a92264153310b244bd</anchor>
      <arglist>(scalar_type rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend vector</type>
      <name>operator%</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ad3c206d2367de1aba3a270a23fce64a6</anchor>
      <arglist>(const vector &amp;lhs, const vector &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend vector</type>
      <name>operator%</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a9b01fe2e7642f921bc114382251778c9</anchor>
      <arglist>(const vector &amp;lhs, scalar_type rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a96d3a508c4f7d9994c645d3ce723144d</anchor>
      <arglist>(product_scalar_type rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a54af87f2e7b4c799fc207cc3df92d2b5</anchor>
      <arglist>(product_scalar_type rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend vector</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a74be9bedf79217e6c26e5c54d5ba34c2</anchor>
      <arglist>(const vector &amp;lhs, product_scalar_type rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend vector</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>afd4b4e9d85b146a78365ec3aa0b063e5</anchor>
      <arglist>(const vector &amp;lhs, product_scalar_type rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector &amp;</type>
      <name>normalize</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a29dcad1a3376dc7fb73034b56ef175f1</anchor>
      <arglist>(delta_scalar_type &amp;length_out) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector &amp;</type>
      <name>normalize</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a9add1f486663510193249e69745c3856</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector &amp;</type>
      <name>normalize_lensq</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a4949f785f4a9bf76ba8f50b25178ed8e</anchor>
      <arglist>(delta_scalar_type lensq) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>normalized</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ad375771f19e2d46e15239018a5b52126</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector</type>
      <name>normalize</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aeeafc5d6cf7fec1c6c3fc3317e15aa0c</anchor>
      <arglist>(const vector &amp;v, delta_scalar_type &amp;length_out) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector</type>
      <name>normalize</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ab36f324a503d1fb436f63563f91715c1</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static consteval vector</type>
      <name>consteval_normalize</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a572d815ecd8dbb1639cbd5ce96086998</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector</type>
      <name>normalize_lensq</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aa6bb449a0059a12a7a0c3636e40f3566</anchor>
      <arglist>(const vector &amp;v, delta_scalar_type v_lensq) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>normalized</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a31247a06a9f0c3aea6866ac63c738d58</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_type</type>
      <name>direction</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a32dcc2541b13a04360a4b6e2c836f7f8</anchor>
      <arglist>(const vector &amp;to, delta_scalar_type &amp;distance_out) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_type</type>
      <name>direction</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a80173317466157f66d895825b4c58d46</anchor>
      <arglist>(const vector &amp;to) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr delta_type</type>
      <name>direction</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a845e4f6113da64ab350abedcd7e828ee</anchor>
      <arglist>(const vector &amp;from, const vector &amp;to, delta_scalar_type &amp;distance_out) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr delta_type</type>
      <name>direction</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a0dfc8bac7a076610251d520ed6f7c081</anchor>
      <arglist>(const vector &amp;from, const vector &amp;to) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a3154923b04ea04a932ff42786eed4f57</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a9198e267442a545ebb0d112dac7b2a0c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a32412aa1e3b099208bf73cb8465d2981</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ac63ba31b9822742901e481fec5f3c8dd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a822727b7a2a55b7ce06e0f0a65f874ea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cend</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ae618ff7b03b4ea6f26d290c0f7af9108</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector &amp;</type>
      <name>clamp</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ae2e0536dff64be900206fcbf5d23a70e</anchor>
      <arglist>(const vector &amp;low, const vector &amp;high) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector</type>
      <name>min</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a4bb33131bd23272ee19eed00bef4597c</anchor>
      <arglist>(const vector &amp;v1, const vector &amp;v2, const T &amp;... vecs) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector</type>
      <name>min</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aeb0d80727c397ecb966bcc292d1955fa</anchor>
      <arglist>(const vector *begin_, const vector *end_) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector</type>
      <name>min</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ace3bd74134233f4a3eb2c99932973e38</anchor>
      <arglist>(std::initializer_list&lt; vector &gt; vecs) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector</type>
      <name>max</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ac61b1c60062a21a78620903734002cd2</anchor>
      <arglist>(const vector &amp;v1, const vector &amp;v2, const T &amp;... vecs) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector</type>
      <name>max</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>afc4df6eab98a1e18def56967ee6abfee</anchor>
      <arglist>(const vector *begin_, const vector *end_) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector</type>
      <name>max</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a3cef6d7f42ba7300ee8ca320b94b747f</anchor>
      <arglist>(std::initializer_list&lt; vector &gt; vecs) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector</type>
      <name>clamp</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a585b0468facf48d12a3fc82a23b7507d</anchor>
      <arglist>(const vector &amp;v, const vector &amp;low, const vector &amp;high) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; scalar_type, sizeof...(Indices)&gt;</type>
      <name>swizzle</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>afa84ed878b3e20e9d3ac5b467142edca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; scalar_type, 2 &gt;</type>
      <name>xy</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a94ce8b6378bf09ec5a986f93158fd2a1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; scalar_type, 2 &gt;</type>
      <name>xz</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a4813f16a5dddcf87d5cce346977d788b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; scalar_type, 2 &gt;</type>
      <name>yx</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a80b0003d6048b3e41d78d032ad8ba294</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; scalar_type, 3 &gt;</type>
      <name>xyz</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aac0617343d3f899677a8bd726e2af138</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; scalar_type, 4 &gt;</type>
      <name>xyz1</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aa6f10bf2b3ff4de2eebb762b10a9063d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; scalar_type, 4 &gt;</type>
      <name>xyz0</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ac03954cbdf1897b819551f9b2fa423a2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr vector&lt; scalar_type, sizeof...(Indices)&gt;</type>
      <name>swizzle</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>aad56aced14ee8bab3932f5bb71e5a629</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a072ba2759b288b15963887d74fecd277</anchor>
      <arglist>(vector &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ab837a1246db560433337a3c1c24affee</anchor>
      <arglist>(vector &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>begin</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ae423119e0bdfbbee72988f546a58d9fd</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>end</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a10bc39751925224817204975587a5641</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>ab76b38d7c2d6406c434f8bb589c073ea</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend const_iterator</type>
      <name>cend</name>
      <anchorfile>structmuu_1_1vector.html</anchorfile>
      <anchor>a29fa2209bbaa1542881ab8293e680646</anchor>
      <arglist>(const vector &amp;v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>muu</name>
    <filename>namespacemuu.html</filename>
    <namespace>muu::build</namespace>
    <namespace>muu::literals</namespace>
    <namespace>muu::strong_typedef_traits</namespace>
    <class kind="class">muu::accumulator</class>
    <class kind="struct">muu::axis_angle</class>
    <class kind="class">muu::blob</class>
    <class kind="struct">muu::bounding_box</class>
    <class kind="class">muu::compressed_pair</class>
    <class kind="class">muu::emplacement_array</class>
    <class kind="struct">muu::euler_angles</class>
    <class kind="class">muu::function_view</class>
    <class kind="struct">muu::constants</class>
    <class kind="struct">muu::generic_allocator</class>
    <class kind="struct">muu::half</class>
    <class kind="struct">muu::constants&lt; half &gt;</class>
    <class kind="class">muu::hash_combiner</class>
    <class kind="class">muu::fnv1a</class>
    <class kind="class">muu::sha1</class>
    <class kind="struct">muu::integral_range</class>
    <class kind="struct">muu::line_segment</class>
    <class kind="struct">muu::constants&lt; line_segment&lt; Scalar &gt; &gt;</class>
    <class kind="struct">muu::matrix</class>
    <class kind="struct">muu::constants&lt; matrix&lt; Scalar, Rows, Columns &gt; &gt;</class>
    <class kind="struct">muu::oriented_bounding_box</class>
    <class kind="struct">muu::packed_unit_vector</class>
    <class kind="struct">muu::constants&lt; packed_unit_vector&lt; Integer, Dimensions &gt; &gt;</class>
    <class kind="struct">muu::plane</class>
    <class kind="struct">muu::constants&lt; plane&lt; Scalar &gt; &gt;</class>
    <class kind="struct">muu::quaternion</class>
    <class kind="struct">muu::constants&lt; quaternion&lt; Scalar &gt; &gt;</class>
    <class kind="struct">muu::sat_tester</class>
    <class kind="class">muu::scope_guard</class>
    <class kind="class">muu::scope_fail</class>
    <class kind="class">muu::scope_success</class>
    <class kind="class">muu::span</class>
    <class kind="class">muu::static_string</class>
    <class kind="class">muu::string_param</class>
    <class kind="struct">muu::strong_typedef</class>
    <class kind="class">muu::tagged_ptr</class>
    <class kind="class">muu::thread_pool</class>
    <class kind="struct">muu::triangle</class>
    <class kind="struct">muu::constants&lt; triangle&lt; Scalar &gt; &gt;</class>
    <class kind="struct">muu::type_list</class>
    <class kind="struct">muu::uuid</class>
    <class kind="struct">muu::constants&lt; uuid &gt;</class>
    <class kind="struct">muu::vector</class>
    <class kind="struct">muu::constants&lt; vector&lt; Scalar, Dimensions &gt; &gt;</class>
    <class kind="struct">muu::constants&lt; float &gt;</class>
    <class kind="struct">muu::constants&lt; double &gt;</class>
    <class kind="struct">muu::constants&lt; long double &gt;</class>
    <class kind="struct">muu::constants&lt; __fp16 &gt;</class>
    <class kind="struct">muu::constants&lt; _Float16 &gt;</class>
    <class kind="struct">muu::constants&lt; float128_t &gt;</class>
    <class kind="struct">muu::constants&lt; char &gt;</class>
    <class kind="struct">muu::constants&lt; wchar_t &gt;</class>
    <class kind="struct">muu::constants&lt; char8_t &gt;</class>
    <class kind="struct">muu::constants&lt; char16_t &gt;</class>
    <class kind="struct">muu::constants&lt; char32_t &gt;</class>
    <class kind="struct">muu::constants&lt; signed char &gt;</class>
    <class kind="struct">muu::constants&lt; unsigned char &gt;</class>
    <class kind="struct">muu::constants&lt; signed short &gt;</class>
    <class kind="struct">muu::constants&lt; unsigned short &gt;</class>
    <class kind="struct">muu::constants&lt; signed int &gt;</class>
    <class kind="struct">muu::constants&lt; unsigned int &gt;</class>
    <class kind="struct">muu::constants&lt; signed long &gt;</class>
    <class kind="struct">muu::constants&lt; unsigned long &gt;</class>
    <class kind="struct">muu::constants&lt; signed long long &gt;</class>
    <class kind="struct">muu::constants&lt; unsigned long long &gt;</class>
    <class kind="struct">muu::constants&lt; int128_t &gt;</class>
    <class kind="struct">muu::constants&lt; uint128_t &gt;</class>
    <member kind="typedef">
      <type>__int128_t</type>
      <name>int128_t</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gaf8e0aa5a37ec05e07c7b69077de9303c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>__uint128_t</type>
      <name>uint128_t</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gaa82164a62949a1b029695dff5441d577</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>__float128</type>
      <name>float128_t</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga74a70ec9e3331f37ebbc3e875e183861</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_range&lt; size_t &gt;</type>
      <name>index_range</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga5e513b55fd7079d1be1debe2962fdd20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_range&lt; uintptr_t &gt;</type>
      <name>uintptr_range</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga981c7cbd101c1e1a282d7e89eef00965</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_range&lt; intptr_t &gt;</type>
      <name>intptr_range</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gaa28ee361f8507f8ed4615cc8f0c28354</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_range&lt; std::byte * &gt;</type>
      <name>byteptr_range</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab0ee666138056710136d9532965d1565</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; std::remove_reference_t&lt; T &gt; &gt;</type>
      <name>remove_cvref</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3cac44d2af43c4fd98e835ff5b28988a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::remove_enum_&lt; T &gt;::type</type>
      <name>remove_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga4f0f94bba132e44d22663319f05d2ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::remove_lvalue_reference_&lt; T &gt;::type</type>
      <name>remove_lvalue_reference</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga13a69e455c20f67fc73394a02831e8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::remove_rvalue_reference_&lt; T &gt;::type</type>
      <name>remove_rvalue_reference</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga82a7eca9ca8f07f6779eff47f45d5a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::largest_&lt; T, U... &gt;::type</type>
      <name>largest</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga66c7ac2c2ba5ae0358a9c398ca1a5fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::smallest_&lt; T, U... &gt;::type</type>
      <name>smallest</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7b0e548ad93b4b2fabc3c38eadd456c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::most_aligned_&lt; T, U... &gt;::type</type>
      <name>most_aligned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga412a873e98a67c58f4bcb71bb8c23ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::least_aligned_&lt; T, U... &gt;::type</type>
      <name>least_aligned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga14d4e47d4a3ee4bcae55745a917343e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_ref_&lt; T, std::add_const_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt;::type</type>
      <name>add_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6c121fbd44449d05f6a34f26d51d923f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_ref_&lt; T, std::remove_const_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt;::type</type>
      <name>remove_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6d7666d41f4b1baa5e5b030e85d145c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; Const, add_const&lt; T &gt;, remove_const&lt; T &gt; &gt;</type>
      <name>set_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga70ea61c88a2156d5ca0576b338692597</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; AddConst, add_const&lt; T &gt;, T &gt;</type>
      <name>conditionally_add_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga23ee95c345637ff50a6cc88c4fb0d031</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>set_const&lt; T, is_const&lt; CopyFrom &gt; &gt;</type>
      <name>copy_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3e944d0a62580bb16190d18a7a50e854</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_ref_&lt; T, std::add_volatile_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt;::type</type>
      <name>add_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf658a920120d44cf78a83198479de23c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_ref_&lt; T, std::remove_volatile_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt;::type</type>
      <name>remove_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gabb6c34cb7b210e52a6d0d9e53234696b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; Volatile, add_volatile&lt; T &gt;, remove_volatile&lt; T &gt; &gt;</type>
      <name>set_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3216c56b6dfa3cd6045818d2f8e09612</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; AddVolatile, add_volatile&lt; T &gt;, T &gt;</type>
      <name>conditionally_add_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga5387101d09160941cca73a48954eb7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>set_volatile&lt; T, is_volatile&lt; CopyFrom &gt; &gt;</type>
      <name>copy_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gafdebb5c32611e098bd4074c6393ad55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_ref_&lt; T, std::add_volatile_t&lt; std::add_const_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt; &gt;::type</type>
      <name>add_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga946998d98f22705d1e955cc213187310</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_ref_&lt; T, std::remove_volatile_t&lt; std::remove_const_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt; &gt;::type</type>
      <name>remove_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3d3fbe6cee41ab6b225058f8d29a17d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; ConstVolatile, add_cv&lt; T &gt;, remove_cv&lt; T &gt; &gt;</type>
      <name>set_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga75174a7728c44e0ef2c5c573910945d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; AddConstVolatile, add_cv&lt; T &gt;, T &gt;</type>
      <name>conditionally_add_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaccbf5f71e9b673c2f490c0c0406042ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>copy_const&lt; copy_volatile&lt; T, CopyFrom &gt;, CopyFrom &gt;</type>
      <name>copy_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga13aaa81d66b143ecb5d837c8c0041d18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::copy_ref_&lt; T, CopyFrom &gt;::type</type>
      <name>copy_ref</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa11d1a8c1d6c16d5381a6f1d11940294</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>copy_ref&lt; copy_cv&lt; std::remove_reference_t&lt; T &gt;, std::remove_reference_t&lt; CopyFrom &gt; &gt;, CopyFrom &gt;</type>
      <name>copy_cvref</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga75bafae329db57745b406a02e6565007</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_pointer_&lt; Ptr, NewBase &gt;::type</type>
      <name>rebase_pointer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga29769609b73728e3b7814d36a7e0c335</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::make_signed_&lt; T &gt;::type</type>
      <name>make_signed</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga8723b987045c7b40be5ce133a46e899c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::make_unsigned_&lt; T &gt;::type</type>
      <name>make_unsigned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga5f3932e1b40c23bd953e0444340aa1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; Signed, make_signed&lt; T &gt;, make_unsigned&lt; T &gt; &gt;</type>
      <name>set_signed</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gafed1fc9809926331d0cdfb6ea3c1cb7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>set_signed&lt; T, is_signed&lt; CopyFrom &gt; &gt;</type>
      <name>copy_signed</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac5e348d0385db539de78faa96895dba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; Unsigned, make_unsigned&lt; T &gt;, make_signed&lt; T &gt; &gt;</type>
      <name>set_unsigned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga53618440cb88b6a660781cd80eff06cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>set_unsigned&lt; T, is_unsigned&lt; CopyFrom &gt; &gt;</type>
      <name>copy_unsigned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa51e86e5712ddee88175a905c427ff62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::type_identity_&lt; T &gt;::type</type>
      <name>type_identity</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga8b8f215acad0e9f3d7aa52326155f030</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::unsigned_integer_&lt; Bits &gt;::type</type>
      <name>unsigned_integer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga47a90ed3608cf7b0bf562f4ad208cd21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::signed_integer_&lt; Bits &gt;::type</type>
      <name>signed_integer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga4f67907a17de3414f8f0340716e987d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::remove_all_pointers_&lt; T &gt;::type</type>
      <name>remove_all_pointers</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaff6410affb3cb93013482639fcaea000</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>copy_cvref&lt; typename impl::remove_callconv_&lt; remove_cvref&lt; T &gt; &gt;::type, T &gt;</type>
      <name>remove_callconv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga4af6796f51934576020a09a73986d074</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>copy_cvref&lt; typename impl::add_noexcept_&lt; remove_cvref&lt; T &gt; &gt;::type, T &gt;</type>
      <name>add_noexcept</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga5087ff7f20ed1765f215b92e4b56cd6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>copy_cvref&lt; typename impl::remove_noexcept_&lt; remove_cvref&lt; T &gt; &gt;::type, T &gt;</type>
      <name>remove_noexcept</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga28bb77154a6d0fb8930b84c5d59373d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; impl::is_small_float_&lt; T &gt;, typename impl::rebase_ref_&lt; T, copy_cv&lt; float, T &gt; &gt;::type, T &gt;</type>
      <name>promote_if_small_float</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga0a3f15c5886ad6189103d5705db8e37c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; impl::is_large_float_&lt; T &gt;, typename impl::rebase_ref_&lt; T, copy_cv&lt; long double, T &gt; &gt;::type, T &gt;</type>
      <name>demote_if_large_float</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga588efdcdebc69e38cb6353d8462d59ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>demote_if_large_float&lt; promote_if_small_float&lt; T &gt; &gt;</type>
      <name>clamp_to_standard_float</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae07552fde8149d1a8a6c93971edbbd86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>impl::std_math_common_type&lt; remove_cvref&lt; T &gt;... &gt;</type>
      <name>epsilon_type</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga25162e97f327cfee39320e501bdb2697</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::integral_constant&lt; size_t, N &gt;</type>
      <name>index_tag</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6ca7fed60fe86574dd8bedf3b3332431</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_tag&lt; 0 &gt;</type>
      <name>x_axis_tag</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga8c02cd07c84b1ef589a0a3b83e113682</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_tag&lt; 1 &gt;</type>
      <name>y_axis_tag</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6195dfd7a074e2a16f6c61500c45fe23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_tag&lt; 2 &gt;</type>
      <name>z_axis_tag</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga480c8ad7ee9e1cc7bcafa16d817bca1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_tag&lt; 3 &gt;</type>
      <name>w_axis_tag</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga91d696211c0fb4edebb87611d7fab7df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>span&lt; const T, Extent &gt;</type>
      <name>const_span</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>ga842ca2a75ebbf9f8c1a2ce90afa8f3bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>span&lt; std::byte &gt;</type>
      <name>byte_span</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>gae6d7d07e5320ddbc969461099bd00db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>span&lt; const std::byte &gt;</type>
      <name>const_byte_span</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>gaefedbd706a97f094756e86befffcf178</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_list&lt; T &gt;</type>
      <name>type_tag</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga90483ba1ebb9236ec76a1e5c3a0d9bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>uuid_variant</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a0af5ea664875aa7ce96e0105152bc59c</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemuu.html" anchor="a0af5ea664875aa7ce96e0105152bc59ca334c4a4c42fdb79d7ebc3e73b517e6f8">none</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="a0af5ea664875aa7ce96e0105152bc59cac00f0c4675b91fb8b918e4079a0b1bac">standard</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="a0af5ea664875aa7ce96e0105152bc59cae966b89dbea9cb554e901f2978c329b6">reserved_ncs</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="a0af5ea664875aa7ce96e0105152bc59cac7cee24c14e39b1f43ae8fbbe515c8d9">reserved_microsoft</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="a0af5ea664875aa7ce96e0105152bc59cac28fc2abb01622a9e2696124c3693086">reserved_future</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>uuid_version</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>ab0531af99b7f9b575c98ea05d8b76bc8</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemuu.html" anchor="ab0531af99b7f9b575c98ea05d8b76bc8a334c4a4c42fdb79d7ebc3e73b517e6f8">none</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="ab0531af99b7f9b575c98ea05d8b76bc8a07cc694b9b3fc636710fa08b6922c42b">time</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="ab0531af99b7f9b575c98ea05d8b76bc8a3a5aed6b06fcfed497ba6585ae456878">dce</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="ab0531af99b7f9b575c98ea05d8b76bc8a4723a0fd093feaf03788fea4e81de56a">name_md5</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="ab0531af99b7f9b575c98ea05d8b76bc8a7ddf32e17a6ac5ce04a8ecbf782ca509">random</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="ab0531af99b7f9b575c98ea05d8b76bc8a79998e27ea91ebec2647c8cb2c145285">name_sha1</enumvalue>
      <enumvalue file="namespacemuu.html" anchor="ab0531af99b7f9b575c98ea05d8b76bc8aad921d60486366258809553a3db49a4a">unknown</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>box_corner</name>
      <anchorfile>group__math.html</anchorfile>
      <anchor>gaea66a56dd5d6fff0e1d6647c774eed1e</anchor>
      <arglist></arglist>
      <enumvalue file="group__math.html" anchor="ggaea66a56dd5d6fff0e1d6647c774eed1ead8bd79cc131920d5de426f914d17405a">min</enumvalue>
      <enumvalue file="group__math.html" anchor="ggaea66a56dd5d6fff0e1d6647c774eed1ea9dd4e461268c8034f5c8564e155c67a6">x</enumvalue>
      <enumvalue file="group__math.html" anchor="ggaea66a56dd5d6fff0e1d6647c774eed1ea415290769594460e2e485922904f345d">y</enumvalue>
      <enumvalue file="group__math.html" anchor="ggaea66a56dd5d6fff0e1d6647c774eed1ea3e44107170a520582ade522fa73c1d15">xy</enumvalue>
      <enumvalue file="group__math.html" anchor="ggaea66a56dd5d6fff0e1d6647c774eed1eafbade9e36a3f36d3d676c1b808451dd7">z</enumvalue>
      <enumvalue file="group__math.html" anchor="ggaea66a56dd5d6fff0e1d6647c774eed1eadbd69ee9ae289a85ea34dbef8435d7c1">xz</enumvalue>
      <enumvalue file="group__math.html" anchor="ggaea66a56dd5d6fff0e1d6647c774eed1ea2151a2bc77807b81113febbf50c4bc95">yz</enumvalue>
      <enumvalue file="group__math.html" anchor="ggaea66a56dd5d6fff0e1d6647c774eed1ead16fb36f0911f878998c136191af705e">xyz</enumvalue>
      <enumvalue file="group__math.html" anchor="ggaea66a56dd5d6fff0e1d6647c774eed1ea2ffe4e77325d9a7152f7086ea7aa5114">max</enumvalue>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>countl_zero</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga12cd318fdcf736ca99f5bf66aa615fd1</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>countr_zero</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab5b51a3c121984cfddb8d5da4e9bf070</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>countl_one</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gadf75326611fa43dbacc1ff601e9e969b</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>countr_one</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga84963e1a7bf75ec7464cda53b26dec8a</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>bit_ceil</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gae62fd9413cd433a4e15c0fdf89913a1b</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>bit_pack</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga952a65241777f79e5561239f57ec9295</anchor>
      <arglist>(T val1, U val2, V... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>popcount</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab392bc74729da41c4d226f8d45e58599</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_single_bit</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga309ac880015add971ee06b148191060f</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>bit_floor</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga0ef1d5961e901e2d52b3d6be07efe201</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>bit_width</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga1a764507fe486799f60eac32c622e63e</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>bit_fill_right</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab5cb8d563f61573ca1e2827ddd085d3d</anchor>
      <arglist>(size_t count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>bit_fill_left</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gaf41f6cc12b0e9ac1de1bdf63e2a28fdf</anchor>
      <arglist>(size_t count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr uint8_t</type>
      <name>byte_select</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gae644160cd7d978d95922af233afc5ddd</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr uint8_t</type>
      <name>byte_select</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga18d1da41b1d53329c0d0605596494010</anchor>
      <arglist>(T val, size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>byte_reverse</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab3e8f4f75d417dc6880311de6c9306e9</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>swizzle</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga1aaa24bb10d08ad78c86695baabc1857</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga4bac8a8324b2e1ef33cec0f7a8f718ce</anchor>
      <arglist>(const bounding_box&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga0535df1acd603649ac9f793d96062112</anchor>
      <arglist>(const bounding_box&lt; S &gt; &amp;q1, const bounding_box&lt; T &gt; &amp;q2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga75782bf3bacf4ef690b1811d84c9f7ea</anchor>
      <arglist>(const bounding_box&lt; S &gt; &amp;q, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gafea7a631de7f6399fb55e1dffbe79c00</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga5e3a3b5d552cc29822e1a17fdd1cc3bd</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga87bf7f92a62590f695617cea9bb941fe</anchor>
      <arglist>(half a, half b, half epsilon=constants&lt; half &gt;::default_epsilon) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga5df3be4319d056f5a12b082177b1f8dd</anchor>
      <arglist>(half x, half epsilon=constants&lt; half &gt;::default_epsilon) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>ga33492d2d742e23fb32d6feddeb0a12a5</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gadb3f9b52071aea9fe1cf894a7fb9c039</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga435fcf395534dfec9465ed87a52fc88d</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gae9514bab097b1d4944394221097d5449</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>ga3f48d168cf2a5cc17d95fd4860ce8267</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga02cf6ce14db45d5f2148ffbb9e33438e</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>ga2b2e08e3f3a3e7db4751921441317963</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga8bb8129170a7cc7e9902de607e1c8279</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>gab24a151709d5cbfc7c049d279307ec54</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>gac59b7164798fbb5ae72b13010ac7f960</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga7b0d41cadc47ad6e8255fa170f640be1</anchor>
      <arglist>(half y, half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga7d194c0af560d9e78eab17a4e76d17a5</anchor>
      <arglist>(half start, half finish, half alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gae3196eacbe3561ca0edc39d280f31585</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga7569b01664a740bf2ecc532e22c3b487</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>begin_iterator</name>
      <anchorfile>group__iterators.html</anchorfile>
      <anchor>ga51289db4c35d5fb00c9a63be59911a08</anchor>
      <arglist>(T &amp;&amp;iterable) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>end_iterator</name>
      <anchorfile>group__iterators.html</anchorfile>
      <anchor>gaa1738bf3c1eae5986fd53eafe6ad7c3e</anchor>
      <arglist>(T &amp;&amp;iterable) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>iterator_distance</name>
      <anchorfile>group__iterators.html</anchorfile>
      <anchor>ga005a07ba4450155afd1ef02e317a9d9b</anchor>
      <arglist>(B begin, E end) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gafe018cc9e24195a2edf98017340c2263</anchor>
      <arglist>(const line_segment&lt; S &gt; &amp;seg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga9feb4d4d3c2c67ad383254a73fdeff52</anchor>
      <arglist>(const line_segment&lt; S &gt; &amp;seg1, const line_segment&lt; T &gt; &amp;seg2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gac5e6b9f30f0e565a9893ba7c7fea821b</anchor>
      <arglist>(const line_segment&lt; S &gt; &amp;seg, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga244d41fcb34e53c950eddd916a6d5396</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga251c6b64050eadcb5c29cd852e89381f</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gaaefff82330e72babbf53ba1d2fc970d5</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga7fd6b8649626ba472b2b465f42de1d7b</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga5a34372404d7751b9b764754b94d3b30</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga01537de80625dd04856c091786a51c21</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gae0e73f57dfe538bfb813978525d029b4</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga7165ec00307546834b2cfec5dcd18920</anchor>
      <arglist>(const T &amp;obj) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gac83f0d0b00f182e5cfa6ae4dfa9ad12c</anchor>
      <arglist>(const T(&amp;vals)[N]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga0f071cb7be895ff5f3176182306cb1a9</anchor>
      <arglist>(const T &amp;val1, const U &amp;val2, const V &amp;... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga89d1dcc8041ac8452317eae1d21493b2</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga8721fd9fd4f1431a5f9dd1a22cdf3d3e</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>gaeeeae9c211e65058c12d8c29e67c9157</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga6627ff562c64be1de075e0039502adf5</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga381bc8195a18ac0c461fb994bfdab418</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga97fef737f56413a711ba50907cea741d</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr signed char</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>gaef9c6f1c1301cdb38630e96475188561</anchor>
      <arglist>(signed char x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr short</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga5bc7d2857695d07a4f93f0d9b79603bd</anchor>
      <arglist>(short x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga6d0020d25e08aef7b2f3a927fd75e128</anchor>
      <arglist>(int x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga86ac6e3fe0a4a6168c32a44aa9b3def6</anchor>
      <arglist>(long x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long long</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>gaabdbc172d4985254b63025116f687c7e</anchor>
      <arglist>(long long x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>gafbffb9903578ee8c8b87337ec83d5c1f</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gaec4759ac5b40da6afc50eb0b3585f0fe</anchor>
      <arglist>(float a, float b, float epsilon=default_epsilon&lt; float &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gab93e074083f9da2915b8a5236f1cf7cf</anchor>
      <arglist>(double a, double b, double epsilon=default_epsilon&lt; double &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga943da06224480e3230fc1420a245f98c</anchor>
      <arglist>(long double a, long double b, long double epsilon=default_epsilon&lt; long double &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga9b1e5da7e9ef7782a93da63b886ae258</anchor>
      <arglist>(float128_t a, float128_t b, float128_t epsilon=default_epsilon&lt; float128_t &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gaac1ff3710f8b52479141460b908e0019</anchor>
      <arglist>(_Float16 a, _Float16 b, _Float16 epsilon=default_epsilon&lt; _Float16 &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gafeb998d47625b367c261d8bc59c7a282</anchor>
      <arglist>(__fp16 a, __fp16 b, __fp16 epsilon=default_epsilon&lt; __fp16 &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga6a04d11e27ed0da907193cdd51b5015e</anchor>
      <arglist>(T a, U b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga3156cd82de6c0da5a9054c544ee99725</anchor>
      <arglist>(float x, float epsilon=default_epsilon&lt; float &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gaa419296539b7bda59ef0f8bf62ac330c</anchor>
      <arglist>(double x, double epsilon=default_epsilon&lt; double &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gafe3ff928bf4edd7f2b341ee9f8480789</anchor>
      <arglist>(long double x, long double epsilon=default_epsilon&lt; long double &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga2e4ec0adf720b9c8fcd10344c1bf81eb</anchor>
      <arglist>(float128_t x, float128_t epsilon=default_epsilon&lt; float128_t &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga6f7edf9230c38096dead05a99bf5be4b</anchor>
      <arglist>(_Float16 x, _Float16 epsilon=default_epsilon&lt; _Float16 &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga7376c26dbf846ee7e5eebbe68e431042</anchor>
      <arglist>(__fp16 x, __fp16 epsilon=default_epsilon&lt; __fp16 &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gabd16d3c6f14a660d037f92e612bb4dc9</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>ga789b6da21314c806db7da27d11e112c6</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>ga67232bb43da7a03d03e2b2f40356a76b</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>gaf0492a080471ae79fe3e4e31832c514f</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>ga26d3f4cb15a587f4d825cbdca7f031ae</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>gac9a12e90b0fa7067a096e068e764cabf</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>gae46f187d01b8118d5f2a778c59674c88</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>ga630c2ae425d1019e5a06101111c299f1</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>ga15a26c9fb021ca5f9ac27fb0f4636060</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gabc53ad88d9c76a9b0ed2b42c81d2ea9d</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>ga1c484df90484d3f74112cfbe0208c602</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>ga121a468fa346aedba09c1dfd59430269</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gace09eecb7e26047a4d4be5f822022134</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gadf94b04b23c51e89aaf98d5d9eeef9b8</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gaa15d5ffe910a00ffbeb36c5fc16e2a97</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga4133ea944ff868e69eabab5d872f6da4</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga5b1bf68a67a05d300f8e9c7fd5d1c026</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga603ad552348bcbdb218217d23675d3ce</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>gabd0f8319f64fbe7ca4c1e6739f44d962</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga26b70752b25e3620d807aa8b4f533c38</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga04769433189ec11e79f9abb3da5b8856</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>gafb8dd23cf2d5d5628aa5f09cd7af2035</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gaffcbf014cc8896089708ff930c4aa988</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>ga3a3a9c69cbc81f27d3263cb91ba226ef</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gacbaec835db4344520dfb7a296d05bed6</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gae6fe268bd38f8fd1eb4cf94d16e10002</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gafb9b963d32e3298aa442292557578715</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gabf84b6eab050b7d991fe2cbd38a307db</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>ga0049c8d9a89e3cb79523681de737e744</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>gafc968973dde0c97322c9c6669f954e2d</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>ga0648930ad64bdc3816542f336b88e92d</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>ga56a1b3ab18e271f42aa180990868261b</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>gae466125efc53b0afbe2f48c3a3c7fa95</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>ga6eab0abb46d5296fc69b951458aae6c9</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>ga79827b43adcd7eef2612c45b91eda40c</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>gaad6641ec7b924bb662a329f42f1f1423</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga929628806abc68d22dc9224af0578dd2</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>gada49fd50fe8b4101cdd948cdc43ac8c0</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga956da7e0f0a5e6e3b8ffeb84c5327e18</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga976c36817620570e8dc2f9903f6f8d9f</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga8334763ec29d37322967387ad8096695</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga3b1f6ef1c2bbad4f86a34de5f8ee7124</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga3ea18db1b6602dbb58f54ff998953c05</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>ga7aa14fc0444bf0176a1e46e66e3ad747</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>gad882d4b32f9b5fc1d2030b174aa6ef5f</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>gaae78f62d62005d88dc86b9b6cc59f50c</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>gac1e4f5cd1d0b9edebc1ff8ec5046ebcd</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>gaee469cec74af5f1d1e84544a7b26e69d</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>ga3583e5518d781304a7be684fc009bdbd</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>ga1a8ef0810e060c707c554fa995a989fc</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga69b28eed21b5f99faf7076f3349455dc</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga2abfdb52a5d3b98ab3119da1155eb960</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga9803e5bf3be9b110ddd704dafc891b2d</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>gaeb05383011594d02f233899de601bfda</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga06579a5e3c5e853163f611c25b2b7b79</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga189bbc017d8f1f7c9885f68b7fb36bb0</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga7b9d06979da170a3200f6b675f0a682e</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga14329b7d2af039a939b5b03a643dbd0f</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga1754f8044c13e5db0546b85a7d9db66e</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga380b08f5141db6f53cee3c2ab2eb4231</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga971a48168d347e790c546b65fcd0689a</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga22633d8890da645ac8e10a13a785c3e4</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga38d3272314ef4433f29ac56ea51762a8</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga05267e8f5abd22ac560bd3564bb7607f</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>gad38e7dc443023ed27f26058455c30b30</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>ga6aaf46f37bb83640e45b37e0aea858b8</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>ga0d93faf1621f38f7e0ed7cfaf37076f4</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>ga0ecacb3f5d6607739ebcb5b6cc612a64</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>ga28990b3c84d9b9a7fde19401b936339a</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>ga8e1d8ec2569793e50d9a21d02b61b5ba</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>gaf0779f07b81c81d2ec64131dcc54bcfd</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga68e17f23ef350ccc6e6bd8c20611da12</anchor>
      <arglist>(float y, float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga5a5edbb63697e0d3895ecee9d3639123</anchor>
      <arglist>(double y, double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga1766c7359209816b8bd4317b9c587f79</anchor>
      <arglist>(long double y, long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga25d67472f15352ffe17f9bd14446ce56</anchor>
      <arglist>(float128_t y, float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>gabab1e3ea2e16d7346043f57b57a18d49</anchor>
      <arglist>(_Float16 y, _Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga19204446bd2c384f0bf47d779035c414</anchor>
      <arglist>(__fp16 y, __fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>gabcd89688add70b87668b772617a3cc11</anchor>
      <arglist>(Y y, X x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga86b8aacc099deefdf6284d9bab7f2dad</anchor>
      <arglist>(float start, float finish, float alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga47e41d7626365fcf881152c286833b5a</anchor>
      <arglist>(double start, double finish, double alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga44b514d356d6673cc0595cf0390dd8de</anchor>
      <arglist>(long double start, long double finish, long double alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga614ccb878d52686237995f87013cfae5</anchor>
      <arglist>(float128_t start, float128_t finish, float128_t alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga2ef795b3516004d50fdb7003c388e15d</anchor>
      <arglist>(_Float16 start, _Float16 finish, _Float16 alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga18ab33f3d13ed00aaabb060162e64a07</anchor>
      <arglist>(__fp16 start, __fp16 finish, __fp16 alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga348d51a08675a8a83b04e59b7705c29e</anchor>
      <arglist>(T start, U finish, V alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gafa124ba1db7c179c3fa9f9ad12539c59</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>ga596c2eab90545d145798f271bebc72b5</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gaf5cb38b69c2f8c41f7fd1e9e0084d704</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gaefa5c95a33e9ba84e03e0bfd46768e68</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gaff4c5fbdda0cf56d41e39dcc0320a5d6</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>ga9266da36d4d28c201f1d0896e64ce593</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gaba28a922cc3cfdbce286f477c8b90528</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga1b9e36906462a78fe344cd8bf545d479</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga68aec6ced168d6572172e0096b46bb68</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>gad98b33969ab11460f65c71aea940588d</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga1115610c44cc6ac505aac869b401e2f9</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga5fb741c82216a6a033043a3e8759eabb</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>gab9a123e29471417050aeb3281e0d7b9a</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga704dca3f184e06b3f20ee77f063a6536</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>lcm</name>
      <anchorfile>group__math.html</anchorfile>
      <anchor>ga747762e03956634201248a153ce0ce5e</anchor>
      <arglist>(T val1, U val2, V... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>gcd</name>
      <anchorfile>group__math.html</anchorfile>
      <anchor>ga54f9d1a2efa5ffdf81afdaa4fcb89fd6</anchor>
      <arglist>(T val1, U val2, V... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>evenly_distribute</name>
      <anchorfile>group__math.html</anchorfile>
      <anchor>gabf640468db93ee9390f6809f2495a291</anchor>
      <arglist>(T total, T bucket_count, T bucket_index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga1f57b7af70f0235ad644486a5943e582</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gac9148a5c5b63c63d14ca506aee43484e</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m1, const matrix&lt; T, R, C &gt; &amp;m2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gae6774c12326004b4e421e554a35afe8b</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr matrix&lt; S, C, R &gt;</type>
      <name>transpose</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a4d11bad2718bdbb090fb73ab6c5def00</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr determinant_type</type>
      <name>determinant</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a4cb7a56d0f2260af3ceb0b0c5204ed0b</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr inverse_type</type>
      <name>invert</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a279539802143d8a8227c503be45aa972</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr matrix&lt; S, R, C &gt;</type>
      <name>orthonormalize</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>abe6723009e315776a0868a4062e4537b</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gade7f3e7d056853c9e542ec453394a9c4</anchor>
      <arglist>(const oriented_bounding_box&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga44033f904b7ed733949dab5e6acccd16</anchor>
      <arglist>(const oriented_bounding_box&lt; S &gt; &amp;q1, const oriented_bounding_box&lt; T &gt; &amp;q2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga4c274a76495695493647b4e0b7af1299</anchor>
      <arglist>(const oriented_bounding_box&lt; S &gt; &amp;q, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gaa55cd1d8c3534c8ffc01aea226c26997</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gae2d90458dab99f2b1ff2283177ba5835</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p1, const plane&lt; T &gt; &amp;p2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gaffffd5920be4c9358ad1e0e0e57a7e15</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>normalized</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a3d29ca53ac092c2e6f66617be57f61b2</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gaffcaea7f39fc17894285d8221923387e</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga6b8d6921c4f39c5881a7ea6f95f33392</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q1, const quaternion&lt; T &gt; &amp;q2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga04dec66856dc79915e9130ef3693e9f2</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>normalized</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>aa0566104402180d9b3945e6bae7f3615</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr S</type>
      <name>dot</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>ae3e92df79fe85ed96266ca70d660de8d</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q1, const quaternion&lt; S &gt; &amp;q2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr quaternion&lt; S &gt;</type>
      <name>normalize</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>aa80b85fea6664e3d955f129f9eff4a41</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr quaternion&lt; S &gt;</type>
      <name>slerp</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a8df75ca3a9d767d9132a8bf68c922ea7</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;start, const quaternion&lt; S &gt; &amp;finish, S alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>span&lt; const std::byte, impl::as_bytes_extent&lt; T, N &gt; &gt;</type>
      <name>as_bytes</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>gacaa08dc6422b5847e58a7c4ab9557362</anchor>
      <arglist>(span&lt; T, N &gt; s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>span&lt; std::byte, impl::as_bytes_extent&lt; T, N &gt; &gt;</type>
      <name>as_writable_bytes</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>gab6812fcab12e2e24abb7261d0f895fcb</anchor>
      <arglist>(span&lt; T, N &gt; s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>trim</name>
      <anchorfile>group__trim.html</anchorfile>
      <anchor>ga591693ed2095787d40f63ae8c0c60b74</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::wstring_view</type>
      <name>trim</name>
      <anchorfile>group__trim.html</anchorfile>
      <anchor>ga71cd0aeed9fed904bbdd3789c81684a3</anchor>
      <arglist>(std::wstring_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u16string_view</type>
      <name>trim</name>
      <anchorfile>group__trim.html</anchorfile>
      <anchor>gac721a6b23447d8c2950803acf99a8f34</anchor>
      <arglist>(std::u16string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u32string_view</type>
      <name>trim</name>
      <anchorfile>group__trim.html</anchorfile>
      <anchor>ga74cfd907d595f68a757aa50640f9d210</anchor>
      <arglist>(std::u32string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u8string_view</type>
      <name>trim</name>
      <anchorfile>group__trim.html</anchorfile>
      <anchor>gabc24677b997440512aefe4e685b0d2a7</anchor>
      <arglist>(std::u8string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>trim_left</name>
      <anchorfile>group__trim__left.html</anchorfile>
      <anchor>ga3aea46929051176b4afb4e23b551ffc5</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::wstring_view</type>
      <name>trim_left</name>
      <anchorfile>group__trim__left.html</anchorfile>
      <anchor>gac23a274a25ef0a4e5b97c0d46b2ccd39</anchor>
      <arglist>(std::wstring_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u16string_view</type>
      <name>trim_left</name>
      <anchorfile>group__trim__left.html</anchorfile>
      <anchor>ga3c0e502baa6f3067e1d26bf5572938f8</anchor>
      <arglist>(std::u16string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u32string_view</type>
      <name>trim_left</name>
      <anchorfile>group__trim__left.html</anchorfile>
      <anchor>gae32d321796864fd5adeaaec227134e53</anchor>
      <arglist>(std::u32string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u8string_view</type>
      <name>trim_left</name>
      <anchorfile>group__trim__left.html</anchorfile>
      <anchor>gad2bab2c91264a3b5241a8d182c922ebd</anchor>
      <arglist>(std::u8string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>trim_right</name>
      <anchorfile>group__trim__right.html</anchorfile>
      <anchor>ga3f499b7f36518026e86dd95624740111</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::wstring_view</type>
      <name>trim_right</name>
      <anchorfile>group__trim__right.html</anchorfile>
      <anchor>ga24e088ccb48af0182c8cc2e433a7cae8</anchor>
      <arglist>(std::wstring_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u16string_view</type>
      <name>trim_right</name>
      <anchorfile>group__trim__right.html</anchorfile>
      <anchor>ga18068afb63f4c781d92f7895872a180c</anchor>
      <arglist>(std::u16string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u32string_view</type>
      <name>trim_right</name>
      <anchorfile>group__trim__right.html</anchorfile>
      <anchor>ga5c65eceb22233e5c09096e48cadeb195</anchor>
      <arglist>(std::u32string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u8string_view</type>
      <name>trim_right</name>
      <anchorfile>group__trim__right.html</anchorfile>
      <anchor>gacd9946ff120c34af5e6634c247a50ba5</anchor>
      <arglist>(std::u8string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; Char &gt;</type>
      <name>transcode</name>
      <anchorfile>group__transcode.html</anchorfile>
      <anchor>ga410a285aafea5eff602d2b95626b7b3d</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; Char &gt;</type>
      <name>transcode</name>
      <anchorfile>group__transcode.html</anchorfile>
      <anchor>ga4b033339ba2cec62aba96a5ec7f3261c</anchor>
      <arglist>(std::wstring_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; Char &gt;</type>
      <name>transcode</name>
      <anchorfile>group__transcode.html</anchorfile>
      <anchor>gaf51112f9bc5c2f25bcdfe34f6b902e7e</anchor>
      <arglist>(std::u16string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; Char &gt;</type>
      <name>transcode</name>
      <anchorfile>group__transcode.html</anchorfile>
      <anchor>ga08c5dabffb22594f3b2589551b5875e4</anchor>
      <arglist>(std::u32string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; Char &gt;</type>
      <name>transcode</name>
      <anchorfile>group__transcode.html</anchorfile>
      <anchor>ga6de085cbec631f5bb8c79c432749185a</anchor>
      <arglist>(std::u8string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga73ae74e7ab9484fb2ee90a67e91c1b08</anchor>
      <arglist>(const triangle&lt; S &gt; &amp;tri) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga2881bac8c2bf5248013bbc7d94867005</anchor>
      <arglist>(const triangle&lt; S &gt; &amp;tri1, const triangle&lt; T &gt; &amp;tri2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga634f1c2a41e507ca065b3783a0401c3c</anchor>
      <arglist>(const triangle&lt; S &gt; &amp;tri, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga302affada638f7a69a77c925b1f38d93</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga5d86e15710b89e3c79399cd98f597efe</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v1, const vector&lt; T, D &gt; &amp;v2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gaa7e15ecff78c10af4eaa5b463eee9ca6</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>normalized</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a528d334a55d0d8e0349b3b746bfd8f58</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>length_squared</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>af307f925c296e9d48af1ac07f8397976</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>length</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a3a4a6f056f9ccb03312234014d928c82</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval delta_scalar_type</type>
      <name>consteval_length</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a4468463759178ee381f007205619c7f9</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>distance_squared</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>aa4daf32f61f3d16a4951ed22f1a17b27</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;p1, const vector&lt; S, D &gt; &amp;p2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>distance</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a2544755914a8b5e912e5c363b5696b1e</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;p1, const vector&lt; S, D &gt; &amp;p2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval delta_scalar_type</type>
      <name>consteval_distance</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a59590b8f7b7b8d67db414c1c719ebde9</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;p1, const vector&lt; S, D &gt; &amp;p2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr product_scalar_type</type>
      <name>dot</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a458166cf1b29e986402f7b3130ecbbed</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v1, const vector&lt; S, D &gt; &amp;v2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr product_type</type>
      <name>cross</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a69747a8040656c2d281a3078feed3f04</anchor>
      <arglist>(const vector&lt; S, 3 &gt; &amp;lhs, const vector&lt; S, 3 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>normalize</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>ac7f7d7901bd21fcfa2848c992e75dab6</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v, delta_scalar_type &amp;length_out) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>normalize</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a0901b5c81729a1e28b3dab7c0cf1bba3</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval vector&lt; S, D &gt;</type>
      <name>consteval_normalize</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>ac738833e62a49a9e0a4b977809d534ad</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_type</type>
      <name>direction</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a301d7c955199fcc78010b6b55d2797b5</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;from, const vector&lt; S, D &gt; &amp;to, delta_scalar_type &amp;distance_out) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_type</type>
      <name>direction</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>ac63b2e49523e6dc701fe704270fa0b39</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;from, const vector&lt; S, D &gt; &amp;to) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>min</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a7a74c1b4efea2acad86192f3fd9039c0</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v1, const vector&lt; S, D &gt; &amp;v2, const T &amp;... vecs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>max</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a6e1d12ec3b75c4b972128a0ca872da58</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v1, const vector&lt; S, D &gt; &amp;v2, const T &amp;... vecs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>clamp</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a13427afa8abc10b68dec66a3e6d30c94</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v, const vector&lt; S, D &gt; &amp;low, const vector&lt; S, D &gt; &amp;high) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>gabcb72a5920c41c8b337d9060ff775b77</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;start, const vector&lt; S, D &gt; &amp;finish, delta_scalar_type alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr delta_scalar_type</type>
      <name>angle</name>
      <anchorfile>namespacemuu.html</anchorfile>
      <anchor>a6ba11c907004b9c139971dce77af94ad</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v1, const vector&lt; S, D &gt; &amp;v2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga3d9f7436810436103ec0af7e77597b04</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gae07fcd5b9220de0b39fa3461c3c529de</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>gaa9989749869046cff6731ead1b56f0df</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr To</type>
      <name>bit_cast</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gaadb4c6332c738c248f84f43ece303657</anchor>
      <arglist>(const From &amp;from) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::underlying_type_t&lt; T &gt;</type>
      <name>unwrap</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga81642f54291cc4a1287ef141b3f4d34f</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>min</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga3e6bbeba20969ce0e3ca5aca843a9e71</anchor>
      <arglist>(const T &amp;val1, const T &amp;val2, const U &amp;... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>max</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga290899e08db4ce22c8e9f48a02bedaa3</anchor>
      <arglist>(const T &amp;val1, const T &amp;val2, const U &amp;... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>clamp</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga853b138ba34af796906a03cda9dbfabe</anchor>
      <arglist>(const T &amp;val, const T &amp;low, const T &amp;high) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>between</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga4ff100d8bb39742b764c341678f60a7d</anchor>
      <arglist>(const T &amp;val, const U &amp;low, const U &amp;high) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T *</type>
      <name>launder</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga279c303aaba76a43d1dc23834c35f857</anchor>
      <arglist>(T *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr To</type>
      <name>pointer_cast</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab714a50e01b58e7d4117d5ef9d403d39</anchor>
      <arglist>(From from) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T *</type>
      <name>apply_offset</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga95da5073b863161a6542266f4a6c5961</anchor>
      <arglist>(T *ptr, Offset offset) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T *</type>
      <name>to_address</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga79246c66d2df39fe825be13e654d8c52</anchor>
      <arglist>(T *p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>to_address</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga4ba4d37d254803b31a71fca161a46420</anchor>
      <arglist>(const Ptr &amp;p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T *</type>
      <name>assume_aligned</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gaf58f3326aea89653ec725ccbc5ff29d2</anchor>
      <arglist>(T *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_sequence</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab64801b0b03f54c51a21000e8bb95ea1</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(impl::for_sequence_noexcept_&lt; N, Func &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_product</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga5f6c6004ed4016c437442e80f0b22421</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(impl::for_product_noexcept_&lt; N1, N2, Func &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>apply_alignment</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga6aae2e7be0cb15bed51d7cb636602c5f</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T *</type>
      <name>apply_alignment</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gae89c7cea139581038d585201d5b3bfee</anchor>
      <arglist>(T *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>apply_alignment</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga7cd587549d099b4323fda37f23097e04</anchor>
      <arglist>(T val, size_t alignment) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T *</type>
      <name>apply_alignment</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga7afe47820cb2e0951bf755832ce108be</anchor>
      <arglist>(T *ptr, size_t alignment) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_constant_evaluated</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga8a9b0aaf9860b30f93639333a5214d34</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_thread_name</name>
      <anchorfile>group__strings.html</anchorfile>
      <anchor>ga208801d95047a6cff7dd75291d55601b</anchor>
      <arglist>(string_param name) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_code_point</name>
      <anchorfile>group__is__ascii__code__point.html</anchorfile>
      <anchor>ga64ca1bf1e37a02c284beaea8ff785e52</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_hyphen</name>
      <anchorfile>group__is__ascii__hyphen.html</anchorfile>
      <anchor>gabc77bc47b8c0aa7271dbae0d6157d00d</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_letter</name>
      <anchorfile>group__is__ascii__letter.html</anchorfile>
      <anchor>ga76689b41c6518c56f53cf21f3a3afc37</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_lowercase</name>
      <anchorfile>group__is__ascii__lowercase.html</anchorfile>
      <anchor>gafd4fb2ba260a541fd126de6ccf94c3e8</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_number</name>
      <anchorfile>group__is__ascii__number.html</anchorfile>
      <anchor>gac63fc46d0d9899f8456e5c678e8d2473</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_uppercase</name>
      <anchorfile>group__is__ascii__uppercase.html</anchorfile>
      <anchor>gade071c796662fa9f3367827702a4a2eb</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_whitespace</name>
      <anchorfile>group__is__ascii__whitespace.html</anchorfile>
      <anchor>gaf1b29bb2cafb2343ed3d111bb4da2778</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_code_point</name>
      <anchorfile>group__is__non__ascii__code__point.html</anchorfile>
      <anchor>gaca89a3375c8d873fc5a4f61726b074e7</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_hyphen</name>
      <anchorfile>group__is__non__ascii__hyphen.html</anchorfile>
      <anchor>ga47f0a95f3e1226f5a6be2b9217523440</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_letter</name>
      <anchorfile>group__is__non__ascii__letter.html</anchorfile>
      <anchor>ga99573e984f5183b1a2633a1dfed6ff1f</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_lowercase</name>
      <anchorfile>group__is__non__ascii__lowercase.html</anchorfile>
      <anchor>gac6878430927ad78f86f74d4c2cc75433</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_number</name>
      <anchorfile>group__is__non__ascii__number.html</anchorfile>
      <anchor>gaaa75df191ffc636e98570ece15381605</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_uppercase</name>
      <anchorfile>group__is__non__ascii__uppercase.html</anchorfile>
      <anchor>gafce6882788557201826cb9bef23015f9</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_whitespace</name>
      <anchorfile>group__is__non__ascii__whitespace.html</anchorfile>
      <anchor>ga02235449e07d2ef76043194ab6516191</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_code_point</name>
      <anchorfile>group__is__not__code__point.html</anchorfile>
      <anchor>ga7de0a0c768b74042ae186f09d5bbf6c4</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_hyphen</name>
      <anchorfile>group__is__not__hyphen.html</anchorfile>
      <anchor>gaa022bebe3a9642ff89db5ed4ddae5df1</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_letter</name>
      <anchorfile>group__is__not__letter.html</anchorfile>
      <anchor>gac1c9fbc632e0f5ed17cd39ff5d4025bb</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_lowercase</name>
      <anchorfile>group__is__not__lowercase.html</anchorfile>
      <anchor>ga9bde6b4a391ccaec3cd485985f78b309</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_number</name>
      <anchorfile>group__is__not__number.html</anchorfile>
      <anchor>ga8cc883432f7b24d7ff45b81c18dbcbe1</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_uppercase</name>
      <anchorfile>group__is__not__uppercase.html</anchorfile>
      <anchor>ga0829efc71f9f0539941aaea2f5c25bf8</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_whitespace</name>
      <anchorfile>group__is__not__whitespace.html</anchorfile>
      <anchor>ga943cb03f7094c7658758c2b5cfb6e298</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point</name>
      <anchorfile>group__is__code__point.html</anchorfile>
      <anchor>gaa61593ff891b26163868d3dbb14822e6</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point_boundary</name>
      <anchorfile>group__is__code__point__boundary.html</anchorfile>
      <anchor>ga79c41c8b3a1af5ad6149aec00051005a</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_combining_mark</name>
      <anchorfile>group__is__combining__mark.html</anchorfile>
      <anchor>ga301f16f8a9fbf354fc33cf3f95d9b160</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_decimal_digit</name>
      <anchorfile>group__is__decimal__digit.html</anchorfile>
      <anchor>gab690f0ed310af57ede2e2c4e16bcca7f</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hexadecimal_digit</name>
      <anchorfile>group__is__hexadecimal__digit.html</anchorfile>
      <anchor>ga0c1fc84c4a7efae54fb420cdb9e80d8b</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hyphen</name>
      <anchorfile>group__is__hyphen.html</anchorfile>
      <anchor>ga499473afcfe46b1259f789dd49bbbe74</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_letter</name>
      <anchorfile>group__is__letter.html</anchorfile>
      <anchor>ga9514b6bf16508d2474f8f5ec70a8eaab</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_lowercase</name>
      <anchorfile>group__is__lowercase.html</anchorfile>
      <anchor>gad13aa9a801971fc570d8a5eb24e70b3f</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_number</name>
      <anchorfile>group__is__number.html</anchorfile>
      <anchor>ga78dcc236127325d26ef15569e003de48</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_octal_digit</name>
      <anchorfile>group__is__octal__digit.html</anchorfile>
      <anchor>gaf0bd4f10bb2327981fd129da56e3ba39</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_uppercase</name>
      <anchorfile>group__is__uppercase.html</anchorfile>
      <anchor>gac4995e950dd373601e54141e19fd66a0</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_whitespace</name>
      <anchorfile>group__is__whitespace.html</anchorfile>
      <anchor>ga3f227d85734bfb486c928279d30c03c7</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_code_point</name>
      <anchorfile>group__is__ascii__code__point.html</anchorfile>
      <anchor>gae507888b5091f49902fabb62297cf035</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_hyphen</name>
      <anchorfile>group__is__ascii__hyphen.html</anchorfile>
      <anchor>ga16c9e47459d3ad6d187622c06866f33d</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_letter</name>
      <anchorfile>group__is__ascii__letter.html</anchorfile>
      <anchor>gaaa51884019a1be6887087df31bf325b7</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_lowercase</name>
      <anchorfile>group__is__ascii__lowercase.html</anchorfile>
      <anchor>ga8dde7f0f9c6c0c73bd9d223461cd0d0c</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_number</name>
      <anchorfile>group__is__ascii__number.html</anchorfile>
      <anchor>gad2f5745eb580521a6879041e41782dce</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_uppercase</name>
      <anchorfile>group__is__ascii__uppercase.html</anchorfile>
      <anchor>gaa8691618bb990503cca6e81ddd90456e</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_whitespace</name>
      <anchorfile>group__is__ascii__whitespace.html</anchorfile>
      <anchor>ga4f1ceff57c8aed91fa13cd872b68f8fc</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_code_point</name>
      <anchorfile>group__is__non__ascii__code__point.html</anchorfile>
      <anchor>ga073c0cf3b24f0acae80d490d29140be9</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_hyphen</name>
      <anchorfile>group__is__non__ascii__hyphen.html</anchorfile>
      <anchor>ga2c1629b3aa8072b3bcc6a23e1138f94c</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_letter</name>
      <anchorfile>group__is__non__ascii__letter.html</anchorfile>
      <anchor>ga54365f44fc248898d4c7feed9a416bd3</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_lowercase</name>
      <anchorfile>group__is__non__ascii__lowercase.html</anchorfile>
      <anchor>ga1c9227ff55aa96b96d87cfa77d1101b2</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_number</name>
      <anchorfile>group__is__non__ascii__number.html</anchorfile>
      <anchor>gaeaea844a807cdc2454f4fd9c0c5a8e58</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_uppercase</name>
      <anchorfile>group__is__non__ascii__uppercase.html</anchorfile>
      <anchor>ga27f9644af1801e03a1f6f7b15334bd78</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_whitespace</name>
      <anchorfile>group__is__non__ascii__whitespace.html</anchorfile>
      <anchor>ga0cee28c3a17a13cd7a2866ffae805d98</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_code_point</name>
      <anchorfile>group__is__not__code__point.html</anchorfile>
      <anchor>ga97b51ce79ede43445a5e215b6220fea8</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_hyphen</name>
      <anchorfile>group__is__not__hyphen.html</anchorfile>
      <anchor>gae0bc45da341a883a0111b986aa5117e4</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_letter</name>
      <anchorfile>group__is__not__letter.html</anchorfile>
      <anchor>ga98e5176e560113fdc870fa49bd9e74d1</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_lowercase</name>
      <anchorfile>group__is__not__lowercase.html</anchorfile>
      <anchor>gaeef9da03aa4a43b96c566be96037ec84</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_number</name>
      <anchorfile>group__is__not__number.html</anchorfile>
      <anchor>ga8aa98b7f51cda0231d569d05642975e5</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_uppercase</name>
      <anchorfile>group__is__not__uppercase.html</anchorfile>
      <anchor>gad29a1fcb865ee3a2080303c9d9bc1612</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_whitespace</name>
      <anchorfile>group__is__not__whitespace.html</anchorfile>
      <anchor>ga4fe0a886b291797ee162dc20fd0b91cf</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point</name>
      <anchorfile>group__is__code__point.html</anchorfile>
      <anchor>gadd58df11964589033e2ac9e48e77c7e1</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point_boundary</name>
      <anchorfile>group__is__code__point__boundary.html</anchorfile>
      <anchor>ga0add0fe467cafaf15eb1dbc2e59c7bca</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_combining_mark</name>
      <anchorfile>group__is__combining__mark.html</anchorfile>
      <anchor>ga9943e9c30d711657bf3551f15646e276</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_decimal_digit</name>
      <anchorfile>group__is__decimal__digit.html</anchorfile>
      <anchor>ga7f77259b7f536ab687c5a15a7b02be7c</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hexadecimal_digit</name>
      <anchorfile>group__is__hexadecimal__digit.html</anchorfile>
      <anchor>ga0745f352f07ac7d21a3411074e48569f</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hyphen</name>
      <anchorfile>group__is__hyphen.html</anchorfile>
      <anchor>ga441c3a005540d21043d33a70cfeda91e</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_letter</name>
      <anchorfile>group__is__letter.html</anchorfile>
      <anchor>ga0a0cdc660ed29ab425298d93f751b13d</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_lowercase</name>
      <anchorfile>group__is__lowercase.html</anchorfile>
      <anchor>gacc5931a2f5aac7604bfe22417193cab8</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_number</name>
      <anchorfile>group__is__number.html</anchorfile>
      <anchor>ga650ea3f8ee77a12bd366a4719cd25e5a</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_octal_digit</name>
      <anchorfile>group__is__octal__digit.html</anchorfile>
      <anchor>ga1f9244209d55d92781a22f3fbd692aa2</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_uppercase</name>
      <anchorfile>group__is__uppercase.html</anchorfile>
      <anchor>ga236e67b4590c954c640fcd5336988277</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_whitespace</name>
      <anchorfile>group__is__whitespace.html</anchorfile>
      <anchor>gabaa43eb005e243d98110f92e73e7c8bd</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_code_point</name>
      <anchorfile>group__is__ascii__code__point.html</anchorfile>
      <anchor>ga56ab5e221276a06196b43dde3654c2c9</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_hyphen</name>
      <anchorfile>group__is__ascii__hyphen.html</anchorfile>
      <anchor>gaae2b494570b94439449c5630e2eb542f</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_letter</name>
      <anchorfile>group__is__ascii__letter.html</anchorfile>
      <anchor>ga8c4a12b0beaa751c007b4277b91fb0a1</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_lowercase</name>
      <anchorfile>group__is__ascii__lowercase.html</anchorfile>
      <anchor>gac4f44ea52a31cba8ec72f0d3d0b18139</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_number</name>
      <anchorfile>group__is__ascii__number.html</anchorfile>
      <anchor>gafa23a97548b6cc50426931ecdc4406ef</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_uppercase</name>
      <anchorfile>group__is__ascii__uppercase.html</anchorfile>
      <anchor>ga63392d2f68599f30f486fca24a51dec4</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_whitespace</name>
      <anchorfile>group__is__ascii__whitespace.html</anchorfile>
      <anchor>gaefcf15993ac4f08028753206912394ec</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_code_point</name>
      <anchorfile>group__is__non__ascii__code__point.html</anchorfile>
      <anchor>gad110438c4a5a2dfa02c79d16e3f5d606</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_hyphen</name>
      <anchorfile>group__is__non__ascii__hyphen.html</anchorfile>
      <anchor>ga86759836946e9fa5977dafe0beaddf4b</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_letter</name>
      <anchorfile>group__is__non__ascii__letter.html</anchorfile>
      <anchor>ga25e7166a83dad643d0e47e6c83066241</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_lowercase</name>
      <anchorfile>group__is__non__ascii__lowercase.html</anchorfile>
      <anchor>ga0c36c5ce9661bdd48c8b80799feb67ef</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_number</name>
      <anchorfile>group__is__non__ascii__number.html</anchorfile>
      <anchor>ga0da536ef0d2037dd3b5e060b7c60fbbe</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_uppercase</name>
      <anchorfile>group__is__non__ascii__uppercase.html</anchorfile>
      <anchor>ga7246440d3ef550f6ded6aca3c385c405</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_whitespace</name>
      <anchorfile>group__is__non__ascii__whitespace.html</anchorfile>
      <anchor>ga5866007e015ad1e3c20aa19c4fce6316</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_code_point</name>
      <anchorfile>group__is__not__code__point.html</anchorfile>
      <anchor>gad81eafaf1d670467ba421d3ce0da9bf5</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_hyphen</name>
      <anchorfile>group__is__not__hyphen.html</anchorfile>
      <anchor>gaf0ca20748b2c611d456e504d776eb445</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_letter</name>
      <anchorfile>group__is__not__letter.html</anchorfile>
      <anchor>gac8a56b2039dc72126d0991292a2ee807</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_lowercase</name>
      <anchorfile>group__is__not__lowercase.html</anchorfile>
      <anchor>ga1e74e8ead472320684fc94c12dd08143</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_number</name>
      <anchorfile>group__is__not__number.html</anchorfile>
      <anchor>ga5633fc678ea2a91ac26e957e4d8b3d5c</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_uppercase</name>
      <anchorfile>group__is__not__uppercase.html</anchorfile>
      <anchor>gaca1b184a2e4c8b04dad89b488ebf888e</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_whitespace</name>
      <anchorfile>group__is__not__whitespace.html</anchorfile>
      <anchor>ga0237af087d7d31099e8c78a58d605f9c</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point</name>
      <anchorfile>group__is__code__point.html</anchorfile>
      <anchor>ga82909fa27d9495a0b9457e8160b8585b</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point_boundary</name>
      <anchorfile>group__is__code__point__boundary.html</anchorfile>
      <anchor>ga6eb9cc18abda4165f1c2e30b7cad5ca4</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_combining_mark</name>
      <anchorfile>group__is__combining__mark.html</anchorfile>
      <anchor>ga512f69627685a22136d237dca2f83eab</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_decimal_digit</name>
      <anchorfile>group__is__decimal__digit.html</anchorfile>
      <anchor>gaf50d69ac260e6246bdfd050d1ce87736</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hexadecimal_digit</name>
      <anchorfile>group__is__hexadecimal__digit.html</anchorfile>
      <anchor>gaf3d4cb15f91b4ed87cead7f8051d6953</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hyphen</name>
      <anchorfile>group__is__hyphen.html</anchorfile>
      <anchor>gaafb18574dd3ff0f9e67e0007cf449264</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_letter</name>
      <anchorfile>group__is__letter.html</anchorfile>
      <anchor>gaad41014bebb0bbb56e1203237852eb98</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_lowercase</name>
      <anchorfile>group__is__lowercase.html</anchorfile>
      <anchor>ga8310e44fba244f78b3222d88675c40e9</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_number</name>
      <anchorfile>group__is__number.html</anchorfile>
      <anchor>ga26ffef5becf680cb2b3f6f015cbb3706</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_octal_digit</name>
      <anchorfile>group__is__octal__digit.html</anchorfile>
      <anchor>gaad523a1c84c600045e7d43e5234807bb</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_uppercase</name>
      <anchorfile>group__is__uppercase.html</anchorfile>
      <anchor>ga4ca500fd1132bbb184f4d440169b57c4</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_whitespace</name>
      <anchorfile>group__is__whitespace.html</anchorfile>
      <anchor>gaf3db7e1842d84227c7feac23c80167cb</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_code_point</name>
      <anchorfile>group__is__ascii__code__point.html</anchorfile>
      <anchor>gab4b2234e78128f098c8d1baed932d48b</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_hyphen</name>
      <anchorfile>group__is__ascii__hyphen.html</anchorfile>
      <anchor>ga6f0eb841ff1170cfe711a1f520f0c270</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_letter</name>
      <anchorfile>group__is__ascii__letter.html</anchorfile>
      <anchor>ga8d01d9eccd21d22604f6028f6e76c483</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_lowercase</name>
      <anchorfile>group__is__ascii__lowercase.html</anchorfile>
      <anchor>gabe2187bed217e6371faad4378a81406d</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_number</name>
      <anchorfile>group__is__ascii__number.html</anchorfile>
      <anchor>gae9ecb7d04cfe21314a70e1675aa77fa7</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_uppercase</name>
      <anchorfile>group__is__ascii__uppercase.html</anchorfile>
      <anchor>ga212b3a96079a45553b259b3576f5712b</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_whitespace</name>
      <anchorfile>group__is__ascii__whitespace.html</anchorfile>
      <anchor>gafe17a863740a3eec1fa34bbaba49b64f</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_code_point</name>
      <anchorfile>group__is__non__ascii__code__point.html</anchorfile>
      <anchor>gaec44d736c81db3b7232ec863a7e6bfe8</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_hyphen</name>
      <anchorfile>group__is__non__ascii__hyphen.html</anchorfile>
      <anchor>gad572a4ceca075354145d9a41b674da21</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_letter</name>
      <anchorfile>group__is__non__ascii__letter.html</anchorfile>
      <anchor>ga6ab614deb2bf1627d470563c3c69016f</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_lowercase</name>
      <anchorfile>group__is__non__ascii__lowercase.html</anchorfile>
      <anchor>ga9a0110786c26dbfc224f18114943efbb</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_number</name>
      <anchorfile>group__is__non__ascii__number.html</anchorfile>
      <anchor>ga8d59af272564fb25c47b13512936bf1d</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_uppercase</name>
      <anchorfile>group__is__non__ascii__uppercase.html</anchorfile>
      <anchor>ga3ed2ee99b8fb625998b354b621512623</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_whitespace</name>
      <anchorfile>group__is__non__ascii__whitespace.html</anchorfile>
      <anchor>ga2a0ff02223c049ad9b052ee85fdfa51b</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_code_point</name>
      <anchorfile>group__is__not__code__point.html</anchorfile>
      <anchor>ga0be8e6bd1df2eb51a1d46f63dc2e864f</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_hyphen</name>
      <anchorfile>group__is__not__hyphen.html</anchorfile>
      <anchor>ga92a574aaa452c3921ce53be49fb86928</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_letter</name>
      <anchorfile>group__is__not__letter.html</anchorfile>
      <anchor>gace845c3ed259b79f4dfd38b6870f4e48</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_lowercase</name>
      <anchorfile>group__is__not__lowercase.html</anchorfile>
      <anchor>gadd513c6da8b11b4910d74bc06c136ff3</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_number</name>
      <anchorfile>group__is__not__number.html</anchorfile>
      <anchor>gab2680040f3026e9bab13fede62d8b952</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_uppercase</name>
      <anchorfile>group__is__not__uppercase.html</anchorfile>
      <anchor>ga2f2b3a717b8b8a4f8aa9096e7a15eaf2</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_whitespace</name>
      <anchorfile>group__is__not__whitespace.html</anchorfile>
      <anchor>ga6dc981327a62bbcb998fca79956165e3</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point</name>
      <anchorfile>group__is__code__point.html</anchorfile>
      <anchor>gace0fb7eaf06b3e212181f7abaa108d16</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point_boundary</name>
      <anchorfile>group__is__code__point__boundary.html</anchorfile>
      <anchor>gafae81212824d3162f63d50318bb53a85</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_combining_mark</name>
      <anchorfile>group__is__combining__mark.html</anchorfile>
      <anchor>ga05a17fc217a97cd9c7e453a20be0c5a2</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_decimal_digit</name>
      <anchorfile>group__is__decimal__digit.html</anchorfile>
      <anchor>ga73d6b65b100e679927b317940f250a39</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hexadecimal_digit</name>
      <anchorfile>group__is__hexadecimal__digit.html</anchorfile>
      <anchor>gaeae240f3f020aed73b8ce2e4f308d867</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hyphen</name>
      <anchorfile>group__is__hyphen.html</anchorfile>
      <anchor>ga16d013f13f247097938a281bf5fcc095</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_letter</name>
      <anchorfile>group__is__letter.html</anchorfile>
      <anchor>ga27712db66a343a62a359c8c36c509746</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_lowercase</name>
      <anchorfile>group__is__lowercase.html</anchorfile>
      <anchor>ga4e0ed0e93d5bb9b41352a74f737d8fc4</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_number</name>
      <anchorfile>group__is__number.html</anchorfile>
      <anchor>ga7a7fed3e0d5c76d5d0c27ef780b882a0</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_octal_digit</name>
      <anchorfile>group__is__octal__digit.html</anchorfile>
      <anchor>ga310e4044ce4614694d7d4f840c9a6a01</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_uppercase</name>
      <anchorfile>group__is__uppercase.html</anchorfile>
      <anchor>gaebdbb7d02f2803aabff08ad85473c9b5</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_whitespace</name>
      <anchorfile>group__is__whitespace.html</anchorfile>
      <anchor>ga5ea3da66063d2b055981bb7d5708589e</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_code_point</name>
      <anchorfile>group__is__ascii__code__point.html</anchorfile>
      <anchor>gab731048e833eb6dbd24c5f757eafeb5f</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_hyphen</name>
      <anchorfile>group__is__ascii__hyphen.html</anchorfile>
      <anchor>gac854ba72bce68974d5a672456eb0896f</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_letter</name>
      <anchorfile>group__is__ascii__letter.html</anchorfile>
      <anchor>ga80bfb2a0a1379b7c6d8265b588df6c61</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_lowercase</name>
      <anchorfile>group__is__ascii__lowercase.html</anchorfile>
      <anchor>gad2d975cdf2fa3506bcbb9108b9c05c8f</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_number</name>
      <anchorfile>group__is__ascii__number.html</anchorfile>
      <anchor>ga1ed74170290d5f96839818f18cf5f2d4</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_uppercase</name>
      <anchorfile>group__is__ascii__uppercase.html</anchorfile>
      <anchor>ga9ffd863190528db135f8c6996e30c98f</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_whitespace</name>
      <anchorfile>group__is__ascii__whitespace.html</anchorfile>
      <anchor>ga4e3dbcd0783d33668b246c3adbe9b51b</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_code_point</name>
      <anchorfile>group__is__non__ascii__code__point.html</anchorfile>
      <anchor>ga1608f6e1d3299b152a9c1ccd1604d8b4</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_hyphen</name>
      <anchorfile>group__is__non__ascii__hyphen.html</anchorfile>
      <anchor>gae0bf88fe215bfb338404ff2b01c9417a</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_letter</name>
      <anchorfile>group__is__non__ascii__letter.html</anchorfile>
      <anchor>ga62e2a4636b10d39d4905caf4700e8846</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_lowercase</name>
      <anchorfile>group__is__non__ascii__lowercase.html</anchorfile>
      <anchor>gaaae194b317d0881c729c5ccb66c3d1b3</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_number</name>
      <anchorfile>group__is__non__ascii__number.html</anchorfile>
      <anchor>ga952ed989856755a9f63eedbf7b250c1a</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_uppercase</name>
      <anchorfile>group__is__non__ascii__uppercase.html</anchorfile>
      <anchor>ga33b2b5487d6105e60f0fe3d3cb87cd8b</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_whitespace</name>
      <anchorfile>group__is__non__ascii__whitespace.html</anchorfile>
      <anchor>gacd5bc03842504f2e09a60d948c8b932a</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_code_point</name>
      <anchorfile>group__is__not__code__point.html</anchorfile>
      <anchor>ga5dd19a6b5e305f104049f29dacc1cd7f</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_hyphen</name>
      <anchorfile>group__is__not__hyphen.html</anchorfile>
      <anchor>ga9eef1fcd578ed78fa7e3b3550f1c2c6d</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_letter</name>
      <anchorfile>group__is__not__letter.html</anchorfile>
      <anchor>ga1afe1cf072279c2683bce80d3117bd70</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_lowercase</name>
      <anchorfile>group__is__not__lowercase.html</anchorfile>
      <anchor>gaf36dd00a2eb619745a97028d634af730</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_number</name>
      <anchorfile>group__is__not__number.html</anchorfile>
      <anchor>ga638c24599fa30dbf7b48872337653225</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_uppercase</name>
      <anchorfile>group__is__not__uppercase.html</anchorfile>
      <anchor>gafc3473700c456bdd26d5dc45dfae54f2</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_whitespace</name>
      <anchorfile>group__is__not__whitespace.html</anchorfile>
      <anchor>gaec9953774ae79dfef407e26e18d9e069</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point</name>
      <anchorfile>group__is__code__point.html</anchorfile>
      <anchor>ga357623f58607fb4519a676d3ff20ca85</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point_boundary</name>
      <anchorfile>group__is__code__point__boundary.html</anchorfile>
      <anchor>ga2c2ba7ecfb650602ffde032484595988</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_combining_mark</name>
      <anchorfile>group__is__combining__mark.html</anchorfile>
      <anchor>ga1f1bf74c6aa429ed6282935ca77a3b93</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_decimal_digit</name>
      <anchorfile>group__is__decimal__digit.html</anchorfile>
      <anchor>ga65e1fc12ac8dc6ef6f51818a101db08f</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hexadecimal_digit</name>
      <anchorfile>group__is__hexadecimal__digit.html</anchorfile>
      <anchor>ga13074f786e21319165a0247855b2dd87</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hyphen</name>
      <anchorfile>group__is__hyphen.html</anchorfile>
      <anchor>ga3530b55caed578006feb61b49e840849</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_letter</name>
      <anchorfile>group__is__letter.html</anchorfile>
      <anchor>ga6ac024cf357b4357ac04a549452476b8</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_lowercase</name>
      <anchorfile>group__is__lowercase.html</anchorfile>
      <anchor>ga225baf5a30c7afd0a78785a2d85f035b</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_number</name>
      <anchorfile>group__is__number.html</anchorfile>
      <anchor>gae2be3ad296d1b7a5c73e5b4b0a2f9228</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_octal_digit</name>
      <anchorfile>group__is__octal__digit.html</anchorfile>
      <anchor>ga48a38a4f9ce45492a4f1b3d01041916b</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_uppercase</name>
      <anchorfile>group__is__uppercase.html</anchorfile>
      <anchor>ga7cd6ac6c6365cb56009b82c3149e7568</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_whitespace</name>
      <anchorfile>group__is__whitespace.html</anchorfile>
      <anchor>ga79c19114d60de3903e35538068e2d25c</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_code_point</name>
      <anchorfile>group__is__ascii__code__point.html</anchorfile>
      <anchor>gae8b259597df29cc7d8a82ad855a689c0</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_hyphen</name>
      <anchorfile>group__is__ascii__hyphen.html</anchorfile>
      <anchor>gaa33c1fe5b6fbca8063b42b25e1655bec</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_letter</name>
      <anchorfile>group__is__ascii__letter.html</anchorfile>
      <anchor>gaf7fe2351f7882f54d8f250412e6b8389</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_lowercase</name>
      <anchorfile>group__is__ascii__lowercase.html</anchorfile>
      <anchor>gacd9fa534cc97577c15b7e829d2e2d845</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_number</name>
      <anchorfile>group__is__ascii__number.html</anchorfile>
      <anchor>gac5d9c01ac4e06e01379f8d6104f6a4ed</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_uppercase</name>
      <anchorfile>group__is__ascii__uppercase.html</anchorfile>
      <anchor>ga6154a929fd7780c258d0ca249171ad40</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_whitespace</name>
      <anchorfile>group__is__ascii__whitespace.html</anchorfile>
      <anchor>ga09ef1c5da9b104b959ac51e9e910653a</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_code_point</name>
      <anchorfile>group__is__non__ascii__code__point.html</anchorfile>
      <anchor>gacb38bbe9ae7bd9394c6b69a389f256c2</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_hyphen</name>
      <anchorfile>group__is__non__ascii__hyphen.html</anchorfile>
      <anchor>ga1c81ee74e76261a178e9f5b1970ad71e</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_letter</name>
      <anchorfile>group__is__non__ascii__letter.html</anchorfile>
      <anchor>ga5452909ac8d5e332fe072059310a5267</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_lowercase</name>
      <anchorfile>group__is__non__ascii__lowercase.html</anchorfile>
      <anchor>ga6a926ae4ef545f09ae72c7e4a3e2b44b</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_number</name>
      <anchorfile>group__is__non__ascii__number.html</anchorfile>
      <anchor>ga87e7c319c1857e1294312d1a296c92a9</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_uppercase</name>
      <anchorfile>group__is__non__ascii__uppercase.html</anchorfile>
      <anchor>gabd53c1ea713477ef1bc50d455a632ae1</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_whitespace</name>
      <anchorfile>group__is__non__ascii__whitespace.html</anchorfile>
      <anchor>ga276020e5289781752e847e2662e64a2c</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_code_point</name>
      <anchorfile>group__is__not__code__point.html</anchorfile>
      <anchor>gad351329604173d6c75840044d20d66e7</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_hyphen</name>
      <anchorfile>group__is__not__hyphen.html</anchorfile>
      <anchor>gac0fe9ff0e75775fc97dab1b1104871a0</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_letter</name>
      <anchorfile>group__is__not__letter.html</anchorfile>
      <anchor>ga39a63cc0527e39d8a45392ff78700757</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_lowercase</name>
      <anchorfile>group__is__not__lowercase.html</anchorfile>
      <anchor>gacbc0b63111a697c61f26507bf905ab36</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_number</name>
      <anchorfile>group__is__not__number.html</anchorfile>
      <anchor>ga570c4041bc969fc6702d38b21b4cfd32</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_uppercase</name>
      <anchorfile>group__is__not__uppercase.html</anchorfile>
      <anchor>ga6da98b74522adcde4bf78b14579709f4</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_whitespace</name>
      <anchorfile>group__is__not__whitespace.html</anchorfile>
      <anchor>ga3c80b451132c34fe571f46b28b8bb70d</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point</name>
      <anchorfile>group__is__code__point.html</anchorfile>
      <anchor>gacc72677918e6632e5c481d7b2e820626</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point_boundary</name>
      <anchorfile>group__is__code__point__boundary.html</anchorfile>
      <anchor>gaeee1a57cd6415ebbed78a3c2255b461f</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_combining_mark</name>
      <anchorfile>group__is__combining__mark.html</anchorfile>
      <anchor>ga45cb7533e0fb2568e97a78bd3666f1fe</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_decimal_digit</name>
      <anchorfile>group__is__decimal__digit.html</anchorfile>
      <anchor>gaa74fd64f064d5b662b340fcc76679d11</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hexadecimal_digit</name>
      <anchorfile>group__is__hexadecimal__digit.html</anchorfile>
      <anchor>ga117a786a06ab8801ab862607353d7e1a</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hyphen</name>
      <anchorfile>group__is__hyphen.html</anchorfile>
      <anchor>ga867f9060953226f58134dec87317ad8d</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_letter</name>
      <anchorfile>group__is__letter.html</anchorfile>
      <anchor>ga3586c395e1c97d138944bec915f2a737</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_lowercase</name>
      <anchorfile>group__is__lowercase.html</anchorfile>
      <anchor>ga08cdf66f3c404e6867d59dda4df69256</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_number</name>
      <anchorfile>group__is__number.html</anchorfile>
      <anchor>gac66e35dfd03d8e92e2a83d1699423d22</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_octal_digit</name>
      <anchorfile>group__is__octal__digit.html</anchorfile>
      <anchor>gadcaa979e1d2172fcb8075b9e408233be</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_uppercase</name>
      <anchorfile>group__is__uppercase.html</anchorfile>
      <anchor>gaff5aaff25d6609ba987685a75edddab5</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_whitespace</name>
      <anchorfile>group__is__whitespace.html</anchorfile>
      <anchor>gacf6c4c0e50aa41b7b4916fa489d4560c</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>allow_implicit_bit_cast</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga824ac2b58e006d4be8d4b0d6a0f7180d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>always_false</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa4c92e65e153e9a6c9ac01ba3bd653e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>total_size</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3b7e16d2f90358811bc6231eb993ff33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>alignment_of</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga693c421331c5f268eb2e2fdd318368fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_same</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaed6f4fa9f355d5e882000e65dc7cd0b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_same</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga9c2b21ea2cf57533a5dcf264d0e906e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>index_of_type</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga91356a65708493c6fbc993024894c901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicitly_convertible</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga05ccb72a3320555db5a5115cd85d6691</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicitly_convertible_to_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga022ab99547d2892239187f83bd0644f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicitly_convertible_to_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3958a07eb93e42c5e6b1f65366d58968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_implicitly_convertible_to</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga02add24d1eebc3839d917c0691cd6e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_explicitly_convertible</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga67e98114af69303c9e5f65e56056cd06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_explicitly_convertible_to_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gafd769d61abf0eea21cb8c95ab32ebc0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_explicitly_convertible_to_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gabc0a354ed72c2bc9b631b10cd9c4f451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_explicitly_convertible_to</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3034c2e89b1b9fb97c2afc24f285c175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_convertible</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga525ce1f7e17d4abf8fae0c6aa5fd26cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_convertible_to_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaec35a37d461e7b8b6b6a92296c75c5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_convertible_to_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga622faeced84d6fc02ccadcecd020e78a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_convertible_to</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga20d0844251aba1af5b372c44803999eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicitly_nothrow_convertible</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga756aec06547ff6bd69c7f51bb4d01e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicitly_nothrow_convertible_to_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2559c7587af80489da97126e645da89d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicitly_nothrow_convertible_to_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf0de9802b973764be7848a020088f961</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_implicitly_nothrow_convertible_to</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga5acc7a33b8fd21e0b8805f26d9ac992d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_explicitly_nothrow_convertible</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gab20c2a24d63c89812c535f0a986b958d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_explicitly_nothrow_convertible_to_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3f32761c6e60e709f4e6e4b6874230a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_explicitly_nothrow_convertible_to_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gadbb31fed4f56fa8869ea860a4b330f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_explicitly_nothrow_convertible_to</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6d0bc59b0f1a3247d4e42c39d2f00dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_convertible</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga090993f769edb7c30da887d3b6f71f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_convertible_to_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga324c6e94dfe58e068c531e55c15ea9a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_convertible_to_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga0ada082fe05220bf0aaca76cba7f9e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_nothrow_convertible_to</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga465e6a6c912b71ca29cf4abf4575bf4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf1d5da5278f527b501cecffdd38e2e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga5654c62084cb368c8d754ef2391188f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga38cc1e5109a701b7c609faf614ad75f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_scoped_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga54c8d27010a9c661dba826d90f0c9ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_scoped_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac4960dd74a53e778d606c67b17b898fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_scoped_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac742ec408e961ab3cdfcba8b59fc043f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_legacy_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga0ad880900bc41c21a698d9114f333e3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_legacy_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga61a1919e5b9db8752915c52166418e35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_legacy_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga0b19c96f2fd22318ff9434cecb8e4ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_unsigned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga9e9c5b2e65e4f784d2a6b52b6a33a34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_unsigned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gab947cfb735e87e9394420be39d9f0279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_unsigned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa71f70dfddfb9f29ed162014c6020672</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_signed</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga8692cd4c2e3c8e2b0167a5a586f1f6e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_signed</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga8db6d992e6f39f91948ea80dff4e1025</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_signed</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gad0e4bc930ad4094734715f7b5b116c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_integral</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6283839d5536a4ee096adccee42b88c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_integral</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga1a551403c0c337deb10ceb0dc7718fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_integral</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga113302a3a1ac13b36caa7f1baaf7a191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_integer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga32715027f4d7ea16b52b2a2e00ca31f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_integer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga93df7f38a0b30c68c6138780d55885fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_integer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac4750ab546ab72009c9c73407016f0f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_floating_point</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae74155e0cf085141e1923124718915a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_floating_point</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa4cc5ffaa2d70d40b668c54f1e8ec303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_floating_point</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga66729838c230dc7bb06574460d0d8c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_standard_arithmetic</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga31dc0c880276019ff4dc15c27db38541</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_extended_arithmetic</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga92c7057e770b054e9d54bb28d60badea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_arithmetic</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga62cd2e27697815af581b5a8584fd1f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_arithmetic</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga4cdccad554e7b4964b66449794c488ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_arithmetic</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3e1129e045b70c2af6a5d50b1017662c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga79cf1d440a2967847a6d0a08dc22fa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga586bfe745dfc478bb12c62911c5ec7d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gadf6a0fd43aef7bad2aa5b1061ca76909</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa1afdcda38765572b01f8112bea59913</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga33f32f81af61846324b24c96d22fb855</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gadca3d0c318c62cf67f0e711cddc3ed92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaaba32cd64b5832535e6cb2279f1f7881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaac432f658a461422891106bb6f8d0125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga604b58afd51f22c514b3642e06984660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_cvref</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga21f392701d987b745866ab36fa3c6242</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_cvref</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2142c726fa120091603f69a4f88800b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_cvref</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf373c7ded4ff3f304e087d9311e012f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>inherits_from</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gad99449272de65874d3b7569d9eb9e805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>inherits_from_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga49aa08768876bf7322df7d9b27eac4bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>inherits_from_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gafb8004fa9a10a8e6d4ae98a8d8a797b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_code_unit</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga0e1dddeef206a9a47a8223994c219cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_character</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga277e445299ef15f744e94bd68733bae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>pointer_rank</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae9cd96c20c0f16e1e1eac99e798724ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_unbounded_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gab42aeb290d61ad20287ed2e8df10462b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_unbounded_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa1efb75d54e410227ee2cd1448d72d41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_unbounded_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf8727f2300cefe6944088ab53b9c9d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_bounded_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gad0b97e37de851bc5aba414d527a4d0e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_bounded_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga41e64183a2500e39947132b435ff13d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_bounded_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2b5c53a174d76fc6d6dde73a999753ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7a9d2c42a55dd3a859e8cd1381dfc845</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae48b7c7d5e58e9c43b47386ec34c2a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3e77e037d2b8f336651ae4f06fead98d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_function</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2f5be1b8af1251a81691fd7e4a8c10f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_function</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2311e393d4395c4c60f8be62463ff71f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_function</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga1838cd67d955014bc3dcccf62729e28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_function_pointer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae1cae85c90f959c943683d0e6b8d03c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_function_pointer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac4b8cf2371d6981ef042c2d0b0b57f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_function_pointer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga97a71f40f5199e22ff6226054bf5a65e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>is_detected</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gab4f017e4e9376c59602a97b3e725389c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_indirection_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7ce806883528834c0b156cf9d150f8b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_arrow_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gafc3c409c2d08bc8913db5ad46a84e0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_subscript_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga99d503cf409b10ba5314452688d7abb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_unary_plus_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf2a9f6988557f79f960a87dccb414b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_unary_minus_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gadfa546414eebe20b450f7a7d520b4767</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_addition_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gadffe33b336020e6d4f41fba1c9788949</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_subtraction_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6889472d0f71b499636c488a48aafe27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_division_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaee2f7df90bf1a9447e0ff9059e6d9176</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_multiplication_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6f9cee395159fa1cc0c85d04b5ec9414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_modulo_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga5445f5de353c58b7e304e585b5eae84a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_bitwise_not_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga055c356204326409b8097248b5aa6b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_bitwise_and_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga688617eff8007838d3c3a6d82acc5e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_bitwise_or_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga57978bd3bd40c129640f6bf5783d3f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_bitwise_xor_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf844292ffc3d2468386295a3a7a8e984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_bitwise_lsh_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga716a51fac5f796fef6d7b20361a48c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_bitwise_rsh_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae40a247ecf2dbd511377594e234d0b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_logical_not_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac41ddee5c5cc860a08f13ed17e9bc618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_logical_and_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga127032392bbc1f2ce60436c441eafa21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_logical_or_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga56ac47fcf7be4d333864350e64528b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_equality_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6c84e8498fc694ca19c225524e2b89d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_inequality_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac7b4aeab35fd101dabb265d96ac907cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_less_than_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga8174e2a93bd7baef51f9c4ffd3d7206d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_less_than_or_equal_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2bcea1936abb6634724460d9b60b1523</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_greater_than_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2a09893087420eca324aa878466b1323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_greater_than_or_equal_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf0114bddef2099828f5c428dafb0da3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_pre_increment_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga496c606e118a2028c01fdeeeb71b2824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_pre_decrement_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac9731899288a2ce397762c9a01afff43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_post_increment_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga4c9c2d5fed48172635e3c6ead74b239a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_post_decrement_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gafd5fd93a0ed2590bdfb6c2f69bf1a5c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_data_member_function</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf10843e1090d5460710e8a864f8313a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_size_member_function</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7dec2ef3cbf5f6ec0adaba4b0bc59887</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_iterable</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga14a164d38285296acaa8c6679e1b6916</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_tuple_like</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga07b1449019c885977279ee3afedb3b4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>tuple_size</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gabe21403c5219a3959df510427b829038</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>decays_to_pointer_by_unary_plus</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae6f71ec83408ff4ff782c62ba96af352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>decays_to_function_pointer_by_unary_plus</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7d0fb753d984f767d9530f4c88e4d0d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr epsilon_type&lt; T... &gt;</type>
      <name>default_epsilon</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga1d7ffe385c4b8f4558d170f50f5eb79a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_stateless_lambda</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gab1f90e8e3f87fa3fc27fb0ae93571912</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>dynamic_extent</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>ga3cc0f4ca005186681123b33b6a754a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>type_name</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf8f9ff89791f3aa70312cef66f4894f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>type_name_list</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7a9b12967ad4e5e7da9cd73de5cc56d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>muu::build</name>
    <filename>namespacemuu_1_1build.html</filename>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>supports_constexpr_half</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>ae33023a7463b68374575d0cb9f42af43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>supports_constexpr_math</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>ae1f632796abc91c58e0667c38ecc384e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>supports_constexpr_infinity_or_nan</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>ac2ed8c664a3937f1d6beca3916098ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>supports_static_string_literals</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>ad135127eb0889116bcc2d4db72f41673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>supports_type_name</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>ad4ed37ffabb38340c21bc4b899db2646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>supports_constexpr_bit_cast</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>a5ee6b53a87bd46b2bf84f2bea9e2a0b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr uint32_t</type>
      <name>cpp_version</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>ab15a2e5c61489ea57d76304612871b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr uint32_t</type>
      <name>year</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>a60ed708127e16b82cccf0db04f219969</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr uint32_t</type>
      <name>month</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>a1b206904913622e2851364180dffa147</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr uint32_t</type>
      <name>day</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>a8d9bd9685ff101794faacdc43206d662</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr uint32_t</type>
      <name>hour</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>a3a236f2f2246b352c3d0fddb6f898307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr uint32_t</type>
      <name>minute</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>af7c47c598d8d8be8f43083f593a89f6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr uint32_t</type>
      <name>second</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>a0a58816aa6112236ab15e6f83ef7ccb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>bitness</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>a059f47a1fea406df07928d18ba89e7c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>bits_per_byte</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>ac1422aad32070ebc2bdba6500e87bc6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>pointer_size</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>ae50337fa6f6a72d069a0a0898e36dd08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>supports_exceptions</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>a1cc9e6160fa6088fa7b763d5eba09aee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>supports_rtti</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>a564c99820bacd7c3cc5bc2bc1ab5e0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_little_endian</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>af693226bafb2cf34c54e24b92be66c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_big_endian</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>a4d2e05f091c6116d15b6de7ec51c213c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>supports_is_constant_evaluated</name>
      <anchorfile>namespacemuu_1_1build.html</anchorfile>
      <anchor>a8398d41dfdf02da1234b776f754bbb3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>muu::literals</name>
    <filename>namespacemuu_1_1literals.html</filename>
    <member kind="function">
      <type>consteval half</type>
      <name>operator&quot;&quot;_f16</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>a13af047e58351ed0d3446aa9cd617902</anchor>
      <arglist>(long double val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval half</type>
      <name>operator&quot;&quot;_f16</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>abc373f6b1f9679939e03e9421199241a</anchor>
      <arglist>(unsigned long long val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval auto</type>
      <name>operator&quot;&quot;_ss</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>ac4b1112aae002fe8962e5e624cdde438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>consteval uuid</type>
      <name>operator&quot;&quot;_uuid</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>a03372c885efd4ad9b5dafb757ed61f8f</anchor>
      <arglist>(const char *str, size_t len) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval size_t</type>
      <name>operator&quot;&quot;_sz</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>a4ed24f686cd4d1bc02a08d49723524e4</anchor>
      <arglist>(unsigned long long n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval size_t</type>
      <name>operator&quot;&quot;_b</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>ae611e3cdfb3c6d4731dd7f600d50e1a8</anchor>
      <arglist>(unsigned long long b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval size_t</type>
      <name>operator&quot;&quot;_kb</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>a1aafa6a4433ed8ba20e7009e18e3001f</anchor>
      <arglist>(unsigned long long kb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval size_t</type>
      <name>operator&quot;&quot;_mb</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>a9139d3fc5cb832d87d6d9701aa93b351</anchor>
      <arglist>(unsigned long long mb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval size_t</type>
      <name>operator&quot;&quot;_gb</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>a98a2294177231968f6f9f042d402619c</anchor>
      <arglist>(unsigned long long gb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval uint8_t</type>
      <name>operator&quot;&quot;_u8</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>aebd70ea52d54027572688ebfda931440</anchor>
      <arglist>(unsigned long long n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval uint16_t</type>
      <name>operator&quot;&quot;_u16</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>a76a079fced111d7ccf855e813a2f5356</anchor>
      <arglist>(unsigned long long n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval uint32_t</type>
      <name>operator&quot;&quot;_u32</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>a3e2767a13c0198cdbf2b992840070fbc</anchor>
      <arglist>(unsigned long long n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval uint64_t</type>
      <name>operator&quot;&quot;_u64</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>a4e0d840a84730f9a8c0d3884e348f3ec</anchor>
      <arglist>(unsigned long long n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval int8_t</type>
      <name>operator&quot;&quot;_i8</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>a96020b0fcf18ae03ed09f9013f44237d</anchor>
      <arglist>(unsigned long long n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval int16_t</type>
      <name>operator&quot;&quot;_i16</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>a7e6172ce8840190a09044aa8a16182c0</anchor>
      <arglist>(unsigned long long n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval int32_t</type>
      <name>operator&quot;&quot;_i32</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>aa49717181930042c1491b11d94c94134</anchor>
      <arglist>(unsigned long long n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval int64_t</type>
      <name>operator&quot;&quot;_i64</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>aa621e75746c24672c98a7395560985e6</anchor>
      <arglist>(unsigned long long n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval int128_t</type>
      <name>operator&quot;&quot;_i128</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>a974965c4f700560278e31614bb38fc92</anchor>
      <arglist>(unsigned long long n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>consteval uint128_t</type>
      <name>operator&quot;&quot;_u128</name>
      <anchorfile>namespacemuu_1_1literals.html</anchorfile>
      <anchor>a029f1ed1b5268a44c18ab45754d300f6</anchor>
      <arglist>(unsigned long long n) noexcept</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>muu::strong_typedef_traits</name>
    <filename>namespacemuu_1_1strong__typedef__traits.html</filename>
    <member kind="typedef">
      <type>muu::impl::stypedef_pointer_arithmetic&lt; T &gt;</type>
      <name>pointer_arithmetic</name>
      <anchorfile>namespacemuu_1_1strong__typedef__traits.html</anchorfile>
      <anchor>a27ab93e18c0889307ef3195193475bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::impl::stypedef_addable&lt; T &gt;</type>
      <name>addable</name>
      <anchorfile>namespacemuu_1_1strong__typedef__traits.html</anchorfile>
      <anchor>aad28a479b8849a2994bfc78556e902df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::impl::stypedef_subtractable&lt; T &gt;</type>
      <name>subtractable</name>
      <anchorfile>namespacemuu_1_1strong__typedef__traits.html</anchorfile>
      <anchor>a728caf6f550246e511ebc1402b705e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::impl::stypedef_incrementable&lt; T &gt;</type>
      <name>incrementable</name>
      <anchorfile>namespacemuu_1_1strong__typedef__traits.html</anchorfile>
      <anchor>adc83021f06cc113f94143d246e06ab9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::impl::stypedef_decrementable&lt; T &gt;</type>
      <name>decrementable</name>
      <anchorfile>namespacemuu_1_1strong__typedef__traits.html</anchorfile>
      <anchor>a7cd603015fe6e4c83c1beb0bf0edfc55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::impl::stypedef_comparable&lt; T &gt;</type>
      <name>comparable</name>
      <anchorfile>namespacemuu_1_1strong__typedef__traits.html</anchorfile>
      <anchor>a2d1347756ab6dded8a9d5a01ba7aaf89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::impl::stypedef_boolean&lt; T &gt;</type>
      <name>boolean</name>
      <anchorfile>namespacemuu_1_1strong__typedef__traits.html</anchorfile>
      <anchor>a5b5321ca5a3e1dd0face3ffb2f468869</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>muu::impl::stypedef_callable&lt; T &gt;</type>
      <name>callable</name>
      <anchorfile>namespacemuu_1_1strong__typedef__traits.html</anchorfile>
      <anchor>ad655de826e397423b7dfb7360c3816c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>code_units</name>
    <title>Code units</title>
    <filename>group__code__units.html</filename>
    <subgroup>is_ascii_code_point</subgroup>
    <subgroup>is_ascii_hyphen</subgroup>
    <subgroup>is_ascii_letter</subgroup>
    <subgroup>is_ascii_lowercase</subgroup>
    <subgroup>is_ascii_number</subgroup>
    <subgroup>is_ascii_uppercase</subgroup>
    <subgroup>is_ascii_whitespace</subgroup>
    <subgroup>is_code_point</subgroup>
    <subgroup>is_code_point_boundary</subgroup>
    <subgroup>is_combining_mark</subgroup>
    <subgroup>is_decimal_digit</subgroup>
    <subgroup>is_hexadecimal_digit</subgroup>
    <subgroup>is_hyphen</subgroup>
    <subgroup>is_letter</subgroup>
    <subgroup>is_lowercase</subgroup>
    <subgroup>is_non_ascii_code_point</subgroup>
    <subgroup>is_non_ascii_hyphen</subgroup>
    <subgroup>is_non_ascii_letter</subgroup>
    <subgroup>is_non_ascii_lowercase</subgroup>
    <subgroup>is_non_ascii_number</subgroup>
    <subgroup>is_non_ascii_uppercase</subgroup>
    <subgroup>is_non_ascii_whitespace</subgroup>
    <subgroup>is_not_code_point</subgroup>
    <subgroup>is_not_hyphen</subgroup>
    <subgroup>is_not_letter</subgroup>
    <subgroup>is_not_lowercase</subgroup>
    <subgroup>is_not_number</subgroup>
    <subgroup>is_not_uppercase</subgroup>
    <subgroup>is_not_whitespace</subgroup>
    <subgroup>is_number</subgroup>
    <subgroup>is_octal_digit</subgroup>
    <subgroup>is_uppercase</subgroup>
    <subgroup>is_whitespace</subgroup>
  </compound>
  <compound kind="group">
    <name>constants</name>
    <title>Constants</title>
    <filename>group__constants.html</filename>
    <namespace>muu::build</namespace>
    <class kind="struct">muu::constants</class>
    <class kind="struct">muu::constants&lt; half &gt;</class>
    <class kind="struct">std::numeric_limits&lt; muu::half &gt;</class>
    <class kind="struct">muu::constants&lt; line_segment&lt; Scalar &gt; &gt;</class>
    <class kind="struct">muu::constants&lt; matrix&lt; Scalar, Rows, Columns &gt; &gt;</class>
    <class kind="struct">muu::constants&lt; packed_unit_vector&lt; Integer, Dimensions &gt; &gt;</class>
    <class kind="struct">muu::constants&lt; plane&lt; Scalar &gt; &gt;</class>
    <class kind="struct">muu::constants&lt; quaternion&lt; Scalar &gt; &gt;</class>
    <class kind="struct">muu::constants&lt; triangle&lt; Scalar &gt; &gt;</class>
    <class kind="struct">muu::constants&lt; uuid &gt;</class>
    <class kind="struct">muu::constants&lt; vector&lt; Scalar, Dimensions &gt; &gt;</class>
    <class kind="struct">muu::constants&lt; float &gt;</class>
    <class kind="struct">muu::constants&lt; double &gt;</class>
    <class kind="struct">muu::constants&lt; long double &gt;</class>
    <class kind="struct">muu::constants&lt; __fp16 &gt;</class>
    <class kind="struct">muu::constants&lt; _Float16 &gt;</class>
    <class kind="struct">muu::constants&lt; float128_t &gt;</class>
    <class kind="struct">muu::constants&lt; char &gt;</class>
    <class kind="struct">muu::constants&lt; wchar_t &gt;</class>
    <class kind="struct">muu::constants&lt; char8_t &gt;</class>
    <class kind="struct">muu::constants&lt; char16_t &gt;</class>
    <class kind="struct">muu::constants&lt; char32_t &gt;</class>
    <class kind="struct">muu::constants&lt; signed char &gt;</class>
    <class kind="struct">muu::constants&lt; unsigned char &gt;</class>
    <class kind="struct">muu::constants&lt; signed short &gt;</class>
    <class kind="struct">muu::constants&lt; unsigned short &gt;</class>
    <class kind="struct">muu::constants&lt; signed int &gt;</class>
    <class kind="struct">muu::constants&lt; unsigned int &gt;</class>
    <class kind="struct">muu::constants&lt; signed long &gt;</class>
    <class kind="struct">muu::constants&lt; unsigned long &gt;</class>
    <class kind="struct">muu::constants&lt; signed long long &gt;</class>
    <class kind="struct">muu::constants&lt; unsigned long long &gt;</class>
    <class kind="struct">muu::constants&lt; int128_t &gt;</class>
    <class kind="struct">muu::constants&lt; uint128_t &gt;</class>
  </compound>
  <compound kind="group">
    <name>core</name>
    <title>Core</title>
    <filename>group__core.html</filename>
    <subgroup>meta</subgroup>
    <class kind="class">muu::compressed_pair</class>
    <class kind="struct">muu::half</class>
    <class kind="struct">muu::integral_range</class>
    <class kind="class">muu::scope_guard</class>
    <class kind="class">muu::scope_fail</class>
    <class kind="class">muu::scope_success</class>
    <class kind="class">muu::span</class>
    <class kind="struct">muu::strong_typedef</class>
    <class kind="class">muu::tagged_ptr</class>
    <class kind="struct">muu::uuid</class>
    <member kind="typedef">
      <type>__int128_t</type>
      <name>int128_t</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gaf8e0aa5a37ec05e07c7b69077de9303c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>__uint128_t</type>
      <name>uint128_t</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gaa82164a62949a1b029695dff5441d577</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>__float128</type>
      <name>float128_t</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga74a70ec9e3331f37ebbc3e875e183861</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_range&lt; size_t &gt;</type>
      <name>index_range</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga5e513b55fd7079d1be1debe2962fdd20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_range&lt; uintptr_t &gt;</type>
      <name>uintptr_range</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga981c7cbd101c1e1a282d7e89eef00965</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_range&lt; intptr_t &gt;</type>
      <name>intptr_range</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gaa28ee361f8507f8ed4615cc8f0c28354</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_range&lt; std::byte * &gt;</type>
      <name>byteptr_range</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab0ee666138056710136d9532965d1565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>countl_zero</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga12cd318fdcf736ca99f5bf66aa615fd1</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>countr_zero</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab5b51a3c121984cfddb8d5da4e9bf070</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>countl_one</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gadf75326611fa43dbacc1ff601e9e969b</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>countr_one</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga84963e1a7bf75ec7464cda53b26dec8a</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>bit_ceil</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gae62fd9413cd433a4e15c0fdf89913a1b</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>bit_pack</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga952a65241777f79e5561239f57ec9295</anchor>
      <arglist>(T val1, U val2, V... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>popcount</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab392bc74729da41c4d226f8d45e58599</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_single_bit</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga309ac880015add971ee06b148191060f</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>bit_floor</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga0ef1d5961e901e2d52b3d6be07efe201</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>bit_width</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga1a764507fe486799f60eac32c622e63e</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>bit_fill_right</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab5cb8d563f61573ca1e2827ddd085d3d</anchor>
      <arglist>(size_t count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>bit_fill_left</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gaf41f6cc12b0e9ac1de1bdf63e2a28fdf</anchor>
      <arglist>(size_t count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr uint8_t</type>
      <name>byte_select</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gae644160cd7d978d95922af233afc5ddd</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr uint8_t</type>
      <name>byte_select</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga18d1da41b1d53329c0d0605596494010</anchor>
      <arglist>(T val, size_t index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>byte_reverse</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab3e8f4f75d417dc6880311de6c9306e9</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>swizzle</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga1aaa24bb10d08ad78c86695baabc1857</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr To</type>
      <name>bit_cast</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gaadb4c6332c738c248f84f43ece303657</anchor>
      <arglist>(const From &amp;from) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::underlying_type_t&lt; T &gt;</type>
      <name>unwrap</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga81642f54291cc4a1287ef141b3f4d34f</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>min</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga3e6bbeba20969ce0e3ca5aca843a9e71</anchor>
      <arglist>(const T &amp;val1, const T &amp;val2, const U &amp;... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>max</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga290899e08db4ce22c8e9f48a02bedaa3</anchor>
      <arglist>(const T &amp;val1, const T &amp;val2, const U &amp;... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>clamp</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga853b138ba34af796906a03cda9dbfabe</anchor>
      <arglist>(const T &amp;val, const T &amp;low, const T &amp;high) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>between</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga4ff100d8bb39742b764c341678f60a7d</anchor>
      <arglist>(const T &amp;val, const U &amp;low, const U &amp;high) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T *</type>
      <name>launder</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga279c303aaba76a43d1dc23834c35f857</anchor>
      <arglist>(T *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr To</type>
      <name>pointer_cast</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab714a50e01b58e7d4117d5ef9d403d39</anchor>
      <arglist>(From from) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T *</type>
      <name>apply_offset</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga95da5073b863161a6542266f4a6c5961</anchor>
      <arglist>(T *ptr, Offset offset) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T *</type>
      <name>to_address</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga79246c66d2df39fe825be13e654d8c52</anchor>
      <arglist>(T *p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>to_address</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga4ba4d37d254803b31a71fca161a46420</anchor>
      <arglist>(const Ptr &amp;p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T *</type>
      <name>assume_aligned</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gaf58f3326aea89653ec725ccbc5ff29d2</anchor>
      <arglist>(T *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_sequence</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gab64801b0b03f54c51a21000e8bb95ea1</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(impl::for_sequence_noexcept_&lt; N, Func &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_product</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga5f6c6004ed4016c437442e80f0b22421</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(impl::for_product_noexcept_&lt; N1, N2, Func &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>apply_alignment</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga6aae2e7be0cb15bed51d7cb636602c5f</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T *</type>
      <name>apply_alignment</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>gae89c7cea139581038d585201d5b3bfee</anchor>
      <arglist>(T *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>apply_alignment</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga7cd587549d099b4323fda37f23097e04</anchor>
      <arglist>(T val, size_t alignment) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T *</type>
      <name>apply_alignment</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga7afe47820cb2e0951bf755832ce108be</anchor>
      <arglist>(T *ptr, size_t alignment) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_constant_evaluated</name>
      <anchorfile>group__core.html</anchorfile>
      <anchor>ga8a9b0aaf9860b30f93639333a5214d34</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>hashing</name>
    <title>Hashing</title>
    <filename>group__hashing.html</filename>
    <class kind="class">muu::hash_combiner</class>
    <class kind="class">muu::fnv1a</class>
    <class kind="class">muu::sha1</class>
    <class kind="struct">std::hash&lt; muu::uuid &gt;</class>
  </compound>
  <compound kind="group">
    <name>iterators</name>
    <title>Iterators</title>
    <filename>group__iterators.html</filename>
    <member kind="function">
      <type>constexpr auto</type>
      <name>begin_iterator</name>
      <anchorfile>group__iterators.html</anchorfile>
      <anchor>ga51289db4c35d5fb00c9a63be59911a08</anchor>
      <arglist>(T &amp;&amp;iterable) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>end_iterator</name>
      <anchorfile>group__iterators.html</anchorfile>
      <anchor>gaa1738bf3c1eae5986fd53eafe6ad7c3e</anchor>
      <arglist>(T &amp;&amp;iterable) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>iterator_distance</name>
      <anchorfile>group__iterators.html</anchorfile>
      <anchor>ga005a07ba4450155afd1ef02e317a9d9b</anchor>
      <arglist>(B begin, E end) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>math</name>
    <title>Math</title>
    <filename>group__math.html</filename>
    <subgroup>abs</subgroup>
    <subgroup>acos</subgroup>
    <subgroup>approx_equal</subgroup>
    <subgroup>approx_zero</subgroup>
    <subgroup>asin</subgroup>
    <subgroup>atan</subgroup>
    <subgroup>atan2</subgroup>
    <subgroup>ceil</subgroup>
    <subgroup>consteval_sqrt</subgroup>
    <subgroup>cos</subgroup>
    <subgroup>floor</subgroup>
    <subgroup>infinity_or_nan</subgroup>
    <subgroup>lerp</subgroup>
    <subgroup>normalize_angle</subgroup>
    <subgroup>normalize_angle_signed</subgroup>
    <subgroup>sin</subgroup>
    <subgroup>sqrt</subgroup>
    <subgroup>tan</subgroup>
    <class kind="class">muu::accumulator</class>
    <class kind="struct">muu::axis_angle</class>
    <class kind="struct">muu::bounding_box</class>
    <class kind="struct">muu::euler_angles</class>
    <class kind="struct">muu::line_segment</class>
    <class kind="struct">muu::matrix</class>
    <class kind="struct">muu::oriented_bounding_box</class>
    <class kind="struct">muu::plane</class>
    <class kind="struct">muu::quaternion</class>
    <class kind="struct">muu::sat_tester</class>
    <class kind="struct">muu::triangle</class>
    <class kind="struct">muu::vector</class>
    <member kind="enumeration">
      <type></type>
      <name>box_corner</name>
      <anchorfile>group__math.html</anchorfile>
      <anchor>gaea66a56dd5d6fff0e1d6647c774eed1e</anchor>
      <arglist></arglist>
      <enumvalue file="group__math.html" anchor="ggaea66a56dd5d6fff0e1d6647c774eed1ead8bd79cc131920d5de426f914d17405a">min</enumvalue>
      <enumvalue file="group__math.html" anchor="ggaea66a56dd5d6fff0e1d6647c774eed1ea9dd4e461268c8034f5c8564e155c67a6">x</enumvalue>
      <enumvalue file="group__math.html" anchor="ggaea66a56dd5d6fff0e1d6647c774eed1ea415290769594460e2e485922904f345d">y</enumvalue>
      <enumvalue file="group__math.html" anchor="ggaea66a56dd5d6fff0e1d6647c774eed1ea3e44107170a520582ade522fa73c1d15">xy</enumvalue>
      <enumvalue file="group__math.html" anchor="ggaea66a56dd5d6fff0e1d6647c774eed1eafbade9e36a3f36d3d676c1b808451dd7">z</enumvalue>
      <enumvalue file="group__math.html" anchor="ggaea66a56dd5d6fff0e1d6647c774eed1eadbd69ee9ae289a85ea34dbef8435d7c1">xz</enumvalue>
      <enumvalue file="group__math.html" anchor="ggaea66a56dd5d6fff0e1d6647c774eed1ea2151a2bc77807b81113febbf50c4bc95">yz</enumvalue>
      <enumvalue file="group__math.html" anchor="ggaea66a56dd5d6fff0e1d6647c774eed1ead16fb36f0911f878998c136191af705e">xyz</enumvalue>
      <enumvalue file="group__math.html" anchor="ggaea66a56dd5d6fff0e1d6647c774eed1ea2ffe4e77325d9a7152f7086ea7aa5114">max</enumvalue>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>lcm</name>
      <anchorfile>group__math.html</anchorfile>
      <anchor>ga747762e03956634201248a153ce0ce5e</anchor>
      <arglist>(T val1, U val2, V... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>gcd</name>
      <anchorfile>group__math.html</anchorfile>
      <anchor>ga54f9d1a2efa5ffdf81afdaa4fcb89fd6</anchor>
      <arglist>(T val1, U val2, V... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>evenly_distribute</name>
      <anchorfile>group__math.html</anchorfile>
      <anchor>gabf640468db93ee9390f6809f2495a291</anchor>
      <arglist>(T total, T bucket_count, T bucket_index) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>memory</name>
    <title>Memory management</title>
    <filename>group__memory.html</filename>
    <class kind="class">muu::blob</class>
    <class kind="struct">muu::generic_allocator</class>
    <member kind="typedef">
      <type>span&lt; const T, Extent &gt;</type>
      <name>const_span</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>ga842ca2a75ebbf9f8c1a2ce90afa8f3bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>span&lt; std::byte &gt;</type>
      <name>byte_span</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>gae6d7d07e5320ddbc969461099bd00db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>span&lt; const std::byte &gt;</type>
      <name>const_byte_span</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>gaefedbd706a97f094756e86befffcf178</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>span&lt; const std::byte, impl::as_bytes_extent&lt; T, N &gt; &gt;</type>
      <name>as_bytes</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>gacaa08dc6422b5847e58a7c4ab9557362</anchor>
      <arglist>(span&lt; T, N &gt; s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>span&lt; std::byte, impl::as_bytes_extent&lt; T, N &gt; &gt;</type>
      <name>as_writable_bytes</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>gab6812fcab12e2e24abb7261d0f895fcb</anchor>
      <arglist>(span&lt; T, N &gt; s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>span&lt; const std::byte, impl::as_bytes_extent&lt; T, N &gt; &gt;</type>
      <name>as_bytes</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>gacaa08dc6422b5847e58a7c4ab9557362</anchor>
      <arglist>(span&lt; T, N &gt; s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>span&lt; std::byte, impl::as_bytes_extent&lt; T, N &gt; &gt;</type>
      <name>as_writable_bytes</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>gab6812fcab12e2e24abb7261d0f895fcb</anchor>
      <arglist>(span&lt; T, N &gt; s) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>dynamic_extent</name>
      <anchorfile>group__memory.html</anchorfile>
      <anchor>ga3cc0f4ca005186681123b33b6a754a36</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>meta</name>
    <title>Metafunctions and type traits</title>
    <filename>group__meta.html</filename>
    <class kind="struct">muu::type_list</class>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; std::remove_reference_t&lt; T &gt; &gt;</type>
      <name>remove_cvref</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3cac44d2af43c4fd98e835ff5b28988a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::remove_enum_&lt; T &gt;::type</type>
      <name>remove_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga4f0f94bba132e44d22663319f05d2ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::remove_lvalue_reference_&lt; T &gt;::type</type>
      <name>remove_lvalue_reference</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga13a69e455c20f67fc73394a02831e8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::remove_rvalue_reference_&lt; T &gt;::type</type>
      <name>remove_rvalue_reference</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga82a7eca9ca8f07f6779eff47f45d5a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::largest_&lt; T, U... &gt;::type</type>
      <name>largest</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga66c7ac2c2ba5ae0358a9c398ca1a5fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::smallest_&lt; T, U... &gt;::type</type>
      <name>smallest</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7b0e548ad93b4b2fabc3c38eadd456c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::most_aligned_&lt; T, U... &gt;::type</type>
      <name>most_aligned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga412a873e98a67c58f4bcb71bb8c23ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::least_aligned_&lt; T, U... &gt;::type</type>
      <name>least_aligned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga14d4e47d4a3ee4bcae55745a917343e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_ref_&lt; T, std::add_const_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt;::type</type>
      <name>add_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6c121fbd44449d05f6a34f26d51d923f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_ref_&lt; T, std::remove_const_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt;::type</type>
      <name>remove_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6d7666d41f4b1baa5e5b030e85d145c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; Const, add_const&lt; T &gt;, remove_const&lt; T &gt; &gt;</type>
      <name>set_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga70ea61c88a2156d5ca0576b338692597</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; AddConst, add_const&lt; T &gt;, T &gt;</type>
      <name>conditionally_add_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga23ee95c345637ff50a6cc88c4fb0d031</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>set_const&lt; T, is_const&lt; CopyFrom &gt; &gt;</type>
      <name>copy_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3e944d0a62580bb16190d18a7a50e854</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_ref_&lt; T, std::add_volatile_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt;::type</type>
      <name>add_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf658a920120d44cf78a83198479de23c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_ref_&lt; T, std::remove_volatile_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt;::type</type>
      <name>remove_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gabb6c34cb7b210e52a6d0d9e53234696b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; Volatile, add_volatile&lt; T &gt;, remove_volatile&lt; T &gt; &gt;</type>
      <name>set_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3216c56b6dfa3cd6045818d2f8e09612</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; AddVolatile, add_volatile&lt; T &gt;, T &gt;</type>
      <name>conditionally_add_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga5387101d09160941cca73a48954eb7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>set_volatile&lt; T, is_volatile&lt; CopyFrom &gt; &gt;</type>
      <name>copy_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gafdebb5c32611e098bd4074c6393ad55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_ref_&lt; T, std::add_volatile_t&lt; std::add_const_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt; &gt;::type</type>
      <name>add_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga946998d98f22705d1e955cc213187310</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_ref_&lt; T, std::remove_volatile_t&lt; std::remove_const_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt; &gt;::type</type>
      <name>remove_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3d3fbe6cee41ab6b225058f8d29a17d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; ConstVolatile, add_cv&lt; T &gt;, remove_cv&lt; T &gt; &gt;</type>
      <name>set_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga75174a7728c44e0ef2c5c573910945d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; AddConstVolatile, add_cv&lt; T &gt;, T &gt;</type>
      <name>conditionally_add_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaccbf5f71e9b673c2f490c0c0406042ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>copy_const&lt; copy_volatile&lt; T, CopyFrom &gt;, CopyFrom &gt;</type>
      <name>copy_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga13aaa81d66b143ecb5d837c8c0041d18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::copy_ref_&lt; T, CopyFrom &gt;::type</type>
      <name>copy_ref</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa11d1a8c1d6c16d5381a6f1d11940294</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>copy_ref&lt; copy_cv&lt; std::remove_reference_t&lt; T &gt;, std::remove_reference_t&lt; CopyFrom &gt; &gt;, CopyFrom &gt;</type>
      <name>copy_cvref</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga75bafae329db57745b406a02e6565007</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::rebase_pointer_&lt; Ptr, NewBase &gt;::type</type>
      <name>rebase_pointer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga29769609b73728e3b7814d36a7e0c335</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::make_signed_&lt; T &gt;::type</type>
      <name>make_signed</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga8723b987045c7b40be5ce133a46e899c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::make_unsigned_&lt; T &gt;::type</type>
      <name>make_unsigned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga5f3932e1b40c23bd953e0444340aa1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; Signed, make_signed&lt; T &gt;, make_unsigned&lt; T &gt; &gt;</type>
      <name>set_signed</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gafed1fc9809926331d0cdfb6ea3c1cb7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>set_signed&lt; T, is_signed&lt; CopyFrom &gt; &gt;</type>
      <name>copy_signed</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac5e348d0385db539de78faa96895dba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; Unsigned, make_unsigned&lt; T &gt;, make_signed&lt; T &gt; &gt;</type>
      <name>set_unsigned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga53618440cb88b6a660781cd80eff06cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>set_unsigned&lt; T, is_unsigned&lt; CopyFrom &gt; &gt;</type>
      <name>copy_unsigned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa51e86e5712ddee88175a905c427ff62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::type_identity_&lt; T &gt;::type</type>
      <name>type_identity</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga8b8f215acad0e9f3d7aa52326155f030</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::unsigned_integer_&lt; Bits &gt;::type</type>
      <name>unsigned_integer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga47a90ed3608cf7b0bf562f4ad208cd21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::signed_integer_&lt; Bits &gt;::type</type>
      <name>signed_integer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga4f67907a17de3414f8f0340716e987d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename impl::remove_all_pointers_&lt; T &gt;::type</type>
      <name>remove_all_pointers</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaff6410affb3cb93013482639fcaea000</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>copy_cvref&lt; typename impl::remove_callconv_&lt; remove_cvref&lt; T &gt; &gt;::type, T &gt;</type>
      <name>remove_callconv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga4af6796f51934576020a09a73986d074</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>copy_cvref&lt; typename impl::add_noexcept_&lt; remove_cvref&lt; T &gt; &gt;::type, T &gt;</type>
      <name>add_noexcept</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga5087ff7f20ed1765f215b92e4b56cd6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>copy_cvref&lt; typename impl::remove_noexcept_&lt; remove_cvref&lt; T &gt; &gt;::type, T &gt;</type>
      <name>remove_noexcept</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga28bb77154a6d0fb8930b84c5d59373d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; impl::is_small_float_&lt; T &gt;, typename impl::rebase_ref_&lt; T, copy_cv&lt; float, T &gt; &gt;::type, T &gt;</type>
      <name>promote_if_small_float</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga0a3f15c5886ad6189103d5705db8e37c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; impl::is_large_float_&lt; T &gt;, typename impl::rebase_ref_&lt; T, copy_cv&lt; long double, T &gt; &gt;::type, T &gt;</type>
      <name>demote_if_large_float</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga588efdcdebc69e38cb6353d8462d59ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>demote_if_large_float&lt; promote_if_small_float&lt; T &gt; &gt;</type>
      <name>clamp_to_standard_float</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae07552fde8149d1a8a6c93971edbbd86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>impl::std_math_common_type&lt; remove_cvref&lt; T &gt;... &gt;</type>
      <name>epsilon_type</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga25162e97f327cfee39320e501bdb2697</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::integral_constant&lt; size_t, N &gt;</type>
      <name>index_tag</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6ca7fed60fe86574dd8bedf3b3332431</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_tag&lt; 0 &gt;</type>
      <name>x_axis_tag</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga8c02cd07c84b1ef589a0a3b83e113682</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_tag&lt; 1 &gt;</type>
      <name>y_axis_tag</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6195dfd7a074e2a16f6c61500c45fe23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_tag&lt; 2 &gt;</type>
      <name>z_axis_tag</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga480c8ad7ee9e1cc7bcafa16d817bca1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_tag&lt; 3 &gt;</type>
      <name>w_axis_tag</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga91d696211c0fb4edebb87611d7fab7df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_list&lt; T &gt;</type>
      <name>type_tag</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga90483ba1ebb9236ec76a1e5c3a0d9bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>allow_implicit_bit_cast</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga824ac2b58e006d4be8d4b0d6a0f7180d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>always_false</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa4c92e65e153e9a6c9ac01ba3bd653e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>total_size</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3b7e16d2f90358811bc6231eb993ff33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>alignment_of</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga693c421331c5f268eb2e2fdd318368fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_same</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaed6f4fa9f355d5e882000e65dc7cd0b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_same</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga9c2b21ea2cf57533a5dcf264d0e906e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>index_of_type</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga91356a65708493c6fbc993024894c901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicitly_convertible</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga05ccb72a3320555db5a5115cd85d6691</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicitly_convertible_to_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga022ab99547d2892239187f83bd0644f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicitly_convertible_to_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3958a07eb93e42c5e6b1f65366d58968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_implicitly_convertible_to</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga02add24d1eebc3839d917c0691cd6e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_explicitly_convertible</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga67e98114af69303c9e5f65e56056cd06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_explicitly_convertible_to_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gafd769d61abf0eea21cb8c95ab32ebc0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_explicitly_convertible_to_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gabc0a354ed72c2bc9b631b10cd9c4f451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_explicitly_convertible_to</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3034c2e89b1b9fb97c2afc24f285c175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_convertible</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga525ce1f7e17d4abf8fae0c6aa5fd26cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_convertible_to_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaec35a37d461e7b8b6b6a92296c75c5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_convertible_to_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga622faeced84d6fc02ccadcecd020e78a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_convertible_to</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga20d0844251aba1af5b372c44803999eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicitly_nothrow_convertible</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga756aec06547ff6bd69c7f51bb4d01e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicitly_nothrow_convertible_to_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2559c7587af80489da97126e645da89d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicitly_nothrow_convertible_to_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf0de9802b973764be7848a020088f961</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_implicitly_nothrow_convertible_to</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga5acc7a33b8fd21e0b8805f26d9ac992d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_explicitly_nothrow_convertible</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gab20c2a24d63c89812c535f0a986b958d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_explicitly_nothrow_convertible_to_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3f32761c6e60e709f4e6e4b6874230a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_explicitly_nothrow_convertible_to_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gadbb31fed4f56fa8869ea860a4b330f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_explicitly_nothrow_convertible_to</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6d0bc59b0f1a3247d4e42c39d2f00dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_convertible</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga090993f769edb7c30da887d3b6f71f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_convertible_to_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga324c6e94dfe58e068c531e55c15ea9a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_convertible_to_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga0ada082fe05220bf0aaca76cba7f9e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_nothrow_convertible_to</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga465e6a6c912b71ca29cf4abf4575bf4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf1d5da5278f527b501cecffdd38e2e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga5654c62084cb368c8d754ef2391188f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga38cc1e5109a701b7c609faf614ad75f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_scoped_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga54c8d27010a9c661dba826d90f0c9ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_scoped_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac4960dd74a53e778d606c67b17b898fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_scoped_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac742ec408e961ab3cdfcba8b59fc043f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_legacy_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga0ad880900bc41c21a698d9114f333e3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_legacy_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga61a1919e5b9db8752915c52166418e35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_legacy_enum</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga0b19c96f2fd22318ff9434cecb8e4ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_unsigned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga9e9c5b2e65e4f784d2a6b52b6a33a34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_unsigned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gab947cfb735e87e9394420be39d9f0279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_unsigned</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa71f70dfddfb9f29ed162014c6020672</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_signed</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga8692cd4c2e3c8e2b0167a5a586f1f6e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_signed</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga8db6d992e6f39f91948ea80dff4e1025</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_signed</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gad0e4bc930ad4094734715f7b5b116c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_integral</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6283839d5536a4ee096adccee42b88c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_integral</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga1a551403c0c337deb10ceb0dc7718fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_integral</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga113302a3a1ac13b36caa7f1baaf7a191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_integer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga32715027f4d7ea16b52b2a2e00ca31f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_integer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga93df7f38a0b30c68c6138780d55885fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_integer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac4750ab546ab72009c9c73407016f0f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_floating_point</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae74155e0cf085141e1923124718915a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_floating_point</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa4cc5ffaa2d70d40b668c54f1e8ec303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_floating_point</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga66729838c230dc7bb06574460d0d8c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_standard_arithmetic</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga31dc0c880276019ff4dc15c27db38541</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_extended_arithmetic</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga92c7057e770b054e9d54bb28d60badea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_arithmetic</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga62cd2e27697815af581b5a8584fd1f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_arithmetic</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga4cdccad554e7b4964b66449794c488ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_arithmetic</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3e1129e045b70c2af6a5d50b1017662c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga79cf1d440a2967847a6d0a08dc22fa19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga586bfe745dfc478bb12c62911c5ec7d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_const</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gadf6a0fd43aef7bad2aa5b1061ca76909</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa1afdcda38765572b01f8112bea59913</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga33f32f81af61846324b24c96d22fb855</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_volatile</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gadca3d0c318c62cf67f0e711cddc3ed92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaaba32cd64b5832535e6cb2279f1f7881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaac432f658a461422891106bb6f8d0125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_cv</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga604b58afd51f22c514b3642e06984660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_cvref</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga21f392701d987b745866ab36fa3c6242</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_cvref</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2142c726fa120091603f69a4f88800b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_cvref</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf373c7ded4ff3f304e087d9311e012f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>inherits_from</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gad99449272de65874d3b7569d9eb9e805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>inherits_from_any</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga49aa08768876bf7322df7d9b27eac4bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>inherits_from_all</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gafb8004fa9a10a8e6d4ae98a8d8a797b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_code_unit</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga0e1dddeef206a9a47a8223994c219cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_character</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga277e445299ef15f744e94bd68733bae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>pointer_rank</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae9cd96c20c0f16e1e1eac99e798724ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_unbounded_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gab42aeb290d61ad20287ed2e8df10462b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_unbounded_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaa1efb75d54e410227ee2cd1448d72d41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_unbounded_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf8727f2300cefe6944088ab53b9c9d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_bounded_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gad0b97e37de851bc5aba414d527a4d0e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_bounded_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga41e64183a2500e39947132b435ff13d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_bounded_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2b5c53a174d76fc6d6dde73a999753ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7a9d2c42a55dd3a859e8cd1381dfc845</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae48b7c7d5e58e9c43b47386ec34c2a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_array</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga3e77e037d2b8f336651ae4f06fead98d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_function</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2f5be1b8af1251a81691fd7e4a8c10f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_function</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2311e393d4395c4c60f8be62463ff71f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_function</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga1838cd67d955014bc3dcccf62729e28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_function_pointer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae1cae85c90f959c943683d0e6b8d03c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_function_pointer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac4b8cf2371d6981ef042c2d0b0b57f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_function_pointer</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga97a71f40f5199e22ff6226054bf5a65e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>is_detected</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gab4f017e4e9376c59602a97b3e725389c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_indirection_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7ce806883528834c0b156cf9d150f8b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_arrow_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gafc3c409c2d08bc8913db5ad46a84e0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_subscript_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga99d503cf409b10ba5314452688d7abb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_unary_plus_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf2a9f6988557f79f960a87dccb414b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_unary_minus_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gadfa546414eebe20b450f7a7d520b4767</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_addition_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gadffe33b336020e6d4f41fba1c9788949</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_subtraction_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6889472d0f71b499636c488a48aafe27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_division_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaee2f7df90bf1a9447e0ff9059e6d9176</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_multiplication_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6f9cee395159fa1cc0c85d04b5ec9414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_modulo_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga5445f5de353c58b7e304e585b5eae84a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_bitwise_not_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga055c356204326409b8097248b5aa6b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_bitwise_and_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga688617eff8007838d3c3a6d82acc5e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_bitwise_or_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga57978bd3bd40c129640f6bf5783d3f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_bitwise_xor_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf844292ffc3d2468386295a3a7a8e984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_bitwise_lsh_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga716a51fac5f796fef6d7b20361a48c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_bitwise_rsh_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae40a247ecf2dbd511377594e234d0b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_logical_not_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac41ddee5c5cc860a08f13ed17e9bc618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_logical_and_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga127032392bbc1f2ce60436c441eafa21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_logical_or_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga56ac47fcf7be4d333864350e64528b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_equality_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga6c84e8498fc694ca19c225524e2b89d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_inequality_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac7b4aeab35fd101dabb265d96ac907cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_less_than_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga8174e2a93bd7baef51f9c4ffd3d7206d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_less_than_or_equal_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2bcea1936abb6634724460d9b60b1523</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_greater_than_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga2a09893087420eca324aa878466b1323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_greater_than_or_equal_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf0114bddef2099828f5c428dafb0da3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_pre_increment_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga496c606e118a2028c01fdeeeb71b2824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_pre_decrement_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gac9731899288a2ce397762c9a01afff43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_post_increment_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga4c9c2d5fed48172635e3c6ead74b239a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_post_decrement_operator</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gafd5fd93a0ed2590bdfb6c2f69bf1a5c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_data_member_function</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf10843e1090d5460710e8a864f8313a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_size_member_function</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7dec2ef3cbf5f6ec0adaba4b0bc59887</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_iterable</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga14a164d38285296acaa8c6679e1b6916</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_tuple_like</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga07b1449019c885977279ee3afedb3b4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>tuple_size</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gabe21403c5219a3959df510427b829038</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>decays_to_pointer_by_unary_plus</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gae6f71ec83408ff4ff782c62ba96af352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>decays_to_function_pointer_by_unary_plus</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7d0fb753d984f767d9530f4c88e4d0d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr epsilon_type&lt; T... &gt;</type>
      <name>default_epsilon</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga1d7ffe385c4b8f4558d170f50f5eb79a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_stateless_lambda</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gab1f90e8e3f87fa3fc27fb0ae93571912</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>type_name</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>gaf8f9ff89791f3aa70312cef66f4894f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>type_name_list</name>
      <anchorfile>group__meta.html</anchorfile>
      <anchor>ga7a9b12967ad4e5e7da9cd73de5cc56d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>preprocessor</name>
    <title>Preprocessor</title>
    <filename>group__preprocessor.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>MUU_CPP</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gadb6fae17fb19af86f59b0ec414838070</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_CPP</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gadb6fae17fb19af86f59b0ec414838070</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_INTELLISENSE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga0f1d961fa4c5109d8e007ddbaf868339</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DOXYGEN</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gadb3f97223102fea76730cc3b1c36afdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_CLANG</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga060dd82f84c0c24bf0be1462d79cbaef</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ICC</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga909a6807c9b69a3b6e146a709c2a248d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_MSVC</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gacf33ca59cc4d469b40b34ea471a0f57d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_GCC</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga4e615ca6ddf99207d0d46055db0a9aaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ARCH_ITANIUM</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga1741334d0b0155633d2c2cb965b4e363</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ARCH_AMD64</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga032b28f73dc7b93f02c43a8ea6242731</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ARCH_X86</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga026661cf5e2ffbb7699f14b57a36bc45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ARCH_ARM32</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga7f49df29b5350349e0f51b96a9d33044</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ARCH_ARM64</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gab192624d5c5336adc054f386dc362f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ARCH_ARM</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gae07f9cdd5a8d78f5a0672a865fd7cc43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ARCH_X64</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga1cdbe016e691eafdbf69dc6562d821e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ARCH_BITNESS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga2e302f23e8da851a0443167d733facc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_WINDOWS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga9dee2f6a74a083b6305a29cfea6e2e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_UNIX</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gada1974043df8aaa452400fe53a603219</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_LINUX</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga1e4e923ae71486fc6d9ac2bb0448231f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ISET_MMX</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga2fc13d6c4e3a69cdf17fcf5de608a044</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ISET_SSE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gaa4a59fbce03e3c9e9e92ea5a66555184</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ISET_SSE2</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga27c4756abe6f79ba5ced502f1a3b6f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ISET_AVX</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gadee8a66ce0dce28aa817259e818945aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ISET_AVX2</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga8db86eff6d9c4b072696d2daace5e533</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ISET_AVX512</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gad1d2fd63c35410fc1c23cad4d61a5c95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_LITTLE_ENDIAN</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga94d4f95aab666decfb7e1aac26d82f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_BIG_ENDIAN</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga4e94491264f3712dd7dc6dbde6331a0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_INCLUDE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gaa46769772ecacae384f202d2288b5ef9</anchor>
      <arglist>(header)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_BUILTIN</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga555a63af817046f3efcdf5e5df32924b</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_FEATURE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga9dcf675f3fa6b815e3c4af75caaea104</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_ATTR</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gaa6d403786a6e43ae12a7e6d2fabaf7bc</anchor>
      <arglist>(attr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_CPP_ATTR</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga26ba299c991ccd164204b481e80556d1</anchor>
      <arglist>(attr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_EXCEPTIONS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga9ec0bf0abed9f6d63e8ff1d061fd7fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_RTTI</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga3a719188641393747cd874964992274e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_FP16</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gab2a752151f65377391481d1597297eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_FLOAT16</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga27290363c4626a953e97d39dd042af66</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_FLOAT128</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gad6cf2ebac5d966916c61f46e79f035b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_INT128</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga61a9c9471317fa76fa46bd87d8f671b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_CHAR8</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga3c123483a9bd8a9d00279f0b65eace83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_CONSTEVAL</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gab549eb238362898cf7195c31ab932d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_CONSTEVAL_IF</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga3c936754cdc18a19c8b08fb8f39349ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ATTR</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga47316637bf87fd0d0e4bb179cb603226</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ATTR_NDEBUG</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga202256eba435dbe97112a1e3751d31ad</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DECLSPEC</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga011cf3340b4f4928a24e3b83c2360f34</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_UNREACHABLE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga5180303025bb345be8bf831f1e84abed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ASSUME</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gabed9674c744db2fe13aa5a486b072d02</anchor>
      <arglist>(cond)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_MALLOC</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga5e16d39be451564f4e4938ebf5b799ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_CONSTEVAL</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gad89d19ea9cfdd7ec957df9cb6189f552</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ALWAYS_INLINE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga364a90dd5bcbbbc7b58bbaae2b0ed904</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_NEVER_INLINE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga00e7d0da1019e1fc64eff53311eab35e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ABSTRACT_INTERFACE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gafab84de7e09a93180841a788f0123c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_EMPTY_BASES</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga877f0e4eacd4875af9244d38c6547277</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_TRIVIAL_ABI</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gaff60752ea9802d5cb7f09835672bd801</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_LIKELY</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga96965362141a0033ee6aae1a68d8b30f</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_UNLIKELY</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga69620e1889e6b7ff936d34210ecf9bf5</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_NO_UNIQUE_ADDRESS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga8f304d74e983202dd94830798b27d10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_NODISCARD</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga067801d06d0ecba0f17634fa6295706e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_NODISCARD_CTOR</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga2b6bac0477246591441528bf0bafeb39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_CONCAT</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga7192f09d19d5065e6442e0053129bed1</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_MAKE_STRING</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga2fb0fd64a97ececb26a198c1072d223c</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_MAKE_RAW_STRING</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gadd45b899bf7c8cc6e64f6d7c02b1c4f3</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_MAKE_STRING_VIEW</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gabf47b45b883c9646ed6f8ed0b73f8aaa</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ATTR_CLANG</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga7dd651503a9dc759413a92f29e1bae08</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ATTR_CLANG_GE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga0264a9a1dc2f996bc538ba65663b7af5</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ATTR_CLANG_LT</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga5869f898016ec0f2b43ca8d1af1030d5</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_CLANG</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga52152c34f89ec0ce1caeacd62c62c23d</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_CLANG_GE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga9efe0dba4352e6c960b1264e5cf6ee4a</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_CLANG_LT</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga2298483b6b3af755fe55fd9b060a2e02</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ATTR_GCC</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga36d8876b444701ec96c34f20026acd7a</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ATTR_GCC_GE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga6cac3ad3454e124f018ea5e75414ed54</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ATTR_GCC_LT</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gae024ebb7b36a46b6391c9d236611b312</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_GCC</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga6f80b008b889d869c7447aff2475dd4d</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_GCC_GE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga4fcef268a71e24cde6f5470a2a3efdcc</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_GCC_LT</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gacef122f71333910cb2d2462877a34bfb</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_MSVC</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gac6b8e4b75a00c89a3f1479feb81be8e8</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_MSVC_GE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga2f45e603c1abf6f077f07989f779652d</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_MSVC_LT</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga20845a67d49397e645bd03ea0ab455ca</anchor>
      <arglist>(ver,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PRAGMA_ICC</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga5712bc0e086c593c40c8c4ed32caa46b</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DELETE_MOVE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga7e2f4118dd8fcd04ed314cc433b8f1af</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DELETE_COPY</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga25a02df45c3dbd56ef86ba14b3e89ce3</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DEFAULT_MOVE</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gae0f485363e80f9b712ba588c38a6913c</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DEFAULT_COPY</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga934ea8bd0642688273d3e5fb6f262bae</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_UNUSED</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga60d6410ec59d9127e60193e48d911c19</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_NOOP</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga208185e62d9dd3604e348e153ffc976b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_VECTORCALL</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga4eea4cd448c2f1324dc6fcfac8587688</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_MAKE_FLAGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gae04a44728acc9352d70e8a7bf067eae3</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_PUSH_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga0b9c2e2b602c21d5f58ddaeb74923019</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_POP_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga70d1ba7b4018ae5521eed5b23e98d41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DISABLE_SWITCH_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gac70b9a17a5df0f9790896ac3bdd66269</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DISABLE_LIFETIME_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga94a89890f03584dd7d3fda2bb9d80013</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DISABLE_SPAM_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gaf39b595a94654ba4666ffbbd25735c59</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DISABLE_ARITHMETIC_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga02a7d4cbc36ab3a02d1c9e153af196be</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DISABLE_SHADOW_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gabf94a669fabe4f2614f7f1f6876e7c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DISABLE_SUGGEST_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga305e4c6d20217201e79a601d7ec46572</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DISABLE_CODE_ANALYSIS_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga62008d0276e83e6fc683d9084c6e9af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_DISABLE_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga0367e17e69206f2f4718f421c4f4f5bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_ENABLE_WARNINGS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>ga7328d95e2ec9777bbbd7e81c7b4ffa68</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MUU_HAS_STATIC_STRING_LITERALS</name>
      <anchorfile>group__preprocessor.html</anchorfile>
      <anchor>gad1a4aea6de6cd311e2d75437f7980756</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>strings</name>
    <title>Strings</title>
    <filename>group__strings.html</filename>
    <subgroup>code_units</subgroup>
    <subgroup>transcode</subgroup>
    <subgroup>trim</subgroup>
    <subgroup>trim_left</subgroup>
    <subgroup>trim_right</subgroup>
    <class kind="class">muu::static_string</class>
    <class kind="class">muu::string_param</class>
    <member kind="function">
      <type>void</type>
      <name>set_thread_name</name>
      <anchorfile>group__strings.html</anchorfile>
      <anchor>ga208801d95047a6cff7dd75291d55601b</anchor>
      <arglist>(string_param name) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>abs</name>
    <title>abs()</title>
    <filename>group__abs.html</filename>
    <member kind="function">
      <type>constexpr half</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga5e3a3b5d552cc29822e1a17fdd1cc3bd</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga89d1dcc8041ac8452317eae1d21493b2</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga8721fd9fd4f1431a5f9dd1a22cdf3d3e</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>gaeeeae9c211e65058c12d8c29e67c9157</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga6627ff562c64be1de075e0039502adf5</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga381bc8195a18ac0c461fb994bfdab418</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga97fef737f56413a711ba50907cea741d</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr signed char</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>gaef9c6f1c1301cdb38630e96475188561</anchor>
      <arglist>(signed char x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr short</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga5bc7d2857695d07a4f93f0d9b79603bd</anchor>
      <arglist>(short x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga6d0020d25e08aef7b2f3a927fd75e128</anchor>
      <arglist>(int x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga86ac6e3fe0a4a6168c32a44aa9b3def6</anchor>
      <arglist>(long x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long long</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>gaabdbc172d4985254b63025116f687c7e</anchor>
      <arglist>(long long x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>gafbffb9903578ee8c8b87337ec83d5c1f</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga3d9f7436810436103ec0af7e77597b04</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga5e3a3b5d552cc29822e1a17fdd1cc3bd</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>abs</name>
      <anchorfile>group__abs.html</anchorfile>
      <anchor>ga3d9f7436810436103ec0af7e77597b04</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>acos</name>
    <title>acos()</title>
    <filename>group__acos.html</filename>
    <member kind="function">
      <type>constexpr half</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga8bb8129170a7cc7e9902de607e1c8279</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga69b28eed21b5f99faf7076f3349455dc</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga2abfdb52a5d3b98ab3119da1155eb960</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga9803e5bf3be9b110ddd704dafc891b2d</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>gaeb05383011594d02f233899de601bfda</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga06579a5e3c5e853163f611c25b2b7b79</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga189bbc017d8f1f7c9885f68b7fb36bb0</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga7b9d06979da170a3200f6b675f0a682e</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>acos</name>
      <anchorfile>group__acos.html</anchorfile>
      <anchor>ga8bb8129170a7cc7e9902de607e1c8279</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>approx_equal</name>
    <title>approx_equal()</title>
    <filename>group__approx__equal.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga0535df1acd603649ac9f793d96062112</anchor>
      <arglist>(const bounding_box&lt; S &gt; &amp;q1, const bounding_box&lt; T &gt; &amp;q2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga87bf7f92a62590f695617cea9bb941fe</anchor>
      <arglist>(half a, half b, half epsilon=constants&lt; half &gt;::default_epsilon) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga9feb4d4d3c2c67ad383254a73fdeff52</anchor>
      <arglist>(const line_segment&lt; S &gt; &amp;seg1, const line_segment&lt; T &gt; &amp;seg2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gaec4759ac5b40da6afc50eb0b3585f0fe</anchor>
      <arglist>(float a, float b, float epsilon=default_epsilon&lt; float &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gab93e074083f9da2915b8a5236f1cf7cf</anchor>
      <arglist>(double a, double b, double epsilon=default_epsilon&lt; double &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga943da06224480e3230fc1420a245f98c</anchor>
      <arglist>(long double a, long double b, long double epsilon=default_epsilon&lt; long double &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga9b1e5da7e9ef7782a93da63b886ae258</anchor>
      <arglist>(float128_t a, float128_t b, float128_t epsilon=default_epsilon&lt; float128_t &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gaac1ff3710f8b52479141460b908e0019</anchor>
      <arglist>(_Float16 a, _Float16 b, _Float16 epsilon=default_epsilon&lt; _Float16 &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gafeb998d47625b367c261d8bc59c7a282</anchor>
      <arglist>(__fp16 a, __fp16 b, __fp16 epsilon=default_epsilon&lt; __fp16 &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga6a04d11e27ed0da907193cdd51b5015e</anchor>
      <arglist>(T a, U b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gac9148a5c5b63c63d14ca506aee43484e</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m1, const matrix&lt; T, R, C &gt; &amp;m2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga44033f904b7ed733949dab5e6acccd16</anchor>
      <arglist>(const oriented_bounding_box&lt; S &gt; &amp;q1, const oriented_bounding_box&lt; T &gt; &amp;q2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gae2d90458dab99f2b1ff2283177ba5835</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p1, const plane&lt; T &gt; &amp;p2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga6b8d6921c4f39c5881a7ea6f95f33392</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q1, const quaternion&lt; T &gt; &amp;q2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga2881bac8c2bf5248013bbc7d94867005</anchor>
      <arglist>(const triangle&lt; S &gt; &amp;tri1, const triangle&lt; T &gt; &amp;tri2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga5d86e15710b89e3c79399cd98f597efe</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v1, const vector&lt; T, D &gt; &amp;v2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga0535df1acd603649ac9f793d96062112</anchor>
      <arglist>(const bounding_box&lt; S &gt; &amp;q1, const bounding_box&lt; T &gt; &amp;q2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga87bf7f92a62590f695617cea9bb941fe</anchor>
      <arglist>(half a, half b, half epsilon=constants&lt; half &gt;::default_epsilon) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga9feb4d4d3c2c67ad383254a73fdeff52</anchor>
      <arglist>(const line_segment&lt; S &gt; &amp;seg1, const line_segment&lt; T &gt; &amp;seg2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gac9148a5c5b63c63d14ca506aee43484e</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m1, const matrix&lt; T, R, C &gt; &amp;m2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga44033f904b7ed733949dab5e6acccd16</anchor>
      <arglist>(const oriented_bounding_box&lt; S &gt; &amp;q1, const oriented_bounding_box&lt; T &gt; &amp;q2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>gae2d90458dab99f2b1ff2283177ba5835</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p1, const plane&lt; T &gt; &amp;p2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga6b8d6921c4f39c5881a7ea6f95f33392</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q1, const quaternion&lt; T &gt; &amp;q2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga2881bac8c2bf5248013bbc7d94867005</anchor>
      <arglist>(const triangle&lt; S &gt; &amp;tri1, const triangle&lt; T &gt; &amp;tri2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_equal</name>
      <anchorfile>group__approx__equal.html</anchorfile>
      <anchor>ga5d86e15710b89e3c79399cd98f597efe</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v1, const vector&lt; T, D &gt; &amp;v2, epsilon_type&lt; S, T &gt; epsilon=default_epsilon&lt; S, T &gt;) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>approx_zero</name>
    <title>approx_zero()</title>
    <filename>group__approx__zero.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga75782bf3bacf4ef690b1811d84c9f7ea</anchor>
      <arglist>(const bounding_box&lt; S &gt; &amp;q, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga5df3be4319d056f5a12b082177b1f8dd</anchor>
      <arglist>(half x, half epsilon=constants&lt; half &gt;::default_epsilon) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gac5e6b9f30f0e565a9893ba7c7fea821b</anchor>
      <arglist>(const line_segment&lt; S &gt; &amp;seg, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga3156cd82de6c0da5a9054c544ee99725</anchor>
      <arglist>(float x, float epsilon=default_epsilon&lt; float &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gaa419296539b7bda59ef0f8bf62ac330c</anchor>
      <arglist>(double x, double epsilon=default_epsilon&lt; double &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gafe3ff928bf4edd7f2b341ee9f8480789</anchor>
      <arglist>(long double x, long double epsilon=default_epsilon&lt; long double &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga2e4ec0adf720b9c8fcd10344c1bf81eb</anchor>
      <arglist>(float128_t x, float128_t epsilon=default_epsilon&lt; float128_t &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga6f7edf9230c38096dead05a99bf5be4b</anchor>
      <arglist>(_Float16 x, _Float16 epsilon=default_epsilon&lt; _Float16 &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga7376c26dbf846ee7e5eebbe68e431042</anchor>
      <arglist>(__fp16 x, __fp16 epsilon=default_epsilon&lt; __fp16 &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gabd16d3c6f14a660d037f92e612bb4dc9</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gae6774c12326004b4e421e554a35afe8b</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga4c274a76495695493647b4e0b7af1299</anchor>
      <arglist>(const oriented_bounding_box&lt; S &gt; &amp;q, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gaffffd5920be4c9358ad1e0e0e57a7e15</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga04dec66856dc79915e9130ef3693e9f2</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga634f1c2a41e507ca065b3783a0401c3c</anchor>
      <arglist>(const triangle&lt; S &gt; &amp;tri, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gaa7e15ecff78c10af4eaa5b463eee9ca6</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga75782bf3bacf4ef690b1811d84c9f7ea</anchor>
      <arglist>(const bounding_box&lt; S &gt; &amp;q, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga5df3be4319d056f5a12b082177b1f8dd</anchor>
      <arglist>(half x, half epsilon=constants&lt; half &gt;::default_epsilon) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gac5e6b9f30f0e565a9893ba7c7fea821b</anchor>
      <arglist>(const line_segment&lt; S &gt; &amp;seg, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gae6774c12326004b4e421e554a35afe8b</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga4c274a76495695493647b4e0b7af1299</anchor>
      <arglist>(const oriented_bounding_box&lt; S &gt; &amp;q, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gaffffd5920be4c9358ad1e0e0e57a7e15</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga04dec66856dc79915e9130ef3693e9f2</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>ga634f1c2a41e507ca065b3783a0401c3c</anchor>
      <arglist>(const triangle&lt; S &gt; &amp;tri, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>approx_zero</name>
      <anchorfile>group__approx__zero.html</anchorfile>
      <anchor>gaa7e15ecff78c10af4eaa5b463eee9ca6</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v, S epsilon=default_epsilon&lt; S &gt;) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>asin</name>
    <title>asin()</title>
    <filename>group__asin.html</filename>
    <member kind="function">
      <type>constexpr half</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>gab24a151709d5cbfc7c049d279307ec54</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga14329b7d2af039a939b5b03a643dbd0f</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga1754f8044c13e5db0546b85a7d9db66e</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga380b08f5141db6f53cee3c2ab2eb4231</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga971a48168d347e790c546b65fcd0689a</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga22633d8890da645ac8e10a13a785c3e4</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga38d3272314ef4433f29ac56ea51762a8</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>ga05267e8f5abd22ac560bd3564bb7607f</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>asin</name>
      <anchorfile>group__asin.html</anchorfile>
      <anchor>gab24a151709d5cbfc7c049d279307ec54</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>atan</name>
    <title>atan()</title>
    <filename>group__atan.html</filename>
    <member kind="function">
      <type>constexpr half</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>gac59b7164798fbb5ae72b13010ac7f960</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>gad38e7dc443023ed27f26058455c30b30</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>ga6aaf46f37bb83640e45b37e0aea858b8</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>ga0d93faf1621f38f7e0ed7cfaf37076f4</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>ga0ecacb3f5d6607739ebcb5b6cc612a64</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>ga28990b3c84d9b9a7fde19401b936339a</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>ga8e1d8ec2569793e50d9a21d02b61b5ba</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>gaf0779f07b81c81d2ec64131dcc54bcfd</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>atan</name>
      <anchorfile>group__atan.html</anchorfile>
      <anchor>gac59b7164798fbb5ae72b13010ac7f960</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>atan2</name>
    <title>atan2()</title>
    <filename>group__atan2.html</filename>
    <member kind="function">
      <type>constexpr half</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga7b0d41cadc47ad6e8255fa170f640be1</anchor>
      <arglist>(half y, half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga68e17f23ef350ccc6e6bd8c20611da12</anchor>
      <arglist>(float y, float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga5a5edbb63697e0d3895ecee9d3639123</anchor>
      <arglist>(double y, double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga1766c7359209816b8bd4317b9c587f79</anchor>
      <arglist>(long double y, long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga25d67472f15352ffe17f9bd14446ce56</anchor>
      <arglist>(float128_t y, float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>gabab1e3ea2e16d7346043f57b57a18d49</anchor>
      <arglist>(_Float16 y, _Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga19204446bd2c384f0bf47d779035c414</anchor>
      <arglist>(__fp16 y, __fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>gabcd89688add70b87668b772617a3cc11</anchor>
      <arglist>(Y y, X x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>atan2</name>
      <anchorfile>group__atan2.html</anchorfile>
      <anchor>ga7b0d41cadc47ad6e8255fa170f640be1</anchor>
      <arglist>(half y, half x) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ceil</name>
    <title>ceil()</title>
    <filename>group__ceil.html</filename>
    <member kind="function">
      <type>constexpr half</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gadb3f9b52071aea9fe1cf894a7fb9c039</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>ga15a26c9fb021ca5f9ac27fb0f4636060</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gabc53ad88d9c76a9b0ed2b42c81d2ea9d</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>ga1c484df90484d3f74112cfbe0208c602</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>ga121a468fa346aedba09c1dfd59430269</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gace09eecb7e26047a4d4be5f822022134</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gadf94b04b23c51e89aaf98d5d9eeef9b8</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gaa15d5ffe910a00ffbeb36c5fc16e2a97</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gae07fcd5b9220de0b39fa3461c3c529de</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gadb3f9b52071aea9fe1cf894a7fb9c039</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>ceil</name>
      <anchorfile>group__ceil.html</anchorfile>
      <anchor>gae07fcd5b9220de0b39fa3461c3c529de</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>consteval_sqrt</name>
    <title>consteval_sqrt()</title>
    <filename>group__consteval__sqrt.html</filename>
    <member kind="function">
      <type>constexpr half</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga435fcf395534dfec9465ed87a52fc88d</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga4133ea944ff868e69eabab5d872f6da4</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga5b1bf68a67a05d300f8e9c7fd5d1c026</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga603ad552348bcbdb218217d23675d3ce</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>gabd0f8319f64fbe7ca4c1e6739f44d962</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga26b70752b25e3620d807aa8b4f533c38</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga04769433189ec11e79f9abb3da5b8856</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>gafb8dd23cf2d5d5628aa5f09cd7af2035</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>consteval_sqrt</name>
      <anchorfile>group__consteval__sqrt.html</anchorfile>
      <anchor>ga435fcf395534dfec9465ed87a52fc88d</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>cos</name>
    <title>cos()</title>
    <filename>group__cos.html</filename>
    <member kind="function">
      <type>constexpr half</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>ga3f48d168cf2a5cc17d95fd4860ce8267</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>gafc968973dde0c97322c9c6669f954e2d</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>ga0648930ad64bdc3816542f336b88e92d</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>ga56a1b3ab18e271f42aa180990868261b</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>gae466125efc53b0afbe2f48c3a3c7fa95</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>ga6eab0abb46d5296fc69b951458aae6c9</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>ga79827b43adcd7eef2612c45b91eda40c</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>gaad6641ec7b924bb662a329f42f1f1423</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>cos</name>
      <anchorfile>group__cos.html</anchorfile>
      <anchor>ga3f48d168cf2a5cc17d95fd4860ce8267</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>floor</name>
    <title>floor()</title>
    <filename>group__floor.html</filename>
    <member kind="function">
      <type>constexpr half</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>ga33492d2d742e23fb32d6feddeb0a12a5</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>ga789b6da21314c806db7da27d11e112c6</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>ga67232bb43da7a03d03e2b2f40356a76b</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>gaf0492a080471ae79fe3e4e31832c514f</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>ga26d3f4cb15a587f4d825cbdca7f031ae</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>gac9a12e90b0fa7067a096e068e764cabf</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>gae46f187d01b8118d5f2a778c59674c88</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>ga630c2ae425d1019e5a06101111c299f1</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>gaa9989749869046cff6731ead1b56f0df</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>ga33492d2d742e23fb32d6feddeb0a12a5</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>floor</name>
      <anchorfile>group__floor.html</anchorfile>
      <anchor>gaa9989749869046cff6731ead1b56f0df</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>infinity_or_nan</name>
    <title>infinity_or_nan()</title>
    <filename>group__infinity__or__nan.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga4bac8a8324b2e1ef33cec0f7a8f718ce</anchor>
      <arglist>(const bounding_box&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gafea7a631de7f6399fb55e1dffbe79c00</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gafe018cc9e24195a2edf98017340c2263</anchor>
      <arglist>(const line_segment&lt; S &gt; &amp;seg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga244d41fcb34e53c950eddd916a6d5396</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga251c6b64050eadcb5c29cd852e89381f</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gaaefff82330e72babbf53ba1d2fc970d5</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga7fd6b8649626ba472b2b465f42de1d7b</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga5a34372404d7751b9b764754b94d3b30</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga01537de80625dd04856c091786a51c21</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gae0e73f57dfe538bfb813978525d029b4</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga7165ec00307546834b2cfec5dcd18920</anchor>
      <arglist>(const T &amp;obj) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gac83f0d0b00f182e5cfa6ae4dfa9ad12c</anchor>
      <arglist>(const T(&amp;vals)[N]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga0f071cb7be895ff5f3176182306cb1a9</anchor>
      <arglist>(const T &amp;val1, const U &amp;val2, const V &amp;... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga1f57b7af70f0235ad644486a5943e582</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gade7f3e7d056853c9e542ec453394a9c4</anchor>
      <arglist>(const oriented_bounding_box&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gaa55cd1d8c3534c8ffc01aea226c26997</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gaffcaea7f39fc17894285d8221923387e</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga73ae74e7ab9484fb2ee90a67e91c1b08</anchor>
      <arglist>(const triangle&lt; S &gt; &amp;tri) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga302affada638f7a69a77c925b1f38d93</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga4bac8a8324b2e1ef33cec0f7a8f718ce</anchor>
      <arglist>(const bounding_box&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gafea7a631de7f6399fb55e1dffbe79c00</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gafe018cc9e24195a2edf98017340c2263</anchor>
      <arglist>(const line_segment&lt; S &gt; &amp;seg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga1f57b7af70f0235ad644486a5943e582</anchor>
      <arglist>(const matrix&lt; S, R, C &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gade7f3e7d056853c9e542ec453394a9c4</anchor>
      <arglist>(const oriented_bounding_box&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gaa55cd1d8c3534c8ffc01aea226c26997</anchor>
      <arglist>(const plane&lt; S &gt; &amp;p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>gaffcaea7f39fc17894285d8221923387e</anchor>
      <arglist>(const quaternion&lt; S &gt; &amp;q) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga73ae74e7ab9484fb2ee90a67e91c1b08</anchor>
      <arglist>(const triangle&lt; S &gt; &amp;tri) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>infinity_or_nan</name>
      <anchorfile>group__infinity__or__nan.html</anchorfile>
      <anchor>ga302affada638f7a69a77c925b1f38d93</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_ascii_code_point</name>
    <title>is_ascii_code_point()</title>
    <filename>group__is__ascii__code__point.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_code_point</name>
      <anchorfile>group__is__ascii__code__point.html</anchorfile>
      <anchor>ga64ca1bf1e37a02c284beaea8ff785e52</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_code_point</name>
      <anchorfile>group__is__ascii__code__point.html</anchorfile>
      <anchor>gae507888b5091f49902fabb62297cf035</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_code_point</name>
      <anchorfile>group__is__ascii__code__point.html</anchorfile>
      <anchor>ga56ab5e221276a06196b43dde3654c2c9</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_code_point</name>
      <anchorfile>group__is__ascii__code__point.html</anchorfile>
      <anchor>gab4b2234e78128f098c8d1baed932d48b</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_code_point</name>
      <anchorfile>group__is__ascii__code__point.html</anchorfile>
      <anchor>gab731048e833eb6dbd24c5f757eafeb5f</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_code_point</name>
      <anchorfile>group__is__ascii__code__point.html</anchorfile>
      <anchor>gae8b259597df29cc7d8a82ad855a689c0</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_ascii_hyphen</name>
    <title>is_ascii_hyphen()</title>
    <filename>group__is__ascii__hyphen.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_hyphen</name>
      <anchorfile>group__is__ascii__hyphen.html</anchorfile>
      <anchor>gabc77bc47b8c0aa7271dbae0d6157d00d</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_hyphen</name>
      <anchorfile>group__is__ascii__hyphen.html</anchorfile>
      <anchor>ga16c9e47459d3ad6d187622c06866f33d</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_hyphen</name>
      <anchorfile>group__is__ascii__hyphen.html</anchorfile>
      <anchor>gaae2b494570b94439449c5630e2eb542f</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_hyphen</name>
      <anchorfile>group__is__ascii__hyphen.html</anchorfile>
      <anchor>ga6f0eb841ff1170cfe711a1f520f0c270</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_hyphen</name>
      <anchorfile>group__is__ascii__hyphen.html</anchorfile>
      <anchor>gac854ba72bce68974d5a672456eb0896f</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_hyphen</name>
      <anchorfile>group__is__ascii__hyphen.html</anchorfile>
      <anchor>gaa33c1fe5b6fbca8063b42b25e1655bec</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_ascii_letter</name>
    <title>is_ascii_letter()</title>
    <filename>group__is__ascii__letter.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_letter</name>
      <anchorfile>group__is__ascii__letter.html</anchorfile>
      <anchor>ga76689b41c6518c56f53cf21f3a3afc37</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_letter</name>
      <anchorfile>group__is__ascii__letter.html</anchorfile>
      <anchor>gaaa51884019a1be6887087df31bf325b7</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_letter</name>
      <anchorfile>group__is__ascii__letter.html</anchorfile>
      <anchor>ga8c4a12b0beaa751c007b4277b91fb0a1</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_letter</name>
      <anchorfile>group__is__ascii__letter.html</anchorfile>
      <anchor>ga8d01d9eccd21d22604f6028f6e76c483</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_letter</name>
      <anchorfile>group__is__ascii__letter.html</anchorfile>
      <anchor>ga80bfb2a0a1379b7c6d8265b588df6c61</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_letter</name>
      <anchorfile>group__is__ascii__letter.html</anchorfile>
      <anchor>gaf7fe2351f7882f54d8f250412e6b8389</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_ascii_lowercase</name>
    <title>is_ascii_lowercase()</title>
    <filename>group__is__ascii__lowercase.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_lowercase</name>
      <anchorfile>group__is__ascii__lowercase.html</anchorfile>
      <anchor>gafd4fb2ba260a541fd126de6ccf94c3e8</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_lowercase</name>
      <anchorfile>group__is__ascii__lowercase.html</anchorfile>
      <anchor>ga8dde7f0f9c6c0c73bd9d223461cd0d0c</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_lowercase</name>
      <anchorfile>group__is__ascii__lowercase.html</anchorfile>
      <anchor>gac4f44ea52a31cba8ec72f0d3d0b18139</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_lowercase</name>
      <anchorfile>group__is__ascii__lowercase.html</anchorfile>
      <anchor>gabe2187bed217e6371faad4378a81406d</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_lowercase</name>
      <anchorfile>group__is__ascii__lowercase.html</anchorfile>
      <anchor>gad2d975cdf2fa3506bcbb9108b9c05c8f</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_lowercase</name>
      <anchorfile>group__is__ascii__lowercase.html</anchorfile>
      <anchor>gacd9fa534cc97577c15b7e829d2e2d845</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_ascii_number</name>
    <title>is_ascii_number()</title>
    <filename>group__is__ascii__number.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_number</name>
      <anchorfile>group__is__ascii__number.html</anchorfile>
      <anchor>gac63fc46d0d9899f8456e5c678e8d2473</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_number</name>
      <anchorfile>group__is__ascii__number.html</anchorfile>
      <anchor>gad2f5745eb580521a6879041e41782dce</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_number</name>
      <anchorfile>group__is__ascii__number.html</anchorfile>
      <anchor>gafa23a97548b6cc50426931ecdc4406ef</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_number</name>
      <anchorfile>group__is__ascii__number.html</anchorfile>
      <anchor>gae9ecb7d04cfe21314a70e1675aa77fa7</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_number</name>
      <anchorfile>group__is__ascii__number.html</anchorfile>
      <anchor>ga1ed74170290d5f96839818f18cf5f2d4</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_number</name>
      <anchorfile>group__is__ascii__number.html</anchorfile>
      <anchor>gac5d9c01ac4e06e01379f8d6104f6a4ed</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_ascii_uppercase</name>
    <title>is_ascii_uppercase()</title>
    <filename>group__is__ascii__uppercase.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_uppercase</name>
      <anchorfile>group__is__ascii__uppercase.html</anchorfile>
      <anchor>gade071c796662fa9f3367827702a4a2eb</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_uppercase</name>
      <anchorfile>group__is__ascii__uppercase.html</anchorfile>
      <anchor>gaa8691618bb990503cca6e81ddd90456e</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_uppercase</name>
      <anchorfile>group__is__ascii__uppercase.html</anchorfile>
      <anchor>ga63392d2f68599f30f486fca24a51dec4</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_uppercase</name>
      <anchorfile>group__is__ascii__uppercase.html</anchorfile>
      <anchor>ga212b3a96079a45553b259b3576f5712b</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_uppercase</name>
      <anchorfile>group__is__ascii__uppercase.html</anchorfile>
      <anchor>ga9ffd863190528db135f8c6996e30c98f</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_uppercase</name>
      <anchorfile>group__is__ascii__uppercase.html</anchorfile>
      <anchor>ga6154a929fd7780c258d0ca249171ad40</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_ascii_whitespace</name>
    <title>is_ascii_whitespace()</title>
    <filename>group__is__ascii__whitespace.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_whitespace</name>
      <anchorfile>group__is__ascii__whitespace.html</anchorfile>
      <anchor>gaf1b29bb2cafb2343ed3d111bb4da2778</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_whitespace</name>
      <anchorfile>group__is__ascii__whitespace.html</anchorfile>
      <anchor>ga4f1ceff57c8aed91fa13cd872b68f8fc</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_whitespace</name>
      <anchorfile>group__is__ascii__whitespace.html</anchorfile>
      <anchor>gaefcf15993ac4f08028753206912394ec</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_whitespace</name>
      <anchorfile>group__is__ascii__whitespace.html</anchorfile>
      <anchor>gafe17a863740a3eec1fa34bbaba49b64f</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_whitespace</name>
      <anchorfile>group__is__ascii__whitespace.html</anchorfile>
      <anchor>ga4e3dbcd0783d33668b246c3adbe9b51b</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii_whitespace</name>
      <anchorfile>group__is__ascii__whitespace.html</anchorfile>
      <anchor>ga09ef1c5da9b104b959ac51e9e910653a</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_code_point</name>
    <title>is_code_point()</title>
    <filename>group__is__code__point.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point</name>
      <anchorfile>group__is__code__point.html</anchorfile>
      <anchor>gaa61593ff891b26163868d3dbb14822e6</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point</name>
      <anchorfile>group__is__code__point.html</anchorfile>
      <anchor>gadd58df11964589033e2ac9e48e77c7e1</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point</name>
      <anchorfile>group__is__code__point.html</anchorfile>
      <anchor>ga82909fa27d9495a0b9457e8160b8585b</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point</name>
      <anchorfile>group__is__code__point.html</anchorfile>
      <anchor>gace0fb7eaf06b3e212181f7abaa108d16</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point</name>
      <anchorfile>group__is__code__point.html</anchorfile>
      <anchor>ga357623f58607fb4519a676d3ff20ca85</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point</name>
      <anchorfile>group__is__code__point.html</anchorfile>
      <anchor>gacc72677918e6632e5c481d7b2e820626</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_code_point_boundary</name>
    <title>is_code_point_boundary()</title>
    <filename>group__is__code__point__boundary.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point_boundary</name>
      <anchorfile>group__is__code__point__boundary.html</anchorfile>
      <anchor>ga79c41c8b3a1af5ad6149aec00051005a</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point_boundary</name>
      <anchorfile>group__is__code__point__boundary.html</anchorfile>
      <anchor>ga0add0fe467cafaf15eb1dbc2e59c7bca</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point_boundary</name>
      <anchorfile>group__is__code__point__boundary.html</anchorfile>
      <anchor>ga6eb9cc18abda4165f1c2e30b7cad5ca4</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point_boundary</name>
      <anchorfile>group__is__code__point__boundary.html</anchorfile>
      <anchor>gafae81212824d3162f63d50318bb53a85</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point_boundary</name>
      <anchorfile>group__is__code__point__boundary.html</anchorfile>
      <anchor>ga2c2ba7ecfb650602ffde032484595988</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_code_point_boundary</name>
      <anchorfile>group__is__code__point__boundary.html</anchorfile>
      <anchor>gaeee1a57cd6415ebbed78a3c2255b461f</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_combining_mark</name>
    <title>is_combining_mark()</title>
    <filename>group__is__combining__mark.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_combining_mark</name>
      <anchorfile>group__is__combining__mark.html</anchorfile>
      <anchor>ga301f16f8a9fbf354fc33cf3f95d9b160</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_combining_mark</name>
      <anchorfile>group__is__combining__mark.html</anchorfile>
      <anchor>ga9943e9c30d711657bf3551f15646e276</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_combining_mark</name>
      <anchorfile>group__is__combining__mark.html</anchorfile>
      <anchor>ga512f69627685a22136d237dca2f83eab</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_combining_mark</name>
      <anchorfile>group__is__combining__mark.html</anchorfile>
      <anchor>ga05a17fc217a97cd9c7e453a20be0c5a2</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_combining_mark</name>
      <anchorfile>group__is__combining__mark.html</anchorfile>
      <anchor>ga1f1bf74c6aa429ed6282935ca77a3b93</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_combining_mark</name>
      <anchorfile>group__is__combining__mark.html</anchorfile>
      <anchor>ga45cb7533e0fb2568e97a78bd3666f1fe</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_decimal_digit</name>
    <title>is_decimal_digit()</title>
    <filename>group__is__decimal__digit.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_decimal_digit</name>
      <anchorfile>group__is__decimal__digit.html</anchorfile>
      <anchor>gab690f0ed310af57ede2e2c4e16bcca7f</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_decimal_digit</name>
      <anchorfile>group__is__decimal__digit.html</anchorfile>
      <anchor>ga7f77259b7f536ab687c5a15a7b02be7c</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_decimal_digit</name>
      <anchorfile>group__is__decimal__digit.html</anchorfile>
      <anchor>gaf50d69ac260e6246bdfd050d1ce87736</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_decimal_digit</name>
      <anchorfile>group__is__decimal__digit.html</anchorfile>
      <anchor>ga73d6b65b100e679927b317940f250a39</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_decimal_digit</name>
      <anchorfile>group__is__decimal__digit.html</anchorfile>
      <anchor>ga65e1fc12ac8dc6ef6f51818a101db08f</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_decimal_digit</name>
      <anchorfile>group__is__decimal__digit.html</anchorfile>
      <anchor>gaa74fd64f064d5b662b340fcc76679d11</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_hexadecimal_digit</name>
    <title>is_hexadecimal_digit()</title>
    <filename>group__is__hexadecimal__digit.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hexadecimal_digit</name>
      <anchorfile>group__is__hexadecimal__digit.html</anchorfile>
      <anchor>ga0c1fc84c4a7efae54fb420cdb9e80d8b</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hexadecimal_digit</name>
      <anchorfile>group__is__hexadecimal__digit.html</anchorfile>
      <anchor>ga0745f352f07ac7d21a3411074e48569f</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hexadecimal_digit</name>
      <anchorfile>group__is__hexadecimal__digit.html</anchorfile>
      <anchor>gaf3d4cb15f91b4ed87cead7f8051d6953</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hexadecimal_digit</name>
      <anchorfile>group__is__hexadecimal__digit.html</anchorfile>
      <anchor>gaeae240f3f020aed73b8ce2e4f308d867</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hexadecimal_digit</name>
      <anchorfile>group__is__hexadecimal__digit.html</anchorfile>
      <anchor>ga13074f786e21319165a0247855b2dd87</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hexadecimal_digit</name>
      <anchorfile>group__is__hexadecimal__digit.html</anchorfile>
      <anchor>ga117a786a06ab8801ab862607353d7e1a</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_hyphen</name>
    <title>is_hyphen()</title>
    <filename>group__is__hyphen.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hyphen</name>
      <anchorfile>group__is__hyphen.html</anchorfile>
      <anchor>ga499473afcfe46b1259f789dd49bbbe74</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hyphen</name>
      <anchorfile>group__is__hyphen.html</anchorfile>
      <anchor>ga441c3a005540d21043d33a70cfeda91e</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hyphen</name>
      <anchorfile>group__is__hyphen.html</anchorfile>
      <anchor>gaafb18574dd3ff0f9e67e0007cf449264</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hyphen</name>
      <anchorfile>group__is__hyphen.html</anchorfile>
      <anchor>ga16d013f13f247097938a281bf5fcc095</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hyphen</name>
      <anchorfile>group__is__hyphen.html</anchorfile>
      <anchor>ga3530b55caed578006feb61b49e840849</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_hyphen</name>
      <anchorfile>group__is__hyphen.html</anchorfile>
      <anchor>ga867f9060953226f58134dec87317ad8d</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_letter</name>
    <title>is_letter()</title>
    <filename>group__is__letter.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_letter</name>
      <anchorfile>group__is__letter.html</anchorfile>
      <anchor>ga9514b6bf16508d2474f8f5ec70a8eaab</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_letter</name>
      <anchorfile>group__is__letter.html</anchorfile>
      <anchor>ga0a0cdc660ed29ab425298d93f751b13d</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_letter</name>
      <anchorfile>group__is__letter.html</anchorfile>
      <anchor>gaad41014bebb0bbb56e1203237852eb98</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_letter</name>
      <anchorfile>group__is__letter.html</anchorfile>
      <anchor>ga27712db66a343a62a359c8c36c509746</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_letter</name>
      <anchorfile>group__is__letter.html</anchorfile>
      <anchor>ga6ac024cf357b4357ac04a549452476b8</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_letter</name>
      <anchorfile>group__is__letter.html</anchorfile>
      <anchor>ga3586c395e1c97d138944bec915f2a737</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_lowercase</name>
    <title>is_lowercase()</title>
    <filename>group__is__lowercase.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_lowercase</name>
      <anchorfile>group__is__lowercase.html</anchorfile>
      <anchor>gad13aa9a801971fc570d8a5eb24e70b3f</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_lowercase</name>
      <anchorfile>group__is__lowercase.html</anchorfile>
      <anchor>gacc5931a2f5aac7604bfe22417193cab8</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_lowercase</name>
      <anchorfile>group__is__lowercase.html</anchorfile>
      <anchor>ga8310e44fba244f78b3222d88675c40e9</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_lowercase</name>
      <anchorfile>group__is__lowercase.html</anchorfile>
      <anchor>ga4e0ed0e93d5bb9b41352a74f737d8fc4</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_lowercase</name>
      <anchorfile>group__is__lowercase.html</anchorfile>
      <anchor>ga225baf5a30c7afd0a78785a2d85f035b</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_lowercase</name>
      <anchorfile>group__is__lowercase.html</anchorfile>
      <anchor>ga08cdf66f3c404e6867d59dda4df69256</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_non_ascii_code_point</name>
    <title>is_non_ascii_code_point()</title>
    <filename>group__is__non__ascii__code__point.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_code_point</name>
      <anchorfile>group__is__non__ascii__code__point.html</anchorfile>
      <anchor>gaca89a3375c8d873fc5a4f61726b074e7</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_code_point</name>
      <anchorfile>group__is__non__ascii__code__point.html</anchorfile>
      <anchor>ga073c0cf3b24f0acae80d490d29140be9</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_code_point</name>
      <anchorfile>group__is__non__ascii__code__point.html</anchorfile>
      <anchor>gad110438c4a5a2dfa02c79d16e3f5d606</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_code_point</name>
      <anchorfile>group__is__non__ascii__code__point.html</anchorfile>
      <anchor>gaec44d736c81db3b7232ec863a7e6bfe8</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_code_point</name>
      <anchorfile>group__is__non__ascii__code__point.html</anchorfile>
      <anchor>ga1608f6e1d3299b152a9c1ccd1604d8b4</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_code_point</name>
      <anchorfile>group__is__non__ascii__code__point.html</anchorfile>
      <anchor>gacb38bbe9ae7bd9394c6b69a389f256c2</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_non_ascii_hyphen</name>
    <title>is_non_ascii_hyphen()</title>
    <filename>group__is__non__ascii__hyphen.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_hyphen</name>
      <anchorfile>group__is__non__ascii__hyphen.html</anchorfile>
      <anchor>ga47f0a95f3e1226f5a6be2b9217523440</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_hyphen</name>
      <anchorfile>group__is__non__ascii__hyphen.html</anchorfile>
      <anchor>ga2c1629b3aa8072b3bcc6a23e1138f94c</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_hyphen</name>
      <anchorfile>group__is__non__ascii__hyphen.html</anchorfile>
      <anchor>ga86759836946e9fa5977dafe0beaddf4b</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_hyphen</name>
      <anchorfile>group__is__non__ascii__hyphen.html</anchorfile>
      <anchor>gad572a4ceca075354145d9a41b674da21</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_hyphen</name>
      <anchorfile>group__is__non__ascii__hyphen.html</anchorfile>
      <anchor>gae0bf88fe215bfb338404ff2b01c9417a</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_hyphen</name>
      <anchorfile>group__is__non__ascii__hyphen.html</anchorfile>
      <anchor>ga1c81ee74e76261a178e9f5b1970ad71e</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_non_ascii_letter</name>
    <title>is_non_ascii_letter()</title>
    <filename>group__is__non__ascii__letter.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_letter</name>
      <anchorfile>group__is__non__ascii__letter.html</anchorfile>
      <anchor>ga99573e984f5183b1a2633a1dfed6ff1f</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_letter</name>
      <anchorfile>group__is__non__ascii__letter.html</anchorfile>
      <anchor>ga54365f44fc248898d4c7feed9a416bd3</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_letter</name>
      <anchorfile>group__is__non__ascii__letter.html</anchorfile>
      <anchor>ga25e7166a83dad643d0e47e6c83066241</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_letter</name>
      <anchorfile>group__is__non__ascii__letter.html</anchorfile>
      <anchor>ga6ab614deb2bf1627d470563c3c69016f</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_letter</name>
      <anchorfile>group__is__non__ascii__letter.html</anchorfile>
      <anchor>ga62e2a4636b10d39d4905caf4700e8846</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_letter</name>
      <anchorfile>group__is__non__ascii__letter.html</anchorfile>
      <anchor>ga5452909ac8d5e332fe072059310a5267</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_non_ascii_lowercase</name>
    <title>is_non_ascii_lowercase()</title>
    <filename>group__is__non__ascii__lowercase.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_lowercase</name>
      <anchorfile>group__is__non__ascii__lowercase.html</anchorfile>
      <anchor>gac6878430927ad78f86f74d4c2cc75433</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_lowercase</name>
      <anchorfile>group__is__non__ascii__lowercase.html</anchorfile>
      <anchor>ga1c9227ff55aa96b96d87cfa77d1101b2</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_lowercase</name>
      <anchorfile>group__is__non__ascii__lowercase.html</anchorfile>
      <anchor>ga0c36c5ce9661bdd48c8b80799feb67ef</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_lowercase</name>
      <anchorfile>group__is__non__ascii__lowercase.html</anchorfile>
      <anchor>ga9a0110786c26dbfc224f18114943efbb</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_lowercase</name>
      <anchorfile>group__is__non__ascii__lowercase.html</anchorfile>
      <anchor>gaaae194b317d0881c729c5ccb66c3d1b3</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_lowercase</name>
      <anchorfile>group__is__non__ascii__lowercase.html</anchorfile>
      <anchor>ga6a926ae4ef545f09ae72c7e4a3e2b44b</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_non_ascii_number</name>
    <title>is_non_ascii_number()</title>
    <filename>group__is__non__ascii__number.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_number</name>
      <anchorfile>group__is__non__ascii__number.html</anchorfile>
      <anchor>gaaa75df191ffc636e98570ece15381605</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_number</name>
      <anchorfile>group__is__non__ascii__number.html</anchorfile>
      <anchor>gaeaea844a807cdc2454f4fd9c0c5a8e58</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_number</name>
      <anchorfile>group__is__non__ascii__number.html</anchorfile>
      <anchor>ga0da536ef0d2037dd3b5e060b7c60fbbe</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_number</name>
      <anchorfile>group__is__non__ascii__number.html</anchorfile>
      <anchor>ga8d59af272564fb25c47b13512936bf1d</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_number</name>
      <anchorfile>group__is__non__ascii__number.html</anchorfile>
      <anchor>ga952ed989856755a9f63eedbf7b250c1a</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_number</name>
      <anchorfile>group__is__non__ascii__number.html</anchorfile>
      <anchor>ga87e7c319c1857e1294312d1a296c92a9</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_non_ascii_uppercase</name>
    <title>is_non_ascii_uppercase()</title>
    <filename>group__is__non__ascii__uppercase.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_uppercase</name>
      <anchorfile>group__is__non__ascii__uppercase.html</anchorfile>
      <anchor>gafce6882788557201826cb9bef23015f9</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_uppercase</name>
      <anchorfile>group__is__non__ascii__uppercase.html</anchorfile>
      <anchor>ga27f9644af1801e03a1f6f7b15334bd78</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_uppercase</name>
      <anchorfile>group__is__non__ascii__uppercase.html</anchorfile>
      <anchor>ga7246440d3ef550f6ded6aca3c385c405</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_uppercase</name>
      <anchorfile>group__is__non__ascii__uppercase.html</anchorfile>
      <anchor>ga3ed2ee99b8fb625998b354b621512623</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_uppercase</name>
      <anchorfile>group__is__non__ascii__uppercase.html</anchorfile>
      <anchor>ga33b2b5487d6105e60f0fe3d3cb87cd8b</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_uppercase</name>
      <anchorfile>group__is__non__ascii__uppercase.html</anchorfile>
      <anchor>gabd53c1ea713477ef1bc50d455a632ae1</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_non_ascii_whitespace</name>
    <title>is_non_ascii_whitespace()</title>
    <filename>group__is__non__ascii__whitespace.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_whitespace</name>
      <anchorfile>group__is__non__ascii__whitespace.html</anchorfile>
      <anchor>ga02235449e07d2ef76043194ab6516191</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_whitespace</name>
      <anchorfile>group__is__non__ascii__whitespace.html</anchorfile>
      <anchor>ga0cee28c3a17a13cd7a2866ffae805d98</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_whitespace</name>
      <anchorfile>group__is__non__ascii__whitespace.html</anchorfile>
      <anchor>ga5866007e015ad1e3c20aa19c4fce6316</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_whitespace</name>
      <anchorfile>group__is__non__ascii__whitespace.html</anchorfile>
      <anchor>ga2a0ff02223c049ad9b052ee85fdfa51b</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_whitespace</name>
      <anchorfile>group__is__non__ascii__whitespace.html</anchorfile>
      <anchor>gacd5bc03842504f2e09a60d948c8b932a</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_non_ascii_whitespace</name>
      <anchorfile>group__is__non__ascii__whitespace.html</anchorfile>
      <anchor>ga276020e5289781752e847e2662e64a2c</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_not_code_point</name>
    <title>is_not_code_point()</title>
    <filename>group__is__not__code__point.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_code_point</name>
      <anchorfile>group__is__not__code__point.html</anchorfile>
      <anchor>ga7de0a0c768b74042ae186f09d5bbf6c4</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_code_point</name>
      <anchorfile>group__is__not__code__point.html</anchorfile>
      <anchor>ga97b51ce79ede43445a5e215b6220fea8</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_code_point</name>
      <anchorfile>group__is__not__code__point.html</anchorfile>
      <anchor>gad81eafaf1d670467ba421d3ce0da9bf5</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_code_point</name>
      <anchorfile>group__is__not__code__point.html</anchorfile>
      <anchor>ga0be8e6bd1df2eb51a1d46f63dc2e864f</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_code_point</name>
      <anchorfile>group__is__not__code__point.html</anchorfile>
      <anchor>ga5dd19a6b5e305f104049f29dacc1cd7f</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_code_point</name>
      <anchorfile>group__is__not__code__point.html</anchorfile>
      <anchor>gad351329604173d6c75840044d20d66e7</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_not_hyphen</name>
    <title>is_not_hyphen()</title>
    <filename>group__is__not__hyphen.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_hyphen</name>
      <anchorfile>group__is__not__hyphen.html</anchorfile>
      <anchor>gaa022bebe3a9642ff89db5ed4ddae5df1</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_hyphen</name>
      <anchorfile>group__is__not__hyphen.html</anchorfile>
      <anchor>gae0bc45da341a883a0111b986aa5117e4</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_hyphen</name>
      <anchorfile>group__is__not__hyphen.html</anchorfile>
      <anchor>gaf0ca20748b2c611d456e504d776eb445</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_hyphen</name>
      <anchorfile>group__is__not__hyphen.html</anchorfile>
      <anchor>ga92a574aaa452c3921ce53be49fb86928</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_hyphen</name>
      <anchorfile>group__is__not__hyphen.html</anchorfile>
      <anchor>ga9eef1fcd578ed78fa7e3b3550f1c2c6d</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_hyphen</name>
      <anchorfile>group__is__not__hyphen.html</anchorfile>
      <anchor>gac0fe9ff0e75775fc97dab1b1104871a0</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_not_letter</name>
    <title>is_not_letter()</title>
    <filename>group__is__not__letter.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_letter</name>
      <anchorfile>group__is__not__letter.html</anchorfile>
      <anchor>gac1c9fbc632e0f5ed17cd39ff5d4025bb</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_letter</name>
      <anchorfile>group__is__not__letter.html</anchorfile>
      <anchor>ga98e5176e560113fdc870fa49bd9e74d1</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_letter</name>
      <anchorfile>group__is__not__letter.html</anchorfile>
      <anchor>gac8a56b2039dc72126d0991292a2ee807</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_letter</name>
      <anchorfile>group__is__not__letter.html</anchorfile>
      <anchor>gace845c3ed259b79f4dfd38b6870f4e48</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_letter</name>
      <anchorfile>group__is__not__letter.html</anchorfile>
      <anchor>ga1afe1cf072279c2683bce80d3117bd70</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_letter</name>
      <anchorfile>group__is__not__letter.html</anchorfile>
      <anchor>ga39a63cc0527e39d8a45392ff78700757</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_not_lowercase</name>
    <title>is_not_lowercase()</title>
    <filename>group__is__not__lowercase.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_lowercase</name>
      <anchorfile>group__is__not__lowercase.html</anchorfile>
      <anchor>ga9bde6b4a391ccaec3cd485985f78b309</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_lowercase</name>
      <anchorfile>group__is__not__lowercase.html</anchorfile>
      <anchor>gaeef9da03aa4a43b96c566be96037ec84</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_lowercase</name>
      <anchorfile>group__is__not__lowercase.html</anchorfile>
      <anchor>ga1e74e8ead472320684fc94c12dd08143</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_lowercase</name>
      <anchorfile>group__is__not__lowercase.html</anchorfile>
      <anchor>gadd513c6da8b11b4910d74bc06c136ff3</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_lowercase</name>
      <anchorfile>group__is__not__lowercase.html</anchorfile>
      <anchor>gaf36dd00a2eb619745a97028d634af730</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_lowercase</name>
      <anchorfile>group__is__not__lowercase.html</anchorfile>
      <anchor>gacbc0b63111a697c61f26507bf905ab36</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_not_number</name>
    <title>is_not_number()</title>
    <filename>group__is__not__number.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_number</name>
      <anchorfile>group__is__not__number.html</anchorfile>
      <anchor>ga8cc883432f7b24d7ff45b81c18dbcbe1</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_number</name>
      <anchorfile>group__is__not__number.html</anchorfile>
      <anchor>ga8aa98b7f51cda0231d569d05642975e5</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_number</name>
      <anchorfile>group__is__not__number.html</anchorfile>
      <anchor>ga5633fc678ea2a91ac26e957e4d8b3d5c</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_number</name>
      <anchorfile>group__is__not__number.html</anchorfile>
      <anchor>gab2680040f3026e9bab13fede62d8b952</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_number</name>
      <anchorfile>group__is__not__number.html</anchorfile>
      <anchor>ga638c24599fa30dbf7b48872337653225</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_number</name>
      <anchorfile>group__is__not__number.html</anchorfile>
      <anchor>ga570c4041bc969fc6702d38b21b4cfd32</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_not_uppercase</name>
    <title>is_not_uppercase()</title>
    <filename>group__is__not__uppercase.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_uppercase</name>
      <anchorfile>group__is__not__uppercase.html</anchorfile>
      <anchor>ga0829efc71f9f0539941aaea2f5c25bf8</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_uppercase</name>
      <anchorfile>group__is__not__uppercase.html</anchorfile>
      <anchor>gad29a1fcb865ee3a2080303c9d9bc1612</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_uppercase</name>
      <anchorfile>group__is__not__uppercase.html</anchorfile>
      <anchor>gaca1b184a2e4c8b04dad89b488ebf888e</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_uppercase</name>
      <anchorfile>group__is__not__uppercase.html</anchorfile>
      <anchor>ga2f2b3a717b8b8a4f8aa9096e7a15eaf2</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_uppercase</name>
      <anchorfile>group__is__not__uppercase.html</anchorfile>
      <anchor>gafc3473700c456bdd26d5dc45dfae54f2</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_uppercase</name>
      <anchorfile>group__is__not__uppercase.html</anchorfile>
      <anchor>ga6da98b74522adcde4bf78b14579709f4</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_not_whitespace</name>
    <title>is_not_whitespace()</title>
    <filename>group__is__not__whitespace.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_whitespace</name>
      <anchorfile>group__is__not__whitespace.html</anchorfile>
      <anchor>ga943cb03f7094c7658758c2b5cfb6e298</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_whitespace</name>
      <anchorfile>group__is__not__whitespace.html</anchorfile>
      <anchor>ga4fe0a886b291797ee162dc20fd0b91cf</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_whitespace</name>
      <anchorfile>group__is__not__whitespace.html</anchorfile>
      <anchor>ga0237af087d7d31099e8c78a58d605f9c</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_whitespace</name>
      <anchorfile>group__is__not__whitespace.html</anchorfile>
      <anchor>ga6dc981327a62bbcb998fca79956165e3</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_whitespace</name>
      <anchorfile>group__is__not__whitespace.html</anchorfile>
      <anchor>gaec9953774ae79dfef407e26e18d9e069</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_whitespace</name>
      <anchorfile>group__is__not__whitespace.html</anchorfile>
      <anchor>ga3c80b451132c34fe571f46b28b8bb70d</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_number</name>
    <title>is_number()</title>
    <filename>group__is__number.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_number</name>
      <anchorfile>group__is__number.html</anchorfile>
      <anchor>ga78dcc236127325d26ef15569e003de48</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_number</name>
      <anchorfile>group__is__number.html</anchorfile>
      <anchor>ga650ea3f8ee77a12bd366a4719cd25e5a</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_number</name>
      <anchorfile>group__is__number.html</anchorfile>
      <anchor>ga26ffef5becf680cb2b3f6f015cbb3706</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_number</name>
      <anchorfile>group__is__number.html</anchorfile>
      <anchor>ga7a7fed3e0d5c76d5d0c27ef780b882a0</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_number</name>
      <anchorfile>group__is__number.html</anchorfile>
      <anchor>gae2be3ad296d1b7a5c73e5b4b0a2f9228</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_number</name>
      <anchorfile>group__is__number.html</anchorfile>
      <anchor>gac66e35dfd03d8e92e2a83d1699423d22</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_octal_digit</name>
    <title>is_octal_digit()</title>
    <filename>group__is__octal__digit.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_octal_digit</name>
      <anchorfile>group__is__octal__digit.html</anchorfile>
      <anchor>gaf0bd4f10bb2327981fd129da56e3ba39</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_octal_digit</name>
      <anchorfile>group__is__octal__digit.html</anchorfile>
      <anchor>ga1f9244209d55d92781a22f3fbd692aa2</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_octal_digit</name>
      <anchorfile>group__is__octal__digit.html</anchorfile>
      <anchor>gaad523a1c84c600045e7d43e5234807bb</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_octal_digit</name>
      <anchorfile>group__is__octal__digit.html</anchorfile>
      <anchor>ga310e4044ce4614694d7d4f840c9a6a01</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_octal_digit</name>
      <anchorfile>group__is__octal__digit.html</anchorfile>
      <anchor>ga48a38a4f9ce45492a4f1b3d01041916b</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_octal_digit</name>
      <anchorfile>group__is__octal__digit.html</anchorfile>
      <anchor>gadcaa979e1d2172fcb8075b9e408233be</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_uppercase</name>
    <title>is_uppercase()</title>
    <filename>group__is__uppercase.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_uppercase</name>
      <anchorfile>group__is__uppercase.html</anchorfile>
      <anchor>gac4995e950dd373601e54141e19fd66a0</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_uppercase</name>
      <anchorfile>group__is__uppercase.html</anchorfile>
      <anchor>ga236e67b4590c954c640fcd5336988277</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_uppercase</name>
      <anchorfile>group__is__uppercase.html</anchorfile>
      <anchor>ga4ca500fd1132bbb184f4d440169b57c4</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_uppercase</name>
      <anchorfile>group__is__uppercase.html</anchorfile>
      <anchor>gaebdbb7d02f2803aabff08ad85473c9b5</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_uppercase</name>
      <anchorfile>group__is__uppercase.html</anchorfile>
      <anchor>ga7cd6ac6c6365cb56009b82c3149e7568</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_uppercase</name>
      <anchorfile>group__is__uppercase.html</anchorfile>
      <anchor>gaff5aaff25d6609ba987685a75edddab5</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>is_whitespace</name>
    <title>is_whitespace()</title>
    <filename>group__is__whitespace.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_whitespace</name>
      <anchorfile>group__is__whitespace.html</anchorfile>
      <anchor>ga3f227d85734bfb486c928279d30c03c7</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_whitespace</name>
      <anchorfile>group__is__whitespace.html</anchorfile>
      <anchor>gabaa43eb005e243d98110f92e73e7c8bd</anchor>
      <arglist>(char16_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_whitespace</name>
      <anchorfile>group__is__whitespace.html</anchorfile>
      <anchor>gaf3db7e1842d84227c7feac23c80167cb</anchor>
      <arglist>(char32_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_whitespace</name>
      <anchorfile>group__is__whitespace.html</anchorfile>
      <anchor>ga5ea3da66063d2b055981bb7d5708589e</anchor>
      <arglist>(char8_t c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_whitespace</name>
      <anchorfile>group__is__whitespace.html</anchorfile>
      <anchor>ga79c19114d60de3903e35538068e2d25c</anchor>
      <arglist>(unsigned char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_whitespace</name>
      <anchorfile>group__is__whitespace.html</anchorfile>
      <anchor>gacf6c4c0e50aa41b7b4916fa489d4560c</anchor>
      <arglist>(wchar_t c) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>lerp</name>
    <title>lerp()</title>
    <filename>group__lerp.html</filename>
    <member kind="function">
      <type>constexpr half</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga7d194c0af560d9e78eab17a4e76d17a5</anchor>
      <arglist>(half start, half finish, half alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga86b8aacc099deefdf6284d9bab7f2dad</anchor>
      <arglist>(float start, float finish, float alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga47e41d7626365fcf881152c286833b5a</anchor>
      <arglist>(double start, double finish, double alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga44b514d356d6673cc0595cf0390dd8de</anchor>
      <arglist>(long double start, long double finish, long double alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga614ccb878d52686237995f87013cfae5</anchor>
      <arglist>(float128_t start, float128_t finish, float128_t alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga2ef795b3516004d50fdb7003c388e15d</anchor>
      <arglist>(_Float16 start, _Float16 finish, _Float16 alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga18ab33f3d13ed00aaabb060162e64a07</anchor>
      <arglist>(__fp16 start, __fp16 finish, __fp16 alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga348d51a08675a8a83b04e59b7705c29e</anchor>
      <arglist>(T start, U finish, V alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>gabcb72a5920c41c8b337d9060ff775b77</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;start, const vector&lt; S, D &gt; &amp;finish, delta_scalar_type alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>ga7d194c0af560d9e78eab17a4e76d17a5</anchor>
      <arglist>(half start, half finish, half alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vector&lt; S, D &gt;</type>
      <name>lerp</name>
      <anchorfile>group__lerp.html</anchorfile>
      <anchor>gabcb72a5920c41c8b337d9060ff775b77</anchor>
      <arglist>(const vector&lt; S, D &gt; &amp;start, const vector&lt; S, D &gt; &amp;finish, delta_scalar_type alpha) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>normalize_angle</name>
    <title>normalize_angle()</title>
    <filename>group__normalize__angle.html</filename>
    <member kind="function">
      <type>constexpr half</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gae3196eacbe3561ca0edc39d280f31585</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gafa124ba1db7c179c3fa9f9ad12539c59</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>ga596c2eab90545d145798f271bebc72b5</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gaf5cb38b69c2f8c41f7fd1e9e0084d704</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gaefa5c95a33e9ba84e03e0bfd46768e68</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gaff4c5fbdda0cf56d41e39dcc0320a5d6</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>ga9266da36d4d28c201f1d0896e64ce593</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gaba28a922cc3cfdbce286f477c8b90528</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>normalize_angle</name>
      <anchorfile>group__normalize__angle.html</anchorfile>
      <anchor>gae3196eacbe3561ca0edc39d280f31585</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>normalize_angle_signed</name>
    <title>normalize_angle_signed()</title>
    <filename>group__normalize__angle__signed.html</filename>
    <member kind="function">
      <type>constexpr half</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga7569b01664a740bf2ecc532e22c3b487</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga1b9e36906462a78fe344cd8bf545d479</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga68aec6ced168d6572172e0096b46bb68</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>gad98b33969ab11460f65c71aea940588d</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga1115610c44cc6ac505aac869b401e2f9</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga5fb741c82216a6a033043a3e8759eabb</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>gab9a123e29471417050aeb3281e0d7b9a</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga704dca3f184e06b3f20ee77f063a6536</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>normalize_angle_signed</name>
      <anchorfile>group__normalize__angle__signed.html</anchorfile>
      <anchor>ga7569b01664a740bf2ecc532e22c3b487</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>sin</name>
    <title>sin()</title>
    <filename>group__sin.html</filename>
    <member kind="function">
      <type>constexpr half</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga02cf6ce14db45d5f2148ffbb9e33438e</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga929628806abc68d22dc9224af0578dd2</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>gada49fd50fe8b4101cdd948cdc43ac8c0</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga956da7e0f0a5e6e3b8ffeb84c5327e18</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga976c36817620570e8dc2f9903f6f8d9f</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga8334763ec29d37322967387ad8096695</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga3b1f6ef1c2bbad4f86a34de5f8ee7124</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga3ea18db1b6602dbb58f54ff998953c05</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>sin</name>
      <anchorfile>group__sin.html</anchorfile>
      <anchor>ga02cf6ce14db45d5f2148ffbb9e33438e</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>sqrt</name>
    <title>sqrt()</title>
    <filename>group__sqrt.html</filename>
    <member kind="function">
      <type>constexpr half</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gae9514bab097b1d4944394221097d5449</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gaffcbf014cc8896089708ff930c4aa988</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>ga3a3a9c69cbc81f27d3263cb91ba226ef</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gacbaec835db4344520dfb7a296d05bed6</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gae6fe268bd38f8fd1eb4cf94d16e10002</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gafb9b963d32e3298aa442292557578715</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gabf84b6eab050b7d991fe2cbd38a307db</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>ga0049c8d9a89e3cb79523681de737e744</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>sqrt</name>
      <anchorfile>group__sqrt.html</anchorfile>
      <anchor>gae9514bab097b1d4944394221097d5449</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>tan</name>
    <title>tan()</title>
    <filename>group__tan.html</filename>
    <member kind="function">
      <type>constexpr half</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>ga2b2e08e3f3a3e7db4751921441317963</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>ga7aa14fc0444bf0176a1e46e66e3ad747</anchor>
      <arglist>(float x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>gad882d4b32f9b5fc1d2030b174aa6ef5f</anchor>
      <arglist>(double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr long double</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>gaae78f62d62005d88dc86b9b6cc59f50c</anchor>
      <arglist>(long double x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float128_t</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>gac1e4f5cd1d0b9edebc1ff8ec5046ebcd</anchor>
      <arglist>(float128_t x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr _Float16</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>gaee469cec74af5f1d1e84544a7b26e69d</anchor>
      <arglist>(_Float16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __fp16</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>ga3583e5518d781304a7be684fc009bdbd</anchor>
      <arglist>(__fp16 x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>ga1a8ef0810e060c707c554fa995a989fc</anchor>
      <arglist>(T x) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr half</type>
      <name>tan</name>
      <anchorfile>group__tan.html</anchorfile>
      <anchor>ga2b2e08e3f3a3e7db4751921441317963</anchor>
      <arglist>(half x) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>transcode</name>
    <title>transcode()</title>
    <filename>group__transcode.html</filename>
    <member kind="function">
      <type>std::basic_string&lt; Char &gt;</type>
      <name>transcode</name>
      <anchorfile>group__transcode.html</anchorfile>
      <anchor>ga410a285aafea5eff602d2b95626b7b3d</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; Char &gt;</type>
      <name>transcode</name>
      <anchorfile>group__transcode.html</anchorfile>
      <anchor>ga4b033339ba2cec62aba96a5ec7f3261c</anchor>
      <arglist>(std::wstring_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; Char &gt;</type>
      <name>transcode</name>
      <anchorfile>group__transcode.html</anchorfile>
      <anchor>gaf51112f9bc5c2f25bcdfe34f6b902e7e</anchor>
      <arglist>(std::u16string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; Char &gt;</type>
      <name>transcode</name>
      <anchorfile>group__transcode.html</anchorfile>
      <anchor>ga08c5dabffb22594f3b2589551b5875e4</anchor>
      <arglist>(std::u32string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::basic_string&lt; Char &gt;</type>
      <name>transcode</name>
      <anchorfile>group__transcode.html</anchorfile>
      <anchor>ga6de085cbec631f5bb8c79c432749185a</anchor>
      <arglist>(std::u8string_view str) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>trim</name>
    <title>trim()</title>
    <filename>group__trim.html</filename>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>trim</name>
      <anchorfile>group__trim.html</anchorfile>
      <anchor>ga591693ed2095787d40f63ae8c0c60b74</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::wstring_view</type>
      <name>trim</name>
      <anchorfile>group__trim.html</anchorfile>
      <anchor>ga71cd0aeed9fed904bbdd3789c81684a3</anchor>
      <arglist>(std::wstring_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u16string_view</type>
      <name>trim</name>
      <anchorfile>group__trim.html</anchorfile>
      <anchor>gac721a6b23447d8c2950803acf99a8f34</anchor>
      <arglist>(std::u16string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u32string_view</type>
      <name>trim</name>
      <anchorfile>group__trim.html</anchorfile>
      <anchor>ga74cfd907d595f68a757aa50640f9d210</anchor>
      <arglist>(std::u32string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u8string_view</type>
      <name>trim</name>
      <anchorfile>group__trim.html</anchorfile>
      <anchor>gabc24677b997440512aefe4e685b0d2a7</anchor>
      <arglist>(std::u8string_view str) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>trim_left</name>
    <title>trim_left()</title>
    <filename>group__trim__left.html</filename>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>trim_left</name>
      <anchorfile>group__trim__left.html</anchorfile>
      <anchor>ga3aea46929051176b4afb4e23b551ffc5</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::wstring_view</type>
      <name>trim_left</name>
      <anchorfile>group__trim__left.html</anchorfile>
      <anchor>gac23a274a25ef0a4e5b97c0d46b2ccd39</anchor>
      <arglist>(std::wstring_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u16string_view</type>
      <name>trim_left</name>
      <anchorfile>group__trim__left.html</anchorfile>
      <anchor>ga3c0e502baa6f3067e1d26bf5572938f8</anchor>
      <arglist>(std::u16string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u32string_view</type>
      <name>trim_left</name>
      <anchorfile>group__trim__left.html</anchorfile>
      <anchor>gae32d321796864fd5adeaaec227134e53</anchor>
      <arglist>(std::u32string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u8string_view</type>
      <name>trim_left</name>
      <anchorfile>group__trim__left.html</anchorfile>
      <anchor>gad2bab2c91264a3b5241a8d182c922ebd</anchor>
      <arglist>(std::u8string_view str) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>trim_right</name>
    <title>trim_right()</title>
    <filename>group__trim__right.html</filename>
    <member kind="function">
      <type>constexpr std::string_view</type>
      <name>trim_right</name>
      <anchorfile>group__trim__right.html</anchorfile>
      <anchor>ga3f499b7f36518026e86dd95624740111</anchor>
      <arglist>(std::string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::wstring_view</type>
      <name>trim_right</name>
      <anchorfile>group__trim__right.html</anchorfile>
      <anchor>ga24e088ccb48af0182c8cc2e433a7cae8</anchor>
      <arglist>(std::wstring_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u16string_view</type>
      <name>trim_right</name>
      <anchorfile>group__trim__right.html</anchorfile>
      <anchor>ga18068afb63f4c781d92f7895872a180c</anchor>
      <arglist>(std::u16string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u32string_view</type>
      <name>trim_right</name>
      <anchorfile>group__trim__right.html</anchorfile>
      <anchor>ga5c65eceb22233e5c09096e48cadeb195</anchor>
      <arglist>(std::u32string_view str) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::u8string_view</type>
      <name>trim_right</name>
      <anchorfile>group__trim__right.html</anchorfile>
      <anchor>gacd9946ff120c34af5e6634c247a50ba5</anchor>
      <arglist>(std::u8string_view str) noexcept</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>muu</title>
    <filename>index.html</filename>
    <docanchor file="index.html">main</docanchor>
  </compound>
</tagfile>
