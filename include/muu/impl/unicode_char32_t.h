// This file is a part of muu and is subject to the the terms of the MIT license.
// Copyright (c) Mark Gillard <mark.gillard@outlook.com.au>
// See https://github.com/marzer/muu/blob/master/LICENSE for the full license text.
// SPDX-License-Identifier: MIT
//-----
// this file was generated by a script - do not modify it directly
//-----
// clang-format off
#ifndef MUU_UNICODE_CHAR32_T_H
#define MUU_UNICODE_CHAR32_T_H

#include "../fwd.h"
#include "header_start.h"
MUU_DISABLE_SWITCH_WARNINGS;
#if !MUU_GCC || MUU_GCC >= 9
	MUU_FORCE_NDEBUG_OPTIMIZATIONS;
#else
	MUU_PRAGMA_GCC(optimize("O1"))
#endif

namespace muu
{
	/// \addtogroup strings
	/// @{

	/// \addtogroup code_units
	/// @{

	/// \addtogroup	is_ascii_code_point	is_ascii_code_point()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a valid code point from the ASCII range.
	MUU_CONST_GETTER
	constexpr bool is_ascii_code_point(char32_t c) noexcept
	{
		return c <= U'\x7F';
	}

	/// @}

	/// \addtogroup	is_ascii_hyphen	is_ascii_hyphen()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a hyphen code point from the ASCII range.
	MUU_CONST_GETTER
	constexpr bool is_ascii_hyphen(char32_t c) noexcept
	{
		return c == U'-';
	}

	/// @}

	/// \addtogroup	is_ascii_letter	is_ascii_letter()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a letter code point from the ASCII range.
	MUU_CONST_GETTER
	constexpr bool is_ascii_letter(char32_t c) noexcept
	{
		return (U'A' <= c && c <= U'Z') || (U'a' <= c && c <= U'z');
	}

	/// @}

	/// \addtogroup	is_ascii_lowercase	is_ascii_lowercase()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a lowercase code point from the ASCII range.
	MUU_CONST_GETTER
	constexpr bool is_ascii_lowercase(char32_t c) noexcept
	{
		return c >= U'a' && c <= U'z';
	}

	/// @}

	/// \addtogroup	is_ascii_number	is_ascii_number()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a number code point from the ASCII range.
	MUU_CONST_GETTER
	constexpr bool is_ascii_number(char32_t c) noexcept
	{
		return c >= U'0' && c <= U'9';
	}

	/// @}

	/// \addtogroup	is_ascii_uppercase	is_ascii_uppercase()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is an uppercase code point from the ASCII range.
	MUU_CONST_GETTER
	constexpr bool is_ascii_uppercase(char32_t c) noexcept
	{
		return c >= U'A' && c <= U'Z';
	}

	/// @}

	/// \addtogroup	is_ascii_whitespace	is_ascii_whitespace()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a whitespace code point from the ASCII range.
	MUU_CONST_GETTER
	constexpr bool is_ascii_whitespace(char32_t c) noexcept
	{
		return (U'\t' <= c && c <= U'\r') || c == U' ';
	}

	/// @}

	/// \addtogroup	is_non_ascii_code_point	is_non_ascii_code_point()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a valid code point from outside the ASCII range.
	MUU_CONST_GETTER
	constexpr bool is_non_ascii_code_point(char32_t c) noexcept
	{
		return c <= U'\U0010FFFF' && c >= U'\x80';
	}

	/// @}

	/// \addtogroup	is_non_ascii_hyphen	is_non_ascii_hyphen()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a hyphen code point from outside the ASCII range.
	MUU_CONST_GETTER
	constexpr bool is_non_ascii_hyphen(char32_t c) noexcept
	{
		// 10 code units from 9 ranges (spanning a search area of 65209)
		
		if (c < U'\xAD' || c > U'\uFF65')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0xADull) / 0x3FBull;
		if ((1ull << child_index_0) & 0x7FFFFFFFFFFFE75Cull)
			return false;
		if (c == U'\xAD' || c == U'\u058A' || c == U'\u1806' || c == U'\u2E17' || c == U'\u30FB')
			return true;
		switch (child_index_0)
		{
			case 0x07: return c >= U'\u2010' && c <= U'\u2011';
			case 0x3F: return c == U'\uFE63' || c == U'\uFF0D' || c == U'\uFF65';
			default: MUU_UNREACHABLE;
		}
		
		MUU_UNREACHABLE;
	}

	/// @}

	/// \addtogroup	is_non_ascii_letter	is_non_ascii_letter()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a letter code point from outside the ASCII range.
	MUU_CONST_GETTER
	constexpr bool is_non_ascii_letter(char32_t c) noexcept
	{
		// 136052 code units from 657 ranges (spanning a search area of 205574)
		
		if (c < U'\xAA' || c > U'\U000323AF')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0xAAull) / 0xC8Dull;
		if ((1ull << child_index_0) & 0x130C040000ull)
			return false;
		if ((1ull << child_index_0) & 0x853FFE004001DFA0ull)
			return true;
		switch (child_index_0)
		{
			case 0x00: // [0] 00AA - 0D36
			{
				// 2006 code units from 129 ranges (spanning a search area of 3213)
				
				MUU_ASSUME(c >= U'\xAA' && c <= U'\u0D36');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFDFFFFFC10801u,	0xFFFFFFFFFFFFDFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0x07C000FFF0FFFFFFu,	0x0000000000000014u,	0x0000000000000000u,	0xFEFFFFF5D02F37C0u,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFEFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFF00FFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFC09FFFFFFFFFBFu,	0x000000007FFFFFFFu,
					0xFFFFFFC000000000u,	0xFFC00000000001E1u,	0x00000001FFFFFFFFu,	0xFFFFFFFFFFFFFFB0u,
					0x18000BFFFFFFFFFFu,	0xFFFFFF4000270030u,	0xFFFFFFF80000003Fu,	0x0FFFFFFFFFFFFFFFu,
					0xFFFFFFFF00000080u,	0x44010FFFFFC10C01u,	0xFFC07FFFFFC00000u,	0xFFC0001FBFFFFFC1u,
					0x00000000FFFFFFFFu,	0xFFFFFFFFFC000000u,	0x00FFC0400008FFFFu,	0x7FFFFE67F87FFF80u,
					0x00EC00100008F17Fu,	0x7FFFFE61F80400C0u,	0x001780000000DB7Fu,	0x7FFFFEEFF8000700u,
					0x00C000400008FB7Fu,	0x7FFFFE67F8008000u,	0x00EC00000008FB7Fu,	0xC6358F71FA000080u,
					0x000000400000FFF1u,	0x7FFFFF77F8000000u,	0x00C9C0000008FFFFu,	0x7FFFFF77F8400000u,
					0x00D800000008FBFFu,	0xFFFFFF77FC000180u,	0x0000000000001FFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xAAull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xAAull) % 0x40ull));
				
			}
			case 0x01: // [1] 0D37 - 19C3
			{
				// 2291 code units from 84 ranges (spanning a search area of 3213)
				
				MUU_ASSUME(c >= U'\u0D37' && c <= U'\u19C3');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000700E080004Fu,	0xF7FFFFF8FFFFC1F8u,	0x000000000000FE5Fu,	0x1BFFFFFFFFFFFC00u,
					0x000000000000FE00u,	0x1BFF5FFFFFEFAC00u,	0x000001E00000BE40u,	0x0000000000000200u,
					0x003FFFFFFFFDFE00u,	0x00000000003E0000u,	0x0000000000000000u,	0x000FFFFFFFFFFE00u,
					0xC380C4787E000100u,	0xFFFFFE00008007FFu,	0xFFFFFFFFFE417FFFu,	0xFFFFFFFFFFFFFFEFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFE7AFE7BFFFFu,	0x7BFFFFFFFE7BFFFFu,	0xFFFFFFFEFFFE7AFEu,	0xFFFFFFFE7BFFFFFFu,
					0x0000000FFFFFFFFFu,	0xFFFFFE0001FFFE00u,	0x7FFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFC7Eu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFF3FFFFFFFFFFFFFu,	0xFFFFFE0FFFFFFDFFu,	0xFC0FFFFFFFFFFFFFu,	0x07FFFF0007FFFE03u,
					0x03BFFE0007FFFE00u,	0x1FFFFFFFFFFFFE00u,	0x0000002100000000u,	0xFFFFFE0000000000u,
					0xFFFFFFFFFFFFFFFFu,	0xFE0BFFFFFFFF3E03u,	0x7FFFFFFFFFFFFFFFu,	0x000000FFFFFFFE00u,
					0x3E7FFFFFFE000000u,	0xFE1FFFFFFFFFFE00u,	0x0000000000001FFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xD37ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xD37ull) % 0x40ull));
				
			}
			case 0x02: // [2] 19C4 - 2650
			{
				// 1086 code units from 56 ranges (spanning a search area of 1985)
				
				if (c > U'\u2184')
					return false;
				MUU_ASSUME(c >= U'\u19C4');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xF00000000000003Fu,	0xFFFFFFFFF007FFFFu,	0x000000000001FFFFu,	0x0000000800000000u,
					0x0000000000000000u,	0x0000FFFFFFFFFFFEu,	0x80000000000001FEu,	0xFFC00C001FFFFFFFu,
					0xF0000003FFFFFFFFu,	0x00000000FFFFFFFFu,	0xF3FFFFFFFFC00E00u,	0x0E7FFFFFFFFFF01Fu,
					0xF046FDE000000000u,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x0FFFFFFFFFFFFFFFu,
					0xF000000000000000u,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFF3F3FFFFu,	0xF3FFFFFFFAAFF3F3u,	0xC5FDFFFFFFFFFFFFu,
					0x01FDC1FFF0FCF1FDu,	0x0000000000000000u,	0x0800200000000000u,	0x0000000001FFF000u,
					0x4000000000000000u,	0x0F3FFBD503E2FFC8u,	0x800000000000043Eu,	0x0000000000000001u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x19C4ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x19C4ull) % 0x40ull));
				
			}
			case 0x03: // [3] 2651 - 32DD
			{
				// 789 code units from 29 ranges (spanning a search area of 1536)
				
				if (c < U'\u2C00' || c > U'\u31FF')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x000C781FFFFFFFFFu,
					0xFFFF20BFFFFFFFFFu,	0x000080FFFFFFFFFFu,	0x7F7F7F7F007FFFFFu,	0x000000007F7F7F7Fu,
					0x0000800000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x183E000000000060u,	0xFFFFFFFFFFFFFFFEu,	0xFFFFFFFEE07FFFFFu,	0xF7FFFFFFFFFFFFFFu,
					0xFFFEFFFFFFFFFFE0u,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFF00007FFFu,	0xFFFF000000000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x2C00ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				
			}
			case 0x04: return c >= U'\u3400';
			case 0x06: return c <= U'\u4DBF' || U'\u4E00' <= c;
			case 0x0D: // [13] A3D3 - B05F
			{
				// 2633 code units from 54 ranges (spanning a search area of 3213)
				
				MUU_ASSUME(c >= U'\uA3D3' && c <= U'\uB05F');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x03FFFFFFFFFFFFFFu,	0xE000000000000000u,
					0xFFFFE7FFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xE3FFFFFFFFFFFFFFu,	0xFFFFE00001801FFFu,	0xFFFFF0000FFFFFFFu,	0xFFFFFFFFFFFFE7FFu,
					0x000000000007FFFFu,	0xFFFFFFFFFFFF9FF0u,	0xFF3FFFFFFFFFFFFFu,	0x60FFFFFFFFFFFFFFu,
					0xFEF77FFF8000007Du,	0xFFFFE0000000FFFFu,	0xFFFF8001FFFFFFFFu,	0x00000001FFFFFFFFu,
					0xFF800D1F80000000u,	0x000FFFFFE007FFFFu,	0xFFFE03FFFFFFE000u,	0x10000000FFFFFFFFu,
					0xFFFFEF801FFBE000u,	0x01FEE000003FFFFFu,	0xFFFFF88FFFFFE000u,	0x0000A7CC5FFFFFFFu,
					0xCFCFC00380FFE700u,	0xFFFFFFFFEFEFE00Fu,	0xFFFFFFFFE07FFEFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFE0000000FFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x0000000000001FFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA3D3ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA3D3ull) % 0x40ull));
				
			}
			case 0x11: return c <= U'\uD7A3' || (U'\uD7B0' <= c && c <= U'\uD7C6') || (U'\uD7CB' <= c && c <= U'\uD7FB');
			case 0x13: // [19] EF21 - FBAD
			{
				// 622 code units from 12 ranges (spanning a search area of 686)
				
				if (c < U'\uF900')
					return false;
				MUU_ASSUME(c <= U'\uFBAD');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFF3FFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x0000000003FFFFFFu,
					0x5F7FFDFFA0F8007Fu,	0xFFFFFFFFFFFFFFDBu,	0x00003FFFFFFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xF900ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				
			}
			case 0x14: // [20] FBAE - 1083A
			{
				// 2103 code units from 53 ranges (spanning a search area of 3211)
				
				if (c > U'\U00010838')
					return false;
				MUU_ASSUME(c >= U'\uFBAE');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFE00000000Fu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFC0000FFFFu,	0xFFFFFFF3FFFFFFFFu,
					0x0000000003FFFFFFu,	0x0000000000003FFCu,	0x0000000000000000u,	0xFFFFFFFFFFFFFF7Cu,
					0xFFFFFFFFFFFFFFFFu,	0xFFF8000000007FFFu,	0xFF001FFFFFF81FFFu,	0xFFFFFFFFFFFFFFFFu,
					0x000073F3F3F1FFFFu,	0xFDFFFFFFBFFC0000u,	0x0000FFFCFFFEDFFFu,	0xFFFFFFFFFFFC0000u,
					0xFFFFFFFFFFFFFFFFu,	0x0000000000001FFFu,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0xFFFC7FFFFFFC0000u,
					0x00000007FFFFFFFFu,	0x8003FFFFFFFC0000u,	0xFFFFFFFC0FF7FFFFu,	0xFFFCFFFFFFFC00FFu,
					0x00000003FC3FFFFFu,	0xFFFFFFFFFFFC0000u,	0xFFFFFFFFFFFFFFFFu,	0x0000FFFFFFFFFFFFu,
					0xFFFFFC3FFFFFFFFCu,	0x03FFFFFFFFFC3FFFu,	0x003FFFFFFFFFFFFCu,	0xFFEFFEDFDFFFDFFCu,
					0x0000000000006FEFu,	0xFFFFFFFFFFFC0000u,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x03FC00FFFFFC01FFu,	0xFFFFFFFFFEFC0000u,
					0x0000000000001FF7u,	0xFFFFFFFFF4FC0000u,	0x00000000000006FFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xFBAEull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xFBAEull) % 0x40ull));
				
			}
			case 0x15: // [21] 1083B - 114C7
			{
				// 1365 code units from 72 ranges (spanning a search area of 3212)
				
				if (c < U'\U0001083C')
					return false;
				MUU_ASSUME(c <= U'\U000114C7');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x07FFFFF003FFFFF9u,	0x00000007FFFFFFF0u,	0x037FFFF000000000u,	0x3FFFFFF003FFFFF0u,
					0x0000000000000000u,	0x0FFFFFFFFFFFFFF0u,	0x000000000000000Cu,	0x03FFFFFFEEF00010u,
					0xFFFFFFF000000000u,	0x00000001FFFFFFF1u,	0x000001FFFFFFEFF0u,	0x03FFFFFFFFFFFFF0u,
					0x007FFFF003FFFFF0u,	0x00000000003FFFF0u,	0x0000000000000000u,	0xFFFFFFFFFFFFFFF0u,
					0x0000000000001FFFu,	0x007FFFFFFFFFFFF0u,	0x007FFFFFFFFFFFF0u,	0x000000FFFFFFFFF0u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x00303FFFFFFFFFF0u,	0x0000000000000000u,	0xFFF00801FFFFFFF0u,
					0xFFF00000000003FFu,	0xFFF000000000003Fu,	0x07FFFFF0000001FFu,	0x0FFFFFFFFFFFFF80u,
					0x0260000000000000u,	0x000FFFFFFFFFFF80u,	0x00001FFFFFF00000u,	0x000007FFFFFFFF80u,
					0x047FFFFFFFF00900u,	0x007FFFFFFFFFFF80u,	0x00000001400001E0u,	0x0000FFFFFFBFFFF0u,
					0x0000000000000018u,	0xFFF01FFBFFFBD7F0u,	0x00000007FFFFFFFFu,	0x3EDFDFFFFF99FE00u,
					0x0000003E00100002u,	0x0000000000000000u,	0x0000000000000000u,	0x01FFFFFFFFFFFFF0u,
					0x0000003800007800u,	0x000FFFFFFFFFFFF0u,	0x0000000000000B00u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1083Cull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1083Cull) % 0x40ull));
				
			}
			case 0x16: // [22] 114C8 - 12154
			{
				// 1118 code units from 46 ranges (spanning a search area of 3029)
				
				if (c < U'\U00011580')
					return false;
				MUU_ASSUME(c <= U'\U00012154');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00007FFFFFFFFFFFu,	0x000000000F000000u,	0x0000FFFFFFFFFFFFu,	0x0000000000000010u,
					0x010007FFFFFFFFFFu,	0x0000000000000000u,	0x0000000007FFFFFFu,	0x000000000000007Fu,
					0x0000000000000000u,	0x0000000000000000u,	0x00000FFFFFFFFFFFu,	0x0000000000000000u,
					0xFFFFFFFF00000000u,	0x80000000FFFFFFFFu,	0x8000FFFFFF6FF27Fu,	0x0000000000000002u,
					0xFFFFFCFF00000000u,	0x0000000A0001FFFFu,	0x0407FFFFFFFFF801u,	0xFFFFFFFFF0010000u,
					0xFFFF0000200003FFu,	0x01FFFFFFFFFFFFFFu,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x00007FFFFFFFFDFFu,	0xFFFC000000000001u,
					0x000000000000FFFFu,	0x0000000000000000u,	0x0001FFFFFFFFFB7Fu,	0xFFFFFDBF00000040u,
					0x00000000010003FFu,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0007FFFF00000000u,	0x000FFFFFFFFDFFF4u,	0x0000000000000000u,
					0x0001000000000000u,	0x0000000000000000u,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x00000000001FFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x11580ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				
			}
			case 0x17: return c <= U'\U00012399' || (U'\U00012480' <= c && c <= U'\U00012543');
			case 0x18: return (U'\U00012F90' <= c && c <= U'\U00012FF0') || (U'\U00013000' <= c && c <= U'\U0001342F')
				|| (U'\U00013441' <= c && c <= U'\U00013446');
			case 0x19: return c >= U'\U00014400' && c <= U'\U00014646';
			case 0x1C: // [28] 16016 - 16CA2
			{
				// 801 code units from 8 ranges (spanning a search area of 912)
				
				if (c < U'\U00016800' || c > U'\U00016B8F')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0x01FFFFFFFFFFFFFFu,	0xFFFF00007FFFFFFFu,	0x7FFFFFFFFFFFFFFFu,	0x00003FFFFFFF0000u,
					0x0000FFFFFFFFFFFFu,	0xE0FFFFF80000000Fu,	0x000000000000FFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x16800ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				
			}
			case 0x1D: // [29] 16CA3 - 1792F
			{
				// 2508 code units from 7 ranges (spanning a search area of 2800)
				
				if (c < U'\U00016E40')
					return false;
				MUU_ASSUME(c <= U'\U0001792F');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0x0000000000000000u,	0x0000000000000000u,	0xFFFFFFFFFFFFFFFFu,
					0x00000000000107FFu,	0x00000000FFF80000u,	0x0000000B00000000u,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x0000FFFFFFFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x16E40ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				
			}
			case 0x1F: return c <= U'\U000187F7' || (U'\U00018800' <= c && c <= U'\U00018CD5') || (U'\U00018D00' <= c && c <= U'\U00018D08');
			case 0x22: // [34] 1AB64 - 1B7F0
			{
				// 709 code units from 9 ranges (spanning a search area of 780)
				
				if (c < U'\U0001AFF0' || c > U'\U0001B2FB')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFF6FEFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0x0007FFFFFFFFFFFFu,	0x00F0002700000004u,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0x0000000000000FFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1AFF0ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1AFF0ull) % 0x40ull));
				
			}
			case 0x23: // [35] 1B7F1 - 1C47D
			{
				// 139 code units from 4 ranges (spanning a search area of 154)
				
				if (c < U'\U0001BC00' || c > U'\U0001BC99')
					return false;
				
				switch ((static_cast<uint_least64_t>(c) - 0x1BC00ull) / 0x40ull)
				{
					case 0x01: return c <= U'\U0001BC7C' && (1ull << (static_cast<uint_least64_t>(c) - 0x1BC40ull)) & 0x1FFF07FFFFFFFFFFull;
					case 0x02: return (1u << (static_cast<uint_least32_t>(c) - 0x1BC80u)) & 0x3FF01FFu;
					default: return true;
				}
				
				MUU_UNREACHABLE;
			}
			case 0x25: // [37] 1D10B - 1DD97
			{
				// 936 code units from 30 ranges (spanning a search area of 972)
				
				if (c < U'\U0001D400' || c > U'\U0001D7CB')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFDFFFFFu,	0xEBFFDE64DFFFFFFFu,	0xFFFFFFFFFFFFFFEFu,
					0x7BFFFFFFDFDFE7BFu,	0xFFFFFFFFFFFDFC5Fu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFF3FFFFFFFFFu,	0xF7FFFFFFF7FFFFFDu,
					0xFFDFFFFFFFDFFFFFu,	0xFFFF7FFFFFFF7FFFu,	0xFFFFFDFFFFFFFDFFu,	0x0000000000000FF7u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1D400ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				
			}
			case 0x26: // [38] 1DD98 - 1EA24
			{
				// 548 code units from 16 ranges (spanning a search area of 2636)
				
				if (c < U'\U0001DF00' || c > U'\U0001E94B')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x000007E07FFFFFFFu,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0xFFFF000000000000u,	0x00003FFFFFFFFFFFu,	0x0000000000000000u,	0x0000000000000000u,
					0x3F801FFFFFFFFFFFu,	0x0000000000004000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x00003FFFFFFF0000u,	0x00000FFFFFFFFFFFu,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x00000FFFFFFF0000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x7FFF6F7F00000000u,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x000000000000001Fu,
					0xFFFFFFFFFFFFFFFFu,	0x000000000000080Fu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1DF00ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				
			}
			case 0x27: // [39] 1EA25 - 1F6B1
			{
				// 141 code units from 33 ranges (spanning a search area of 188)
				
				if (c < U'\U0001EE00' || c > U'\U0001EEBB')
					return false;
				
				switch ((static_cast<uint_least64_t>(c) - 0x1EE00ull) / 0x40ull)
				{
					case 0x00: return c <= U'\U0001EE3B' && (1ull << (static_cast<uint_least64_t>(c) - 0x1EE00ull)) & 0xAF7FE96FFFFFFEFull;
					case 0x01: return c >= U'\U0001EE42' && c <= U'\U0001EE7E'
						&& (1ull << (static_cast<uint_least64_t>(c) - 0x1EE42ull)) & 0x17BDFDE5AAA5BAA1ull;
					case 0x02: return (1ull << (static_cast<uint_least64_t>(c) - 0x1EE80ull)) & 0xFFFFBEE0FFFFBFFull;
					default: MUU_UNREACHABLE;
				}
				
				MUU_UNREACHABLE;
			}
			case 0x28: return c >= U'\U00020000';
			case 0x36: return c <= U'\U0002A6DF' || U'\U0002A700' <= c;
			case 0x37: return c <= U'\U0002B739' || (U'\U0002B740' <= c && c <= U'\U0002B81D') || U'\U0002B820' <= c;
			case 0x39: return c <= U'\U0002CEA1' || U'\U0002CEB0' <= c;
			case 0x3B: return c <= U'\U0002EBE0';
			case 0x3C: return c >= U'\U0002F800' && c <= U'\U0002FA1D';
			case 0x3D: return c >= U'\U00030000';
			case 0x3E: return c <= U'\U0003134A' || U'\U00031350' <= c;
			default: MUU_UNREACHABLE;
		}
		
		MUU_UNREACHABLE;
	}

	/// @}

	/// \addtogroup	is_non_ascii_lowercase	is_non_ascii_lowercase()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a lowercase code point from outside the ASCII range.
	MUU_CONST_GETTER
	constexpr bool is_non_ascii_lowercase(char32_t c) noexcept
	{
		// 1613 code units from 624 ranges (spanning a search area of 65201)
		
		if (c < U'\xAA' || c > U'\uFF5A')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0xAAull) / 0x3FBull;
		if ((1ull << child_index_0) & 0x3FFFF9FFFFFFF02Cull)
			return false;
		switch (child_index_0)
		{
			case 0x00: // [0] 00AA - 04A4
			{
				// 454 code units from 204 ranges (spanning a search area of 1018)
				
				if (c > U'\u04A3')
					return false;
				MUU_ASSUME(c >= U'\xAA');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFE0000000010801u,	0xAAAAAAAAAABFDFFFu,	0xAAAAAAAAD5556AAAu,	0x4A93890C4A752AAAu,
					0xAAAD55549039944Bu,	0xAAAAAAAAAAAA8A6Au,	0xFFFFFFEAA164FEAAu,	0xFFFFFBFFFFFFFFFFu,
					0x07C0000000C07FFFu,	0x0000000000000000u,	0x0000000008000000u,	0x00000040000F2280u,
					0xAAAAB8DFFFFFFFFCu,	0x0000000000064BEAu,	0xAABFFFFFFFFFFFC0u,	0x02AAAAAA00AAAAAAu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xAAull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xAAull) % 0x40ull));
				
			}
			case 0x01: // [1] 04A5 - 089F
			{
				// 111 code units from 70 ranges (spanning a search area of 228)
				
				if (c > U'\u0588')
					return false;
				MUU_ASSUME(c >= U'\u04A5');
				
				switch ((static_cast<uint_least64_t>(c) - 0x4A5ull) / 0x40ull)
				{
					case 0x00: return c <= U'\u04E3' && (1ull << (static_cast<uint_least64_t>(c) - 0x4A5ull)) & 0x555556AAA5555555ull;
					case 0x01: return c <= U'\u0523' && ((static_cast<uint_least32_t>(c) + 1u) % 2u) == 0u;
					case 0x02: return (1ull << (static_cast<uint_least64_t>(c) - 0x525ull)) & 0xF800000000000555ull;
					default: return true;
				}
				
				MUU_UNREACHABLE;
			}
			case 0x04: return (U'\u10D0' <= c && c <= U'\u10FA') || (U'\u10FC' <= c && c <= U'\u10FF') || (U'\u13F8' <= c && c <= U'\u13FD');
			case 0x06: return c >= U'\u1C80';
			case 0x07: // [7] 1C87 - 2081
			{
				// 450 code units from 148 ranges (spanning a search area of 1017)
				
				if (c > U'\u207F')
					return false;
				MUU_ASSUME(c >= U'\u1C87');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000000000000003u,	0xFE00000000000000u,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0x01FFFFFFFFFFFFFFu,	0x5400000000000000u,	0x5555555555555555u,	0x5555555555555555u,
					0x55555555557FD555u,	0xFF55555555555555u,	0x7E01FE01FE007E01u,	0xFE7FFE01FE01FE00u,
					0xB881BE01FE01FE01u,	0x0001B801FE019E01u,	0x0000000000000000u,	0x0100040000000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1C87ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1C87ull) % 0x40ull));
				
			}
			case 0x08: // [8] 2082 - 247C
			{
				// 44 code units from 12 ranges (spanning a search area of 245)
				
				if (c < U'\u2090' || c > U'\u2184')
					return false;
				
				switch ((static_cast<uint_least64_t>(c) - 0x2090ull) / 0x40ull)
				{
					case 0x00: return c <= U'\u209C';
					case 0x01: return c >= U'\u210A' && (1u << (static_cast<uint_least32_t>(c) - 0x210Au)) & 0x31u;
					case 0x02: return c >= U'\u2113' && c <= U'\u214E'
						&& (1ull << (static_cast<uint_least64_t>(c) - 0x2113ull)) & 0x878064210000001ull;
					case 0x03: return (U'\u2170' <= c && c <= U'\u217F') || c == U'\u2184';
					default: MUU_UNREACHABLE;
				}
				
				MUU_UNREACHABLE;
			}
			case 0x09: return c >= U'\u24D0' && c <= U'\u24E9';
			case 0x0A: // [10] 2878 - 2C72
			{
				// 55 code units from 7 ranges (spanning a search area of 66)
				
				if (c < U'\u2C30' || c > U'\u2C71')
					return false;
				
				return c == U'\u2C71'
					|| (c <= U'\u2C6C' && (1ull << (static_cast<uint_least64_t>(c) - 0x2C30ull)) & 0x1562FFFFFFFFFFFFull);
			}
			case 0x0B: // [11] 2C73 - 306D
			{
				// 104 code units from 58 ranges (spanning a search area of 187)
				
				if (c > U'\u2D2D')
					return false;
				MUU_ASSUME(c >= U'\u2C73');
				
				switch ((static_cast<uint_least64_t>(c) - 0x2C73ull) / 0x40ull)
				{
					case 0x00: return c <= U'\u2CB1' && (1ull << (static_cast<uint_least64_t>(c) - 0x2C73ull)) & 0x55555555555547FBull;
					case 0x01: return c <= U'\u2CEE' && (1ull << (static_cast<uint_least64_t>(c) - 0x2CB3ull)) & 0xA03555555555555ull;
					case 0x02: return (U'\u2D00' <= c && c <= U'\u2D25') || c == U'\u2CF3' || c == U'\u2D27' || c == U'\u2D2D';
					default: MUU_UNREACHABLE;
				}
				
				MUU_UNREACHABLE;
			}
			case 0x29: // [41] A3DD - A7D7
			{
				// 126 code units from 111 ranges (spanning a search area of 407)
				
				if (c < U'\uA641')
					return false;
				MUU_ASSUME(c <= U'\uA7D7');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000155555555555u,	0x000000001D555555u,	0x0000000000000000u,	0x5555D55400000000u,
					0x4AFFD55555555555u,	0x55504155555D2855u,	0x0000000000550285u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA641ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA641ull) % 0x40ull));
				
			}
			case 0x2A: // [42] A7D8 - ABD2
			{
				// 145 code units from 7 ranges (spanning a search area of 999)
				
				if (c < U'\uA7D9' || c > U'\uABBF')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000003AE000001u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0xFFFFFFFFFF800000u,	0xFFFFFFFFFF81FFFBu,	0x0000007FFFFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA7D9ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA7D9ull) % 0x40ull));
				
			}
			case 0x3E: return c >= U'\uFB00' && c <= U'\uFB17' && (1u << (static_cast<uint_least32_t>(c) - 0xFB00u)) & 0xF8007Fu;
			case 0x3F: return c >= U'\uFF41';
			default: MUU_UNREACHABLE;
		}
		
		MUU_UNREACHABLE;
	}

	/// @}

	/// \addtogroup	is_non_ascii_number	is_non_ascii_number()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a number code point from outside the ASCII range.
	MUU_CONST_GETTER
	constexpr bool is_non_ascii_number(char32_t c) noexcept
	{
		// 906 code units from 75 ranges (spanning a search area of 128410)
		
		if (c < U'\u0660' || c > U'\U0001FBF9')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0x660ull) / 0x7D7ull;
		if ((1ull << child_index_0) & 0x47FFDFE07FCFFFD0ull)
			return false;
		switch (child_index_0)
		{
			case 0x00: // [0] 0660 - 0E36
			{
				// 130 code units from 13 ranges (spanning a search area of 1936)
				
				if (c > U'\u0DEF')
					return false;
				MUU_ASSUME(c >= U'\u0660');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x0000000000000000u,	0x0000000003FF0000u,	0x0000000000000000u,
					0x0000000000000000u,	0x000003FF00000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x000000000000FFC0u,	0x0000000000000000u,	0x000000000000FFC0u,	0x0000000000000000u,
					0x000000000000FFC0u,	0x0000000000000000u,	0x000000000000FFC0u,	0x0000000000000000u,
					0x000000000000FFC0u,	0x0000000000000000u,	0x000000000000FFC0u,	0x0000000000000000u,
					0x000000000000FFC0u,	0x0000000000000000u,	0x000000000000FFC0u,	0x0000000000000000u,
					0x000000000000FFC0u,	0x0000000000000000u,	0x000000000000FFC0u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x660ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x660ull) % 0x40ull));
				
			}
			case 0x01: // [1] 0E37 - 160D
			{
				// 50 code units from 5 ranges (spanning a search area of 586)
				
				if (c < U'\u0E50' || c > U'\u1099')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x0000000000000000u,	0x00000000000003FFu,	0x0000000003FF0000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x03FF000000000000u,
					0x0000000000000000u,	0x00000000000003FFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xE50ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xE50ull) % 0x40ull));
				
			}
			case 0x02: // [2] 160E - 1DE4
			{
				// 103 code units from 11 ranges (spanning a search area of 1388)
				
				if (c < U'\u16EE' || c > U'\u1C59')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000000000000007u,	0x0000000000000000u,	0x0000000000000000u,	0x0FFC000000000000u,
					0x00000FFC00000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x00000003FF000000u,	0x0000000000000000u,	0x00000FFC00000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x00000FFC0FFC0000u,	0x0000000000000000u,
					0x0000000000000000u,	0x00000FFC00000000u,	0x0000000000000000u,	0x0000000000000FFCu,
					0x0000000000000000u,	0x00000FFC0FFC0000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x16EEull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x16EEull) % 0x40ull));
				
			}
			case 0x03: return c >= U'\u2160' && c <= U'\u2188' && (1ull << (static_cast<uint_least64_t>(c) - 0x2160ull)) & 0x1E7FFFFFFFFull;
			case 0x05: return c >= U'\u3007' && c <= U'\u303A' && (1ull << (static_cast<uint_least64_t>(c) - 0x3007ull)) & 0xE0007FC000001ull;
			case 0x14: // [20] A32C - AB02
			{
				// 70 code units from 7 ranges (spanning a search area of 1082)
				
				if (c < U'\uA620' || c > U'\uAA59')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x0000000000000000u,	0x0000000000000000u,	0x000000000000FFC0u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x03FF000000000000u,	0x000003FF00000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x03FF000000000000u,	0x0000000003FF0000u,
					0x03FF000000000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA620ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA620ull) % 0x40ull));
				
			}
			case 0x15: return c >= U'\uABF0' && c <= U'\uABF9';
			case 0x1F: return c >= U'\uFF10' && c <= U'\uFF19';
			case 0x20: // [32] 10140 - 10916
			{
				// 70 code units from 5 ranges (spanning a search area of 874)
				
				if (c > U'\U000104A9')
					return false;
				MUU_ASSUME(c >= U'\U00010140');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x001FFFFFFFFFFFFFu,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000402u,	0x0000000000000000u,	0x00000000003E0000u,	0x0000000000000000u,
					0x0000000000000000u,	0x000003FF00000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x10140ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				
			}
			case 0x21: return (U'\U00010D30' <= c && c <= U'\U00010D39') || (U'\U00011066' <= c && c <= U'\U0001106F');
			case 0x22: // [34] 110EE - 118C4
			{
				// 90 code units from 9 ranges (spanning a search area of 1610)
				
				if (c < U'\U000110F0' || c > U'\U00011739')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x000000000000FFC0u,	0x0000000000000000u,	0x000003FF00000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x00000000000003FFu,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x000003FF00000000u,	0x0000000000000000u,	0x000003FF00000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x000003FF00000000u,	0x0000000000000000u,	0x0000000003FF0000u,
					0x0000000000000000u,	0x00000000000003FFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x110F0ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x110F0ull) % 0x40ull));
				
			}
			case 0x23: // [35] 118C5 - 1209B
			{
				// 60 code units from 6 ranges (spanning a search area of 1658)
				
				if (c < U'\U000118E0' || c > U'\U00011F59')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x03FF000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x03FF000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x03FF000000000000u,	0x0000000000000000u,	0x00000000000003FFu,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x03FF000000000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x118E0ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x118E0ull) % 0x40ull));
				
			}
			case 0x24: return c >= U'\U00012400' && c <= U'\U0001246E';
			case 0x2D: return (U'\U00016A60' <= c && c <= U'\U00016A69') || (U'\U00016AC0' <= c && c <= U'\U00016AC9')
				|| (U'\U00016B50' <= c && c <= U'\U00016B59');
			case 0x3B: return c >= U'\U0001D7CE' && c <= U'\U0001D7FF';
			case 0x3C: return (U'\U0001E140' <= c && c <= U'\U0001E149') || (U'\U0001E2F0' <= c && c <= U'\U0001E2F9');
			case 0x3D: return (U'\U0001E4F0' <= c && c <= U'\U0001E4F9') || (U'\U0001E950' <= c && c <= U'\U0001E959');
			case 0x3F: return c >= U'\U0001FBF0';
			default: MUU_UNREACHABLE;
		}
		
		MUU_UNREACHABLE;
	}

	/// @}

	/// \addtogroup	is_non_ascii_uppercase	is_non_ascii_uppercase()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is an uppercase code point from outside the ASCII range.
	MUU_CONST_GETTER
	constexpr bool is_non_ascii_uppercase(char32_t c) noexcept
	{
		// 1143 code units from 606 ranges (spanning a search area of 65147)
		
		if (c < U'\xC0' || c > U'\uFF3A')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0xC0ull) / 0x3FAull;
		if ((1ull << child_index_0) & 0x7FFFF9FFFFFFF024ull)
			return false;
		switch (child_index_0)
		{
			case 0x00: // [0] 00C0 - 04B9
			{
				// 345 code units from 212 ranges (spanning a search area of 1017)
				
				if (c > U'\u04B8')
					return false;
				MUU_ASSUME(c >= U'\xC0');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x000000007F7FFFFFu,	0xAA55555555555555u,	0x2B555555555554AAu,	0x11AED2D5B1DBCED6u,
					0x55D255554AAAA490u,	0x6C05555555555555u,	0x000000000000557Au,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x8045000000000000u,	0x00000FFBFFFED740u,
					0xE6905555551C8000u,	0x0000FFFFFFFFFFFFu,	0x5555555500000000u,	0x0155555555555401u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xC0ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				
			}
			case 0x01: // [1] 04BA - 08B3
			{
				// 97 code units from 59 ranges (spanning a search area of 157)
				
				if (c > U'\u0556')
					return false;
				MUU_ASSUME(c >= U'\u04BA');
				
				switch ((static_cast<uint_least64_t>(c) - 0x4BAull) / 0x40ull)
				{
					case 0x00: return c <= U'\u04F8' && (1ull << (static_cast<uint_least64_t>(c) - 0x4BAull)) & 0x55555555554AAAD5ull;
					case 0x01: return (1ull << (static_cast<uint_least64_t>(c) - 0x4FAull)) & 0xFF95555555555555ull;
					default: return true;
				}
				
				MUU_UNREACHABLE;
			}
			case 0x03: return c >= U'\u10A0';
			case 0x04: // [4] 10A8 - 14A1
			{
				// 118 code units from 4 ranges (spanning a search area of 846)
				
				if (c > U'\u13F5')
					return false;
				MUU_ASSUME(c >= U'\u10A8');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000020BFFFFFFFu,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0xFF00000000000000u,
					0xFFFFFFFFFFFFFFFFu,	0x0000000000003FFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x10A8ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x10A8ull) % 0x40ull));
				
			}
			case 0x06: return c >= U'\u1C90';
			case 0x07: // [7] 1C96 - 208F
			{
				// 233 code units from 141 ranges (spanning a search area of 870)
				
				if (c > U'\u1FFB')
					return false;
				MUU_ASSUME(c >= U'\u1C96');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000039FFFFFFFFFu,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x5555540000000000u,	0x5555555555555555u,	0x5555555555555555u,
					0x5555555555555500u,	0x03FC015555555555u,	0x00FC03FC03FC00FCu,	0x0000000003FC02A8u,
					0x003C003C00000000u,	0x0000003C007C003Cu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1C96ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1C96ull) % 0x40ull));
				
			}
			case 0x08: // [8] 2090 - 2489
			{
				// 45 code units from 15 ranges (spanning a search area of 130)
				
				if (c < U'\u2102' || c > U'\u2183')
					return false;
				
				if (c == U'\u2183')
					return true;
				switch ((static_cast<uint_least64_t>(c) - 0x2102ull) / 0x40ull)
				{
					case 0x00: return c <= U'\u213F' && (1ull << (static_cast<uint_least64_t>(c) - 0x2102ull)) & 0x3003CF540F89CE21ull;
					case 0x01: return c >= U'\u2145' && c <= U'\u216F'
						&& (1ull << (static_cast<uint_least64_t>(c) - 0x2145ull)) & 0x7FFF8000001ull;
					default: MUU_UNREACHABLE;
				}
				
				MUU_UNREACHABLE;
			}
			case 0x09: return c >= U'\u24B6' && c <= U'\u24CF';
			case 0x0A: // [10] 2884 - 2C7D
			{
				// 61 code units from 9 ranges (spanning a search area of 118)
				
				if (c < U'\u2C00' || c > U'\u2C75')
					return false;
				
				switch ((static_cast<uint_least64_t>(c) - 0x2C00ull) / 0x40ull)
				{
					case 0x00: return c <= U'\u2C2F';
					case 0x01: return c >= U'\u2C60' && (1u << (static_cast<uint_least32_t>(c) - 0x2C60u)) & 0x25EA9Du;
					default: MUU_UNREACHABLE;
				}
				
				MUU_UNREACHABLE;
			}
			case 0x0B: // [11] 2C7E - 3077
			{
				// 55 code units from 53 ranges (spanning a search area of 117)
				
				if (c > U'\u2CF2')
					return false;
				MUU_ASSUME(c >= U'\u2C7E');
				
				switch ((static_cast<uint_least64_t>(c) - 0x2C7Eull) / 0x40ull)
				{
					case 0x00: return c <= U'\u2CBC' && (1ull << (static_cast<uint_least64_t>(c) - 0x2C7Eull)) & 0x5555555555555557ull;
					case 0x01: return (1ull << (static_cast<uint_least64_t>(c) - 0x2CBEull)) & 0x10A01555555555ull;
					default: MUU_UNREACHABLE;
				}
				
				MUU_UNREACHABLE;
			}
			case 0x29: // [41] A3CA - A7C3
			{
				// 114 code units from 105 ranges (spanning a search area of 387)
				
				if (c < U'\uA640' || c > U'\uA7C2')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000155555555555u,	0x0000000005555555u,	0x0000000000000000u,	0x5554555400000000u,
					0x6A00555555555555u,	0x555F7D5555452855u,	0x0000000000000005u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA640ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				
			}
			case 0x2A: return c <= U'\uA7F5' && (1ull << (static_cast<uint_least64_t>(c) - 0xA7C4ull)) & 0x200000014102Full;
			case 0x3F: return c >= U'\uFF21';
			default: MUU_UNREACHABLE;
		}
		
		MUU_UNREACHABLE;
	}

	/// @}

	/// \addtogroup	is_non_ascii_whitespace	is_non_ascii_whitespace()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a whitespace code point from outside the ASCII range.
	MUU_CONST_GETTER
	constexpr bool is_non_ascii_whitespace(char32_t c) noexcept
	{
		// 19 code units from 8 ranges (spanning a search area of 12156)
		
		if (c < U'\x85' || c > U'\u3000')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0x85ull) / 0xBEull;
		if ((1ull << child_index_0) & 0x7FFFFBFFDFFFFFFEull)
			return false;
		if (c == U'\u1680' || c == U'\u3000')
			return true;
		switch (child_index_0)
		{
			case 0x00: return c == U'\x85' || c == U'\xA0';
			case 0x2A: // [42] 1FB1 - 206E
			{
				// 15 code units from 4 ranges (spanning a search area of 96)
				
				if (c < U'\u2000' || c > U'\u205F')
					return false;
				
				return c == U'\u205F'
					|| (c <= U'\u202F' && (1ull << (static_cast<uint_least64_t>(c) - 0x2000ull)) & 0x8300000007FFull);
			}
			default: MUU_UNREACHABLE;
		}
		
		MUU_UNREACHABLE;
	}

	/// @}

	/// \addtogroup	is_not_code_point	is_not_code_point()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is not a valid code point.
	MUU_CONST_GETTER
	constexpr bool is_not_code_point(char32_t c) noexcept
	{
		return U'\U0010FFFF' < c;
	}

	/// @}

	/// \addtogroup	is_not_hyphen	is_not_hyphen()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is not a hyphen code point.
	MUU_CONST_GETTER
	constexpr bool is_not_hyphen(char32_t c) noexcept
	{
		return !is_ascii_hyphen(c) && !is_non_ascii_hyphen(c);
	}

	/// @}

	/// \addtogroup	is_not_letter	is_not_letter()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is not a letter code point.
	MUU_CONST_GETTER
	constexpr bool is_not_letter(char32_t c) noexcept
	{
		return !is_ascii_letter(c) && !is_non_ascii_letter(c);
	}

	/// @}

	/// \addtogroup	is_not_lowercase	is_not_lowercase()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is not a lowercase code point.
	MUU_CONST_GETTER
	constexpr bool is_not_lowercase(char32_t c) noexcept
	{
		return !is_ascii_lowercase(c) && !is_non_ascii_lowercase(c);
	}

	/// @}

	/// \addtogroup	is_not_number	is_not_number()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is not a number code point.
	MUU_CONST_GETTER
	constexpr bool is_not_number(char32_t c) noexcept
	{
		return !is_ascii_number(c) && !is_non_ascii_number(c);
	}

	/// @}

	/// \addtogroup	is_not_uppercase	is_not_uppercase()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is not an uppercase code point.
	MUU_CONST_GETTER
	constexpr bool is_not_uppercase(char32_t c) noexcept
	{
		return !is_ascii_uppercase(c) && !is_non_ascii_uppercase(c);
	}

	/// @}

	/// \addtogroup	is_not_whitespace	is_not_whitespace()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is not a whitespace code point.
	MUU_CONST_GETTER
	constexpr bool is_not_whitespace(char32_t c) noexcept
	{
		return !is_ascii_whitespace(c) && !is_non_ascii_whitespace(c);
	}

	/// @}

	/// \addtogroup	is_code_point	is_code_point()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a valid code point.
	MUU_CONST_GETTER
	constexpr bool is_code_point(char32_t c) noexcept
	{
		return c <= U'\U0010FFFF';
	}

	/// @}

	/// \addtogroup	is_code_point_boundary	is_code_point_boundary()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a code point boundary.
	MUU_CONST_GETTER
	constexpr bool is_code_point_boundary(char32_t c) noexcept
	{
		return c <= U'\U0010FFFF';
	}

	/// @}

	/// \addtogroup	is_combining_mark	is_combining_mark()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a combining mark code point.
	MUU_CONST_GETTER
	constexpr bool is_combining_mark(char32_t c) noexcept
	{
		// 2437 code units from 313 ranges (spanning a search area of 917232)
		
		if (c < U'\u0300' || c > U'\U000E01EF')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0x300ull) / 0x37FCull;
		if ((1ull << child_index_0) & 0x7FFFFFFFFFFFFE02ull)
			return false;
		switch (child_index_0)
		{
			case 0x00: // [0] 0300 - 3AFB
			{
				// 1143 code units from 159 ranges (spanning a search area of 11675)
				
				if (c > U'\u309A')
					return false;
				MUU_ASSUME(c >= U'\u0300');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0x0000FFFFFFFFFFFFu,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x00000000000000F8u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0xBFFFFFFFFFFE0000u,	0x00000000000000B6u,
					0x0000000007FF0000u,	0x00010000FFFFF800u,	0x0000000000000000u,	0x00003D9F9FC00000u,
					0xFFFF000000020000u,	0x00000000000007FFu,	0x0001FFC000000000u,	0x200FF80000000000u,
					0x00003EEFFBC00000u,	0x000000000E000000u,	0x00000000FF000000u,	0xFFFFFFFBFFFFFC00u,
					0xDC0000000000000Fu,	0x0000000C00FEFFFFu,	0xD00000000000000Eu,	0x4000000C0080399Fu,
					0xD00000000000000Eu,	0x0023000000023987u,	0xD00000000000000Eu,	0xFC00000C00003BBFu,
					0xD00000000000000Eu,	0x0000000C00E0399Fu,	0xC000000000000004u,	0x0000000000803DC7u,
					0xD00000000000001Fu,	0x0000000C00603DDFu,	0xD00000000000000Eu,	0x0008000C00603DDFu,
					0xD80000000000000Fu,	0x0000000C00803DDFu,	0x000000000000000Eu,	0x000C0000FF5F8400u,
					0x07F2000000000000u,	0x0000000000007F80u,	0x1FF2000000000000u,	0x0000000000007F00u,
					0xC2A0000003000000u,	0xFFFE000000000000u,	0x1FFFFFFFFEFFE0DFu,	0x0000000000000040u,
					0x7FFFF80000000000u,	0x001E3F9DC3C00000u,	0x000000003C00BFFCu,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x00000000E0000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x001C0000003C0000u,	0x000C0000000C0000u,	0xFFF0000000000000u,	0x00000000200FFFFFu,
					0x000000000000B800u,	0x0000000000000000u,	0x0000020000000060u,	0x0000000000000000u,
					0x0FFF0FFF00000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x000000000F800000u,	0x9FFFFFFF7FE00000u,	0xBFFF000000000000u,	0x0000000000007FFFu,
					0xFFF000000000001Fu,	0x000FF8000000001Fu,	0x00003FFE00000007u,	0x000FFFC000000000u,
					0x00FFFFF000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x039021FFFFF70000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0xFFFFFFFFFFFFFFFFu,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0001FFE21FFF0000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0003800000000000u,
					0x0000000000000000u,	0x8000000000000000u,	0x0000000000000000u,	0xFFFFFFFF00000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000FC0000000000u,	0x0000000000000000u,	0x0000000006000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x300ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				
			}
			case 0x02: // [2] 72F8 - AAF3
			{
				// 137 code units from 28 ranges (spanning a search area of 1153)
				
				if (c < U'\uA66F' || c > U'\uAAEF')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0001800000007FE1u,	0x0000000000000000u,	0x0000000000000006u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x21F0000010880000u,	0x0000000000000000u,
					0x0000000000060000u,	0xFFFE0000007FFFE0u,	0x7F80000000010007u,	0x0000001FFF000000u,
					0x00000000001E0000u,	0x004000000003FFF0u,	0xFC00000000000000u,	0x00000000601000FFu,
					0x0000000000007000u,	0xF00000000005833Au,	0x0000000000000001u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA66Full) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA66Full) % 0x40ull));
				
			}
			case 0x03: return (U'\uAAF5' <= c && c <= U'\uAAF6') || (U'\uABE3' <= c && c <= U'\uABEA') || (U'\uABEC' <= c && c <= U'\uABED');
			case 0x04: // [4] E2F0 - 11AEB
			{
				// 414 code units from 69 ranges (spanning a search area of 8060)
				
				if (c < U'\uFB1E' || c > U'\U00011A99')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000000000000001u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0003FFFC00000000u,
					0x000000000003FFFCu,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000080000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000004u,
					0x0000000000000000u,	0x000000001F000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0003C1B800000000u,
					0x000000021C000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000180u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x00000000000003C0u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000006000u,	0x0000000380000000u,
					0x0007FF0000000000u,	0x000000F000000000u,	0x0000000000000000u,	0x0000001C00000000u,
					0x000001FFFC000000u,	0x0000001E00640000u,	0x000000101FFC0000u,	0x0000001C00000000u,
					0x00000180007FFE00u,	0x0000001C00200000u,	0x00037807FFE00000u,	0x0000000000000000u,
					0x0000000903FFC000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000003C00001FFEu,
					0x0200E67F60000000u,	0x00000000007C7F30u,	0x0000000000000000u,	0x0000000000000000u,
					0x000001FFFF800000u,	0x0000000000000001u,	0x0000003FFFFC0000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0xC0000007FCFE0000u,	0x0000000000000000u,
					0x00000007FFFC0000u,	0x0000000000000000u,	0x0000000003FFE000u,	0x8000000000000000u,
					0x0000000000003FFFu,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x000000001FFFC000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x00000035E6FC0000u,	0x0000000000000000u,	0xF3F8000000000000u,	0x00001FF800000047u,
					0x3FF80201EFE00000u,	0x0FFFF00000000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xFB1Eull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xFB1Eull) % 0x40ull));
				
			}
			case 0x05: // [5] 11AEC - 152E7
			{
				// 116 code units from 19 ranges (spanning a search area of 6183)
				
				if (c < U'\U00011C2F' || c > U'\U00013455')
					return false;
				
				const auto child_index_1 = (static_cast<uint_least64_t>(c) - 0x11C2Full) / 0x61ull;
				if ((1ull << child_index_1) & 0x7FFFFFFFFFFFFE70ull)
					return false;
				switch (child_index_1)
				{
					case 0x00: return c <= U'\U00011C3F' && (1u << (static_cast<uint_least32_t>(c) - 0x11C2Fu)) & 0x1FEFFu;
					case 0x01: return c >= U'\U00011C92' && c <= U'\U00011CB6'
						&& (1ull << (static_cast<uint_least64_t>(c) - 0x11C92ull)) & 0x1FFFBFFFFFull;
					case 0x02: return c >= U'\U00011D31' && c <= U'\U00011D47'
						&& (1u << (static_cast<uint_least32_t>(c) - 0x11D31u)) & 0x5FDA3Fu;
					case 0x03: return c >= U'\U00011D8A' && c <= U'\U00011D97' && (1u << (static_cast<uint_least32_t>(c) - 0x11D8Au)) & 0x3EDFu;
					case 0x07: // [7] 11ED6 - 11F36
					{
						// 10 code units from 4 ranges (spanning a search area of 68)
						
						if (c < U'\U00011EF3')
							return false;
						MUU_ASSUME(c <= U'\U00011F36');
						
						switch ((static_cast<uint_least64_t>(c) - 0x11EF3ull) / 0x40ull)
						{
							case 0x00: return c <= U'\U00011F03' && (1u << (static_cast<uint_least32_t>(c) - 0x11EF3u)) & 0x1600Fu;
							case 0x01: return c != U'\U00011F33';
							default: MUU_UNREACHABLE;
						}
						
						MUU_UNREACHABLE;
					}
					case 0x08: return c <= U'\U00011F42' && (1u << (static_cast<uint_least32_t>(c) - 0x11F37u)) & 0xF8Fu;
					case 0x3F: return c >= U'\U00013440' && (1u << (static_cast<uint_least32_t>(c) - 0x13440u)) & 0x3FFF81u;
					default: MUU_UNREACHABLE;
				}
				
				MUU_UNREACHABLE;
			}
			case 0x06: // [6] 152E8 - 18AE3
			{
				// 75 code units from 7 ranges (spanning a search area of 1282)
				
				if (c < U'\U00016AF0' || c > U'\U00016FF1')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x000000000000001Fu,	0x000000000000007Fu,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0xFFFFFFFE80000000u,	0x0000000780FFFFFFu,	0x0010000000000000u,
					0x0000000000000003u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x16AF0ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x16AF0ull) % 0x40ull));
				
			}
			case 0x07: return c >= U'\U0001BC9D' && c <= U'\U0001BC9E';
			case 0x08: // [8] 1C2E0 - 1FADB
			{
				// 298 code units from 26 ranges (spanning a search area of 6731)
				
				if (c < U'\U0001CF00' || c > U'\U0001E94A')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFF3FFFFFFFFFFFu,	0x000000000000007Fu,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0xF807E3E000000000u,	0x00003C0000000FE7u,	0x0000000000000000u,
					0x0000000000000000u,	0x000000000000001Cu,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0xF87FFFFFFFFFFFFFu,	0x00201FFFFFFFFFFFu,	0x0000FFFEF8000010u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x000007DBF9FFFF7Fu,	0x0000000000000000u,	0x0000000000008000u,	0x0000000000000000u,
					0x007F000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000400000000000u,	0x0000F00000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000F00000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x00000000007F0000u,
					0x0000000000000000u,	0x00000000000007F0u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1CF00ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				
			}
			case 0x3F: return c >= U'\U000E0100';
			default: MUU_UNREACHABLE;
		}
		
		MUU_UNREACHABLE;
	}

	/// @}

	/// \addtogroup	is_decimal_digit	is_decimal_digit()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a decimal digit code point.
	MUU_CONST_GETTER
	constexpr bool is_decimal_digit(char32_t c) noexcept
	{
		return c >= U'0' && c <= U'9';
	}

	/// @}

	/// \addtogroup	is_hexadecimal_digit	is_hexadecimal_digit()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a hexadecimal digit code point.
	MUU_CONST_GETTER
	constexpr bool is_hexadecimal_digit(char32_t c) noexcept
	{
		return c >= U'0' && c <= U'f' && (1ull << (static_cast<uint_least64_t>(c) - 0x30ull)) & 0x7E0000007E03FFull;
	}

	/// @}

	/// \addtogroup	is_hyphen	is_hyphen()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a hyphen code point.
	MUU_CONST_GETTER
	constexpr bool is_hyphen(char32_t c) noexcept
	{
		return is_ascii_hyphen(c) || is_non_ascii_hyphen(c);
	}

	/// @}

	/// \addtogroup	is_letter	is_letter()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a letter code point.
	MUU_CONST_GETTER
	constexpr bool is_letter(char32_t c) noexcept
	{
		return is_ascii_letter(c) || is_non_ascii_letter(c);
	}

	/// @}

	/// \addtogroup	is_lowercase	is_lowercase()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a lowercase code point.
	MUU_CONST_GETTER
	constexpr bool is_lowercase(char32_t c) noexcept
	{
		return is_ascii_lowercase(c) || is_non_ascii_lowercase(c);
	}

	/// @}

	/// \addtogroup	is_number	is_number()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a number code point.
	MUU_CONST_GETTER
	constexpr bool is_number(char32_t c) noexcept
	{
		return is_ascii_number(c) || is_non_ascii_number(c);
	}

	/// @}

	/// \addtogroup	is_octal_digit	is_octal_digit()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is an octal digit code point.
	MUU_CONST_GETTER
	constexpr bool is_octal_digit(char32_t c) noexcept
	{
		return c >= U'0' && c <= U'7';
	}

	/// @}

	/// \addtogroup	is_uppercase	is_uppercase()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is an uppercase code point.
	MUU_CONST_GETTER
	constexpr bool is_uppercase(char32_t c) noexcept
	{
		return is_ascii_uppercase(c) || is_non_ascii_uppercase(c);
	}

	/// @}

	/// \addtogroup	is_whitespace	is_whitespace()
	/// @{

	/// \brief		Returns true if a UTF-32 code unit is a whitespace code point.
	MUU_CONST_GETTER
	constexpr bool is_whitespace(char32_t c) noexcept
	{
		return is_ascii_whitespace(c) || is_non_ascii_whitespace(c);
	}

	/// @}

	/** @} */	// strings::code_units
	/** @} */	// strings
}

#if !MUU_GCC || MUU_GCC >= 9
	MUU_RESET_NDEBUG_OPTIMIZATIONS;
#endif
#include "header_end.h"

#endif // MUU_UNICODE_CHAR32_T_H
// clang-format on
