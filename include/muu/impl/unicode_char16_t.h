// This file is a part of muu and is subject to the the terms of the MIT license.
// Copyright (c) Mark Gillard <mark.gillard@outlook.com.au>
// See https://github.com/marzer/muu/blob/master/LICENSE for the full license text.
// SPDX-License-Identifier: MIT
//-----
// this file was generated by generate_unicode_functions.py - do not modify it directly
// clang-format off

#pragma once
#include "../fwd.h"
#include "header_start.h"
MUU_DISABLE_SWITCH_WARNINGS;
#if !MUU_GCC || MUU_GCC >= 9
	MUU_FORCE_NDEBUG_OPTIMIZATIONS;
#else
	MUU_PRAGMA_GCC(optimize("O1"))
#endif

namespace muu
{
	/// \addtogroup strings
	/// @{

	/// \addtogroup code_units
	/// @{

	/// \addtogroup	is_ascii_code_point	is_ascii_code_point()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a valid code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_code_point(char16_t c) noexcept
	{
		return c <= u'\x7F';
	}

	/// @}

	/// \addtogroup	is_ascii_hyphen	is_ascii_hyphen()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a hyphen code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_hyphen(char16_t c) noexcept
	{
		return c == u'-';
	}

	/// @}

	/// \addtogroup	is_ascii_letter	is_ascii_letter()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a letter code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_letter(char16_t c) noexcept
	{
		return (u'A' <= c && c <= u'Z') || (u'a' <= c && c <= u'z');
	}

	/// @}

	/// \addtogroup	is_ascii_lowercase	is_ascii_lowercase()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a lowercase code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_lowercase(char16_t c) noexcept
	{
		return u'a' <= c && c <= u'z';
	}

	/// @}

	/// \addtogroup	is_ascii_number	is_ascii_number()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a number code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_number(char16_t c) noexcept
	{
		return u'0' <= c && c <= u'9';
	}

	/// @}

	/// \addtogroup	is_ascii_uppercase	is_ascii_uppercase()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is an uppercase code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_uppercase(char16_t c) noexcept
	{
		return u'A' <= c && c <= u'Z';
	}

	/// @}

	/// \addtogroup	is_ascii_whitespace	is_ascii_whitespace()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a whitespace code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_whitespace(char16_t c) noexcept
	{
		return (u'\t' <= c && c <= u'\r') || c == u' ';
	}

	/// @}

	/// \addtogroup	is_non_ascii_code_point	is_non_ascii_code_point()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a valid code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_code_point(char16_t c) noexcept
	{
		return (u'\x80' <= c && c <= u'\uD7FF') || u'\uE000' <= c;
	}

	/// @}

	/// \addtogroup	is_non_ascii_hyphen	is_non_ascii_hyphen()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a hyphen code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_hyphen(char16_t c) noexcept
	{
		if (u'\xAD' > c || c > u'\uFF65')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0xADull) / 0x3FBull;
		if ((1ull << child_index_0) & 0x7FFFFFFFFFFFE75Cull)
			return false;
		if (c == u'\xAD' || c == u'\u058A' || c == u'\u1806' || c == u'\u2E17' || c == u'\u30FB')
			return true;
		switch (child_index_0)
		{
			case 0x07: return u'\u2010' <= c && c <= u'\u2011';
			case 0x3F: return c == u'\uFE63' || c == u'\uFF0D' || c == u'\uFF65';
			default: MUU_UNREACHABLE;
		}
		// 10 code units from 9 ranges (spanning a search area of 65209)
		MUU_UNREACHABLE;
	}

	/// @}

	/// \addtogroup	is_non_ascii_letter	is_non_ascii_letter()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a letter code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_letter(char16_t c) noexcept
	{
		if (u'\xAA' > c || c > u'\uFFDC')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0xAAull) / 0x3FDull;
		if ((1ull << child_index_0) & 0x3FC0000000000200ull)
			return false;
		if ((1ull << child_index_0) & 0x1FF97FFFF7E000ull)
			return true;
		switch (child_index_0)
		{
			case 0x00: // [0] 00AA - 04A6
			{
				MUU_ASSUME(u'\xAA' <= c && c <= u'\u04A6');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFDFFFFFC10801u,	0xFFFFFFFFFFFFDFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0x07C000FFF0FFFFFFu,	0x0000000000000014u,	0x0000000000000000u,	0xFEFFFFF5D02F37C0u,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFEFFFu,	0xFFFFFFFFFFFFFFFFu,	0x1FFFFFFF00FFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xAAull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xAAull) % 0x40ull));
				// 822 code units from 21 ranges (spanning a search area of 1021)
			}
			case 0x01: // [1] 04A7 - 08A3
			{
				MUU_ASSUME(u'\u04A7' <= c && c <= u'\u08A3');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFE04FFFFFFFFFDFFu,	0x00000003FFFFFFFFu,
					0xFFFFFE0000000000u,	0xFE00000000000F0Fu,	0x0000000FFFFFFFFFu,	0xFFFFFFFFFFFFFD80u,
					0xC0005FFFFFFFFFFFu,	0xFFFFFA0001380180u,	0xFFFFFFC0000001FFu,	0x7FFFFFFFFFFFFFFFu,
					0xFFFFFFF800000400u,	0x20087FFFFE08600Fu,	0xFE03FFFFFE000002u,	0x1E0000000000000Fu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x4A7ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x4A7ull) % 0x40ull));
				// 623 code units from 28 ranges (spanning a search area of 1021)
			}
			case 0x02: // [2] 08A4 - 0CA0
			{
				MUU_ASSUME(u'\u08A4' <= c && c <= u'\u0CA0');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000000FFFFDFFFFu,	0xFFFFFFFF00000000u,	0x3FF01000023FFFFFu,	0xFFFF99FE1FFFE000u,
					0x3B000400023C5FDFu,	0xFFFF987E01003000u,	0x05E000000036DFDFu,	0xFFFFBBFE0001C000u,
					0x30001000023EDFDFu,	0xFFFF99FE00200000u,	0x3B000000023EDFDFu,	0x8D63DC7E80002000u,
					0x00001000003FFC71u,	0xFFFFDDFE00000000u,	0x30700000023FFFDFu,	0x1FFFDDFE10000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x8A4ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x8A4ull) % 0x40ull));
				// 448 code units from 71 ranges (spanning a search area of 1021)
			}
			case 0x03: // [3] 0CA1 - 109D
			{
				if (c > u'\u108E')
					return false;
				MUU_ASSUME(u'\u0CA1' <= c);
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xA000000011F7FEFFu,	0xFFFEEFF800030001u,	0xC038200013FFFFFFu,	0xFE3FFFF07E000001u,
					0x0000003F97FDFFFFu,	0xFFFFFFFF00000000u,	0x0000003F8006FFFFu,	0xFFFFFBEB00000000u,
					0x7800002F9006FFD7u,	0x0000000080000000u,	0xFFFFFF7F80000000u,	0x00000F8000000FFFu,
					0x0000000000000000u,	0xFFFFFFFF80000000u,	0x1E1F8000400003FFu,	0x00002001FFF0E031u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xCA1ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xCA1ull) % 0x40ull));
				// 392 code units from 47 ranges (spanning a search area of 1006)
			}
			case 0x04: // [4] 109E - 149A
			{
				if (u'\u10A0' > c)
					return false;
				MUU_ASSUME(c <= u'\u149A');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFF20BFFFFFFFFFu,	0xFFFFFFFFF7FFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x3D7F3DFFFFFFFFFFu,	0xFFFF3DFFFFFFFFFFu,
					0xFF7FFF3D7F3DFFFFu,	0xFF3DFFFFFFFFFFFFu,	0x07FFFFFFFFFFFFFFu,	0x0000FFFF00000000u,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFE3F3FFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x07FFFFFFFFFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x10A0ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x10A0ull) % 0x40ull));
				// 931 code units from 24 ranges (spanning a search area of 1019)
			}
			case 0x05: // [5] 149B - 1897
			{
				MUU_ASSUME(u'\u149B' <= c && c <= u'\u1897');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFDFFFF3FFFFu,
					0xFFFFFFFFFFFFFFE0u,	0x007BFFE03FC0FFFFu,	0x007FFFE0007FFFE0u,	0xFFFFFFE0003BFFE0u,
					0x1000000001FFFFFFu,	0x0000000000000002u,	0xFFFFFFFFFFFFFFE0u,	0x1FFFF3E03FFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x149Bull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x149Bull) % 0x40ull));
				// 826 code units from 17 ranges (spanning a search area of 1021)
			}
			case 0x06: // [6] 1898 - 1C94
			{
				MUU_ASSUME(u'\u1898' <= c && c <= u'\u1C94');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFF05FFFFu,	0xFFFFFF003FFFFFFFu,	0xFF0000000000007Fu,	0xFFFFFF001F3FFFFFu,
					0x0003FFFFFF0FFFFFu,	0x7FFFFF0000000000u,	0x1FFFFFFFFFFFFF00u,	0x0000000000000000u,
					0x0000000000008000u,	0xFFFFE00000000000u,	0x000FE0000FFFFFFFu,	0xFFFFF80000000000u,
					0xFFFFFFFC00C001FFu,	0xFFFFFF0000003FFFu,	0x00E0000000000FFFu,	0x1F01FF3FFFFFFFFCu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1898ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1898ull) % 0x40ull));
				// 520 code units from 21 ranges (spanning a search area of 1021)
			}
			case 0x07: // [7] 1C95 - 2091
			{
				MUU_ASSUME(u'\u1C95' <= c && c <= u'\u2091');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000073FFFFFFFFFu,	0xFFFFF8237EF00000u,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0x000007FFFFFFFFFFu,	0xFFFFF80000000000u,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xF9F9FFFFFFFFF9F9u,	0xFFFFF9FFFFFFFD57u,
					0x78FEE2FEFFFFFFFFu,	0x000000FEE0FFF87Eu,	0x0000000000000000u,	0x1800040010000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1C95ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1C95ull) % 0x40ull));
				// 724 code units from 29 ranges (spanning a search area of 1021)
			}
			case 0x08: // [8] 2092 - 248E
			{
				if (c > u'\u2184')
					return false;
				MUU_ASSUME(u'\u2092' <= c);
				
				switch ((static_cast<uint_least64_t>(c) - 0x2092ull) / 0x40ull)
				{
					case 0x00: return c <= u'\u209C';
					case 0x01: return u'\u2102' <= c && (1u << (static_cast<uint_least32_t>(c) - 0x2102u)) & 0xFF21u;
					case 0x02: return c <= u'\u214E' && (1ull << (static_cast<uint_least64_t>(c) - 0x2112u)) & 0x10F83CFFEF540F8Bull;
					case 0x03: return u'\u2183' <= c;
					default: MUU_UNREACHABLE;
				}
				// 59 code units from 15 ranges (spanning a search area of 243)
				MUU_UNREACHABLE;
			}
			case 0x0A: return (u'\u2C00' <= c && c <= u'\u2C2E') || (u'\u2C30' <= c && c <= u'\u2C5E') || u'\u2C60' <= c;
			case 0x0B: // [11] 2C89 - 3085
			{
				MUU_ASSUME(u'\u2C89' <= c && c <= u'\u3085');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFF80063C0FFFFFFFu,	0xFFFFFF905FFFFFFFu,	0xFF8000407FFFFFFFu,
					0xBFBFBFBFBF803FFFu,	0x00000000003FBFBFu,	0x0000004000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x3000000000000000u,	0xFF0C1F0000000000u,	0x1FFFFFFFFFFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x2C89ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x2C89ull) % 0x40ull));
				// 353 code units from 22 ranges (spanning a search area of 1021)
			}
			case 0x0C: // [12] 3086 - 3482
			{
				MUU_ASSUME(u'\u3086' <= c && c <= u'\u3482');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFB81FFFFu,	0x83DFFFFFFFFFFFFFu,	0xFFFFFBFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0x03FFFFFFFC0001FFu,	0x03FFFC0000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0xFC00000000000000u,	0xFFFFFFFFFFFFFFFFu,	0x1FFFFFFFFFFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x3086ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x3086ull) % 0x40ull));
				// 430 code units from 9 ranges (spanning a search area of 1021)
			}
			case 0x13: return c <= u'\u4DBF' || u'\u4E00' <= c;
			case 0x27: return c <= u'\u9FFC' || u'\uA000' <= c;
			case 0x29: // [41] A42F - A82B
			{
				if (c > u'\uA822')
					return false;
				MUU_ASSUME(u'\uA42F' <= c);
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0x000000003FFFFFFFu,	0xFFFFFFFE00000000u,	0xFFFFFFFFFFFE7FFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x1801FFFE3FFFFFFFu,
					0xFFFFFFFFFFFE0000u,	0xFFFE7FFFFFFF0000u,	0x007FFFFFFFFFFFFFu,	0xFFF9FF0000000000u,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFF3FFFFFFu,	0x000000000FF9FFFFu,	0x000FFFFFEF77FFC0u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA42Full) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA42Full) % 0x40ull));
				// 792 code units from 16 ranges (spanning a search area of 1012)
			}
			case 0x2A: // [42] A82C - AC28
			{
				if (u'\uA840' > c)
					return false;
				MUU_ASSUME(c <= u'\uAC28');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x000FFFFFFFFFFFFFu,	0x000FFFFFFFFFFFFCu,	0x68FC000000000000u,	0xFFFF003FFFFFFC00u,
					0x1FFFFFFF0000007Fu,	0x0007FFFFFFFFFFF0u,	0x7C00FFDF00008000u,	0x000001FFFFFFFFFFu,
					0xC47FFFFF00000FF7u,	0x3E62FFFFFFFFFFFFu,	0x001C07FF38000005u,	0xFFFF7F7F007E7E7Eu,
					0xFFFF03FFF7FFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x00000007FFFFFFFFu,	0x000001FFFFFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA840ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				// 657 code units from 36 ranges (spanning a search area of 1001)
			}
			case 0x35: return c <= u'\uD7A3' || (u'\uD7B0' <= c && c <= u'\uD7C6') || (u'\uD7CB' <= c && c <= u'\uD7FB');
			case 0x3E: // [62] F7F0 - FBEC
			{
				if (u'\uF900' > c)
					return false;
				MUU_ASSUME(c <= u'\uFBEC');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFF3FFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x0000000003FFFFFFu,
					0x5F7FFDFFA0F8007Fu,	0xFFFFFFFFFFFFFFDBu,	0x0003FFFFFFFFFFFFu,	0x00001FFFFFF80000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xF900ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				// 652 code units from 13 ranges (spanning a search area of 749)
			}
			case 0x3F: // [63] FBED - FFDC
			{
				MUU_ASSUME(u'\uFBED' <= c && c <= u'\uFFDC');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFF80001FFFFu,	0xFFFFFFE7FFFFFFFFu,	0x0000000007FFFFFFu,
					0x0000000000007FF8u,	0x0000000000000000u,	0xFFFFFFFFFFFFFEF8u,	0xFFFFFFFFFFFFFFFFu,
					0xFFF000000000FFFFu,	0xFE003FFFFFF03FFFu,	0xFFFFFFFFFFFFFFFFu,	0x0000E7E7E7E3FFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xFBEDull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xFBEDull) % 0x40ull));
				// 769 code units from 13 ranges (spanning a search area of 1008)
			}
			default: MUU_UNREACHABLE;
		}
		// 48857 code units from 378 ranges (spanning a search area of 65331)
		MUU_UNREACHABLE;
	}

	/// @}

	/// \addtogroup	is_non_ascii_lowercase	is_non_ascii_lowercase()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a lowercase code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_lowercase(char16_t c) noexcept
	{
		if (u'\xAA' > c || c > u'\uFF5A')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0xAAull) / 0x3FBull;
		if ((1ull << child_index_0) & 0x3FFFF9FFFFFFF02Cull)
			return false;
		switch (child_index_0)
		{
			case 0x00: // [0] 00AA - 04A4
			{
				if (c > u'\u04A3')
					return false;
				MUU_ASSUME(u'\xAA' <= c);
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFE0000000010801u,	0xAAAAAAAAAABFDFFFu,	0xAAAAAAAAD5556AAAu,	0x4A93890C4A752AAAu,
					0xAAAD55549039944Bu,	0xAAAAAAAAAAAA8A6Au,	0xFFFFFFEAA164FEAAu,	0xFFFFFBFFFFFFFFFFu,
					0x07C0000000C07FFFu,	0x0000000000000000u,	0x0000000008000000u,	0x00000040000F2280u,
					0xAAAAB8DFFFFFFFFCu,	0x0000000000064BEAu,	0xAABFFFFFFFFFFFC0u,	0x02AAAAAA00AAAAAAu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xAAull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xAAull) % 0x40ull));
				// 454 code units from 204 ranges (spanning a search area of 1018)
			}
			case 0x01: // [1] 04A5 - 089F
			{
				if (c > u'\u0588')
					return false;
				MUU_ASSUME(u'\u04A5' <= c);
				
				switch ((static_cast<uint_least64_t>(c) - 0x4A5ull) / 0x40ull)
				{
					case 0x00: return c <= u'\u04E3' && (1ull << (static_cast<uint_least64_t>(c) - 0x4A5u)) & 0x555556AAA5555555ull;
					case 0x01: return c <= u'\u0523' && ((static_cast<uint_least32_t>(c) + 1u) % 2u) == 0u;
					case 0x02: return (1ull << (static_cast<uint_least64_t>(c) - 0x525u)) & 0xF800000000000555ull;
					default: return true;
				}
				// 111 code units from 70 ranges (spanning a search area of 228)
				MUU_UNREACHABLE;
			}
			case 0x04: return (u'\u10D0' <= c && c <= u'\u10FA') || (u'\u10FD' <= c && c <= u'\u10FF') || (u'\u13F8' <= c && c <= u'\u13FD');
			case 0x06: return u'\u1C80' <= c;
			case 0x07: // [7] 1C87 - 2081
			{
				if (c > u'\u207F')
					return false;
				MUU_ASSUME(u'\u1C87' <= c);
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000000000000003u,	0xFE00000000000000u,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0x01FFFFFFFFFFFFFFu,	0x5400000000000000u,	0x5555555555555555u,	0x5555555555555555u,
					0x55555555557FD555u,	0xFF55555555555555u,	0x7E01FE01FE007E01u,	0xFE7FFE01FE01FE00u,
					0xB881BE01FE01FE01u,	0x0001B801FE019E01u,	0x0000000000000000u,	0x0100040000000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1C87ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1C87ull) % 0x40ull));
				// 450 code units from 148 ranges (spanning a search area of 1017)
			}
			case 0x08: // [8] 2082 - 247C
			{
				if (u'\u2090' > c || c > u'\u2184')
					return false;
				
				switch ((static_cast<uint_least64_t>(c) - 0x2090ull) / 0x40ull)
				{
					case 0x00: return c <= u'\u209C';
					case 0x01: return u'\u210A' <= c && (1u << (static_cast<uint_least32_t>(c) - 0x210Au)) & 0x31u;
					case 0x02: return u'\u2113' <= c && c <= u'\u214E'
						&& (1ull << (static_cast<uint_least64_t>(c) - 0x2113u)) & 0x878064210000001ull;
					case 0x03: return (u'\u2170' <= c && c <= u'\u217F') || c == u'\u2184';
					default: MUU_UNREACHABLE;
				}
				// 44 code units from 12 ranges (spanning a search area of 245)
				MUU_UNREACHABLE;
			}
			case 0x09: return u'\u24D0' <= c && c <= u'\u24E9';
			case 0x0A: // [10] 2878 - 2C72
			{
				if (u'\u2C30' > c || c > u'\u2C71')
					return false;
				
				return c == u'\u2C71'
					|| (c <= u'\u2C6C' && (1ull << (static_cast<uint_least64_t>(c) - 0x2C30u)) & 0x15627FFFFFFFFFFFull);
			}
			case 0x0B: // [11] 2C73 - 306D
			{
				if (c > u'\u2D2D')
					return false;
				MUU_ASSUME(u'\u2C73' <= c);
				
				switch ((static_cast<uint_least64_t>(c) - 0x2C73ull) / 0x40ull)
				{
					case 0x00: return c <= u'\u2CB1' && (1ull << (static_cast<uint_least64_t>(c) - 0x2C73u)) & 0x55555555555547FBull;
					case 0x01: return c <= u'\u2CEE' && (1ull << (static_cast<uint_least64_t>(c) - 0x2CB3u)) & 0xA03555555555555ull;
					case 0x02: return (u'\u2D00' <= c && c <= u'\u2D25') || c == u'\u2CF3' || c == u'\u2D27' || c == u'\u2D2D';
					default: MUU_UNREACHABLE;
				}
				// 104 code units from 58 ranges (spanning a search area of 187)
				MUU_UNREACHABLE;
			}
			case 0x29: // [41] A3DD - A7D7
			{
				if (u'\uA641' > c || c > u'\uA7CA')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000155555555555u,	0x000000001D555555u,	0x0000000000000000u,	0x5555D55400000000u,
					0x4AFFD55555555555u,	0x55504155555D2855u,	0x0000000000000284u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA641ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA641ull) % 0x40ull));
				// 121 code units from 106 ranges (spanning a search area of 394)
			}
			case 0x2A: // [42] A7D8 - ABD2
			{
				if (u'\uA7F6' > c || c > u'\uABBF')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x000000000000001Du,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0xFC00000000000000u,	0xFC07FFDFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x00000000000003FFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA7F6ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA7F6ull) % 0x40ull));
				// 140 code units from 5 ranges (spanning a search area of 970)
			}
			case 0x3E: return u'\uFB00' <= c && c <= u'\uFB17' && (1u << (static_cast<uint_least32_t>(c) - 0xFB00u)) & 0xF8007Fu;
			case 0x3F: return u'\uFF41' <= c;
			default: MUU_UNREACHABLE;
		}
		// 1601 code units from 617 ranges (spanning a search area of 65201)
		MUU_UNREACHABLE;
	}

	/// @}

	/// \addtogroup	is_non_ascii_number	is_non_ascii_number()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a number code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_number(char16_t c) noexcept
	{
		if (u'\u0660' > c || c > u'\uFF19')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0x660ull) / 0x3E3ull;
		if ((1ull << child_index_0) & 0x7FFFF9FFFFFFFB88ull)
			return false;
		switch (child_index_0)
		{
			case 0x00: // [0] 0660 - 0A42
			{
				if (c > u'\u09EF')
					return false;
				MUU_ASSUME(u'\u0660' <= c);
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x0000000000000000u,	0x0000000003FF0000u,	0x0000000000000000u,
					0x0000000000000000u,	0x000003FF00000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x000000000000FFC0u,	0x0000000000000000u,	0x000000000000FFC0u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x660ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x660ull) % 0x40ull));
				// 50 code units from 5 ranges (spanning a search area of 912)
			}
			case 0x01: // [1] 0A43 - 0E25
			{
				if (u'\u0A66' > c || c > u'\u0DEF')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x0000000000000000u,	0x00000000000003FFu,	0x0000000000000000u,
					0x00000000000003FFu,	0x0000000000000000u,	0x00000000000003FFu,	0x0000000000000000u,
					0x00000000000003FFu,	0x0000000000000000u,	0x00000000000003FFu,	0x0000000000000000u,
					0x00000000000003FFu,	0x0000000000000000u,	0x00000000000003FFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA66ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA66ull) % 0x40ull));
				// 80 code units from 8 ranges (spanning a search area of 906)
			}
			case 0x02: // [2] 0E26 - 1208
			{
				if (u'\u0E50' > c || c > u'\u1099')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x0000000000000000u,	0x00000000000003FFu,	0x0000000003FF0000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x03FF000000000000u,
					0x0000000000000000u,	0x00000000000003FFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xE50ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xE50ull) % 0x40ull));
				// 50 code units from 5 ranges (spanning a search area of 586)
			}
			case 0x04: // [4] 15EC - 19CE
			{
				if (u'\u16EE' > c || c > u'\u194F')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000000000000007u,	0x0000000000000000u,	0x0000000000000000u,	0x0FFC000000000000u,
					0x00000FFC00000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x00000003FF000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x16EEull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x16EEull) % 0x40ull));
				// 33 code units from 4 ranges (spanning a search area of 610)
			}
			case 0x05: // [5] 19CF - 1DB1
			{
				if (u'\u19D0' > c || c > u'\u1C59')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x0000000000000000u,	0x03FF000000000000u,	0x00000000000003FFu,
					0x0000000000000000u,	0x0000000000000000u,	0x00000000000003FFu,	0x000003FF00000000u,
					0x0000000000000000u,	0x03FF000000000000u,	0x00000000000003FFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x19D0ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x19D0ull) % 0x40ull));
				// 70 code units from 7 ranges (spanning a search area of 650)
			}
			case 0x06: return u'\u2160' <= c && c <= u'\u2188' && (1ull << (static_cast<uint_least64_t>(c) - 0x2160u)) & 0x1E7FFFFFFFFull;
			case 0x0A: return u'\u3007' <= c && c <= u'\u303A' && (1ull << (static_cast<uint_least64_t>(c) - 0x3007u)) & 0xE0007FC000001ull;
			case 0x29: // [41] A5BB - A99D
			{
				if (u'\uA620' > c || c > u'\uA909')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x0000000000000000u,	0x0000000000000000u,	0x000000000000FFC0u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x03FF000000000000u,	0x000003FF00000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA620ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA620ull) % 0x40ull));
				// 40 code units from 4 ranges (spanning a search area of 746)
			}
			case 0x2A: // [42] A99E - AD80
			{
				if (u'\uA9D0' > c || c > u'\uABF9')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x000003FF000003FFu,	0x0000000000000000u,	0x00000000000003FFu,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x000003FF00000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA9D0ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA9D0ull) % 0x40ull));
				// 40 code units from 4 ranges (spanning a search area of 554)
			}
			case 0x3F: return u'\uFF10' <= c;
			default: MUU_UNREACHABLE;
		}
		// 425 code units from 43 ranges (spanning a search area of 63674)
		MUU_UNREACHABLE;
	}

	/// @}

	/// \addtogroup	is_non_ascii_uppercase	is_non_ascii_uppercase()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is an uppercase code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_uppercase(char16_t c) noexcept
	{
		if (u'\xC0' > c || c > u'\uFF3A')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0xC0ull) / 0x3FAull;
		if ((1ull << child_index_0) & 0x7FFFF9FFFFFFF024ull)
			return false;
		switch (child_index_0)
		{
			case 0x00: // [0] 00C0 - 04B9
			{
				if (c > u'\u04B8')
					return false;
				MUU_ASSUME(u'\xC0' <= c);
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x000000007F7FFFFFu,	0xAA55555555555555u,	0x2B555555555554AAu,	0x11AED2D5B1DBCED6u,
					0x55D255554AAAA490u,	0x6C05555555555555u,	0x000000000000557Au,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x8045000000000000u,	0x00000FFBFFFED740u,
					0xE6905555551C8000u,	0x0000FFFFFFFFFFFFu,	0x5555555500000000u,	0x0155555555555401u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xC0ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				// 345 code units from 212 ranges (spanning a search area of 1017)
			}
			case 0x01: // [1] 04BA - 08B3
			{
				if (c > u'\u0556')
					return false;
				MUU_ASSUME(u'\u04BA' <= c);
				
				switch ((static_cast<uint_least64_t>(c) - 0x4BAull) / 0x40ull)
				{
					case 0x00: return c <= u'\u04F8' && (1ull << (static_cast<uint_least64_t>(c) - 0x4BAu)) & 0x55555555554AAAD5ull;
					case 0x01: return (1ull << (static_cast<uint_least64_t>(c) - 0x4FAu)) & 0xFF95555555555555ull;
					default: return true;
				}
				// 97 code units from 59 ranges (spanning a search area of 157)
				MUU_UNREACHABLE;
			}
			case 0x03: return u'\u10A0' <= c;
			case 0x04: // [4] 10A8 - 14A1
			{
				if (c > u'\u13F5')
					return false;
				MUU_ASSUME(u'\u10A8' <= c);
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000020BFFFFFFFu,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0xFF00000000000000u,
					0xFFFFFFFFFFFFFFFFu,	0x0000000000003FFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x10A8ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x10A8ull) % 0x40ull));
				// 118 code units from 4 ranges (spanning a search area of 846)
			}
			case 0x06: return u'\u1C90' <= c;
			case 0x07: // [7] 1C96 - 208F
			{
				if (c > u'\u1FFB')
					return false;
				MUU_ASSUME(u'\u1C96' <= c);
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000039FFFFFFFFFu,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x5555540000000000u,	0x5555555555555555u,	0x5555555555555555u,
					0x5555555555555500u,	0x03FC015555555555u,	0x00FC03FC03FC00FCu,	0x0000000003FC02A8u,
					0x003C003C00000000u,	0x0000003C007C003Cu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1C96ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1C96ull) % 0x40ull));
				// 233 code units from 141 ranges (spanning a search area of 870)
			}
			case 0x08: // [8] 2090 - 2489
			{
				if (u'\u2102' > c || c > u'\u2183')
					return false;
				
				if (c == u'\u2183')
					return true;
				switch ((static_cast<uint_least64_t>(c) - 0x2102ull) / 0x40ull)
				{
					case 0x00: return c <= u'\u213F' && (1ull << (static_cast<uint_least64_t>(c) - 0x2102u)) & 0x3003CF540F89CE21ull;
					case 0x01: return u'\u2145' <= c && c <= u'\u216F'
						&& (1ull << (static_cast<uint_least64_t>(c) - 0x2145u)) & 0x7FFF8000001ull;
					default: MUU_UNREACHABLE;
				}
				// 45 code units from 15 ranges (spanning a search area of 130)
				MUU_UNREACHABLE;
			}
			case 0x09: return u'\u24B6' <= c && c <= u'\u24CF';
			case 0x0A: // [10] 2884 - 2C7D
			{
				if (u'\u2C00' > c || c > u'\u2C75')
					return false;
				
				switch ((static_cast<uint_least64_t>(c) - 0x2C00ull) / 0x40ull)
				{
					case 0x00: return c <= u'\u2C2E';
					case 0x01: return u'\u2C60' <= c && (1u << (static_cast<uint_least32_t>(c) - 0x2C60u)) & 0x25EA9Du;
					default: MUU_UNREACHABLE;
				}
				// 60 code units from 9 ranges (spanning a search area of 118)
				MUU_UNREACHABLE;
			}
			case 0x0B: // [11] 2C7E - 3077
			{
				if (c > u'\u2CF2')
					return false;
				MUU_ASSUME(u'\u2C7E' <= c);
				
				switch ((static_cast<uint_least64_t>(c) - 0x2C7Eull) / 0x40ull)
				{
					case 0x00: return c <= u'\u2CBC' && (1ull << (static_cast<uint_least64_t>(c) - 0x2C7Eu)) & 0x5555555555555557ull;
					case 0x01: return (1ull << (static_cast<uint_least64_t>(c) - 0x2CBEu)) & 0x10A01555555555ull;
					default: MUU_UNREACHABLE;
				}
				// 55 code units from 53 ranges (spanning a search area of 117)
				MUU_UNREACHABLE;
			}
			case 0x29: // [41] A3CA - A7C3
			{
				if (u'\uA640' > c || c > u'\uA7C2')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000155555555555u,	0x0000000005555555u,	0x0000000000000000u,	0x5554555400000000u,
					0x6A00555555555555u,	0x555F7D5555452855u,	0x0000000000000004u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA640ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				// 113 code units from 104 ranges (spanning a search area of 387)
			}
			case 0x2A: return c <= u'\uA7F5' && (1ull << (static_cast<uint_least64_t>(c) - 0xA7C4u)) & 0x200000000002Full;
			case 0x3F: return u'\uFF21' <= c;
			default: MUU_UNREACHABLE;
		}
		// 1138 code units from 602 ranges (spanning a search area of 65147)
		MUU_UNREACHABLE;
	}

	/// @}

	/// \addtogroup	is_non_ascii_whitespace	is_non_ascii_whitespace()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a whitespace code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_whitespace(char16_t c) noexcept
	{
		if (u'\x85' > c || c > u'\u3000')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0x85ull) / 0xBEull;
		if ((1ull << child_index_0) & 0x7FFFFBFFDFFFFFFEull)
			return false;
		if (c == u'\u1680' || c == u'\u3000')
			return true;
		switch (child_index_0)
		{
			case 0x00: return c == u'\x85' || c == u'\xA0';
			case 0x2A: // [42] 1FB1 - 206E
			{
				if (u'\u2000' > c || c > u'\u205F')
					return false;
				
				return c == u'\u205F'
					|| (c <= u'\u202F' && (1ull << (static_cast<uint_least64_t>(c) - 0x2000u)) & 0x8300000007FFull);
			}
			default: MUU_UNREACHABLE;
		}
		// 19 code units from 8 ranges (spanning a search area of 12156)
		MUU_UNREACHABLE;
	}

	/// @}

	/// \addtogroup	is_not_code_point	is_not_code_point()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is not a valid code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_code_point(char16_t c) noexcept
	{
		return !is_ascii_code_point(c) && !is_non_ascii_code_point(c);
	}

	/// @}

	/// \addtogroup	is_not_hyphen	is_not_hyphen()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is not a hyphen code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_hyphen(char16_t c) noexcept
	{
		return !is_ascii_hyphen(c) && !is_non_ascii_hyphen(c);
	}

	/// @}

	/// \addtogroup	is_not_letter	is_not_letter()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is not a letter code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_letter(char16_t c) noexcept
	{
		return !is_ascii_letter(c) && !is_non_ascii_letter(c);
	}

	/// @}

	/// \addtogroup	is_not_lowercase	is_not_lowercase()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is not a lowercase code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_lowercase(char16_t c) noexcept
	{
		return !is_ascii_lowercase(c) && !is_non_ascii_lowercase(c);
	}

	/// @}

	/// \addtogroup	is_not_number	is_not_number()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is not a number code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_number(char16_t c) noexcept
	{
		return !is_ascii_number(c) && !is_non_ascii_number(c);
	}

	/// @}

	/// \addtogroup	is_not_uppercase	is_not_uppercase()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is not an uppercase code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_uppercase(char16_t c) noexcept
	{
		return !is_ascii_uppercase(c) && !is_non_ascii_uppercase(c);
	}

	/// @}

	/// \addtogroup	is_not_whitespace	is_not_whitespace()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is not a whitespace code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_whitespace(char16_t c) noexcept
	{
		return !is_ascii_whitespace(c) && !is_non_ascii_whitespace(c);
	}

	/// @}

	/// \addtogroup	is_code_point	is_code_point()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a valid code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_code_point(char16_t c) noexcept
	{
		return c <= u'\uD7FF' || u'\uE000' <= c;
	}

	/// @}

	/// \addtogroup	is_code_point_boundary	is_code_point_boundary()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a code point boundary.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_code_point_boundary(char16_t c) noexcept
	{
		return c <= 0xDBFFu || u'\uE000' <= c;
	}

	/// @}

	/// \addtogroup	is_combining_mark	is_combining_mark()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a combining mark code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_combining_mark(char16_t c) noexcept
	{
		if (u'\u0300' > c || c > u'\uFE2F')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0x300ull) / 0x3EDull;
		if ((1ull << child_index_0) & 0x7FFFF1FFFFFFF300ull)
			return false;
		switch (child_index_0)
		{
			case 0x00: // [0] 0300 - 06EC
			{
				MUU_ASSUME(u'\u0300' <= c && c <= u'\u06EC');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0x0000FFFFFFFFFFFFu,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x00000000000000F8u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0xBFFFFFFFFFFE0000u,	0x00000000000000B6u,
					0x0000000007FF0000u,	0x00010000FFFFF800u,	0x0000000000000000u,	0x00001D9F9FC00000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x300ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				// 219 code units from 14 ranges (spanning a search area of 1005)
			}
			case 0x01: // [1] 06ED - 0AD9
			{
				if (c > u'\u0ACD')
					return false;
				MUU_ASSUME(u'\u06ED' <= c);
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000001000000001u,	0x000000003FFFFFF8u,	0xFE00000000000000u,	0xC00000000000000Fu,
					0xF77FDE000001007Fu,	0x0000700000000001u,	0x0000000000000000u,	0xFFDFFFC000000000u,
					0x00000000007FFFFFu,	0x006007F7FFFEE000u,	0x0000000000700000u,	0x00600401CCFE8000u,
					0x0000000000720000u,	0x00000011CC3E8000u,	0x0000000000700118u,	0x00000001DDFE8000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x6EDull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x6EDull) % 0x40ull));
				// 208 code units from 38 ranges (spanning a search area of 993)
			}
			case 0x02: // [2] 0ADA - 0EC6
			{
				if (u'\u0AE2' > c || c > u'\u0EBC')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000003BF000003u,	0x00380E67F4000000u,	0x0000000100000003u,	0x00200F71F0000000u,
					0x00000007C0000000u,	0x00180F77F0000000u,	0x0000000380000003u,	0x00180F77F4000000u,
					0x00000003C0000003u,	0x00200F77F6000000u,	0x0000000380000003u,	0x3FD7E10000000000u,
					0x0000000000030000u,	0x00001FE001FC8000u,	0x0000000000000000u,	0x0000000007FC8000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xAE2ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xAE2ull) % 0x40ull));
				// 158 code units from 45 ranges (spanning a search area of 987)
			}
			case 0x03: // [3] 0EC7 - 12B3
			{
				if (u'\u0EC8' > c || c > u'\u109D')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x000000000000003Fu,	0x00C2A00000030000u,	0xDFFFFE0000000000u,	0x401FFFFFFFFEFFE0u,
					0x0000000000000000u,	0x007FFFF800000000u,	0xFC001E3F9DC3C000u,	0x00000000003C00BFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xEC8ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xEC8ull) % 0x40ull));
				// 141 code units from 20 ranges (spanning a search area of 470)
			}
			case 0x04: return u'\u135D' <= c && c <= u'\u135F';
			case 0x05: // [5] 16A1 - 1A8D
			{
				if (u'\u1712' > c || c > u'\u1A7F')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000000700000007u,	0x0000000300000003u,	0xFFFFFFFC00000000u,	0x0E00000000000803u,
					0x0000000000000000u,	0x0018000000000000u,	0x0000000000800000u,	0x0000000000000000u,
					0x000003FFC3FFC000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x00000000000003E0u,	0x000027FFFFFFDFF8u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1712ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1712ull) % 0x40ull));
				// 118 code units from 15 ranges (spanning a search area of 878)
			}
			case 0x06: // [6] 1A8E - 1E7A
			{
				if (u'\u1AB0' > c || c > u'\u1DFF')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x000000000001BFFFu,	0x00000000001F0000u,	0xF8000000001FFFF0u,	0x3FFE00000007000Fu,
					0xFFC0000000000000u,	0xFFF000000000000Fu,	0x00000000000000FFu,	0x0000000000000000u,
					0x21FFFFF700000000u,	0x0000000000000390u,	0x0000000000000000u,	0x0000000000000000u,
					0xFFFFFFFFFFFF0000u,	0x000000000000FBFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1AB0ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1AB0ull) % 0x40ull));
				// 189 code units from 16 ranges (spanning a search area of 848)
			}
			case 0x07: return u'\u20D0' <= c && c <= u'\u20F0' && (1ull << (static_cast<uint_least64_t>(c) - 0x20D0u)) & 0x1FFE21FFFull;
			case 0x0A: return (u'\u2CEF' <= c && c <= u'\u2CF1') || (u'\u2DE0' <= c && c <= u'\u2DFF') || c == u'\u2D7F';
			case 0x0B: return (u'\u302A' <= c && c <= u'\u302F') || (u'\u3099' <= c && c <= u'\u309A');
			case 0x29: // [41] A3F5 - A7E1
			{
				if (u'\uA66F' > c || c > u'\uA6F1')
					return false;
				
				switch ((static_cast<uint_least64_t>(c) - 0xA66Full) / 0x40ull)
				{
					case 0x00: return c <= u'\uA69F' && (1ull << (static_cast<uint_least64_t>(c) - 0xA66Fu)) & 0x1800000007FE1ull;
					case 0x02: return c != u'\uA6EF';
					default: return false;
				}
				// 15 code units from 4 ranges (spanning a search area of 131)
				MUU_UNREACHABLE;
			}
			case 0x2A: // [42] A7E2 - ABCE
			{
				if (u'\uA802' > c || c > u'\uAAF6')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000043E00000211u,	0xC000000000000000u,	0xFFFC000000000000u,	0x2000FFFFC000000Fu,
					0x00000FF000000000u,	0xC00000000003FFE0u,	0x7FFE000000000003u,	0x0000000800000000u,
					0x001FFF8000000000u,	0x0E00000000000C02u,	0xB067400000000000u,	0x00183E0000000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA802ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA802ull) % 0x40ull));
				// 124 code units from 25 ranges (spanning a search area of 757)
			}
			case 0x2B: return u'\uABE3' <= c && c <= u'\uABED' && (1u << (static_cast<uint_least32_t>(c) - 0xABE3u)) & 0x6FFu;
			case 0x3F: return (u'\uFE00' <= c && c <= u'\uFE0F') || u'\uFE20' <= c || c == u'\uFB1E';
			default: MUU_UNREACHABLE;
		}
		// 1288 code units from 190 ranges (spanning a search area of 64304)
		MUU_UNREACHABLE;
	}

	/// @}

	/// \addtogroup	is_decimal_digit	is_decimal_digit()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a decimal digit code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_decimal_digit(char16_t c) noexcept
	{
		return u'0' <= c && c <= u'9';
	}

	/// @}

	/// \addtogroup	is_hexadecimal_digit	is_hexadecimal_digit()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a hexadecimal digit code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_hexadecimal_digit(char16_t c) noexcept
	{
		return u'0' <= c && c <= u'f' && (1ull << (static_cast<uint_least64_t>(c) - 0x30u)) & 0x7E0000007E03FFull;
	}

	/// @}

	/// \addtogroup	is_hyphen	is_hyphen()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a hyphen code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_hyphen(char16_t c) noexcept
	{
		return is_ascii_hyphen(c) || is_non_ascii_hyphen(c);
	}

	/// @}

	/// \addtogroup	is_letter	is_letter()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a letter code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_letter(char16_t c) noexcept
	{
		return is_ascii_letter(c) || is_non_ascii_letter(c);
	}

	/// @}

	/// \addtogroup	is_lowercase	is_lowercase()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a lowercase code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_lowercase(char16_t c) noexcept
	{
		return is_ascii_lowercase(c) || is_non_ascii_lowercase(c);
	}

	/// @}

	/// \addtogroup	is_number	is_number()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a number code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_number(char16_t c) noexcept
	{
		return is_ascii_number(c) || is_non_ascii_number(c);
	}

	/// @}

	/// \addtogroup	is_octal_digit	is_octal_digit()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is an octal digit code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_octal_digit(char16_t c) noexcept
	{
		return u'0' <= c && c <= u'7';
	}

	/// @}

	/// \addtogroup	is_uppercase	is_uppercase()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is an uppercase code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_uppercase(char16_t c) noexcept
	{
		return is_ascii_uppercase(c) || is_non_ascii_uppercase(c);
	}

	/// @}

	/// \addtogroup	is_whitespace	is_whitespace()
	/// @{

	/// \brief		Returns true if a UTF-16 code unit is a whitespace code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_whitespace(char16_t c) noexcept
	{
		return is_ascii_whitespace(c) || is_non_ascii_whitespace(c);
	}

	/// @}

	/** @} */	// strings::code_units
	/** @} */	// strings
}

#if !MUU_GCC || MUU_GCC >= 9
	MUU_RESET_NDEBUG_OPTIMIZATIONS;
#endif
#include "header_end.h"
// clang-format on

