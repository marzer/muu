// This file is a part of muu and is subject to the the terms of the MIT license.
// Copyright (c) 2020 Mark Gillard <mark.gillard@outlook.com.au>
// See https://github.com/marzer/muu/blob/master/LICENSE for the full license text.
// SPDX-License-Identifier: MIT
//-----
// this file was generated by generate_unicode_functions.py - do not modify it directly

/// \file
/// \attention These are not the droids you are looking for. Try \ref strings instead.

#pragma once
#include "../../muu/fwd.h"

MUU_NAMESPACE_START
{
	/// \brief		Returns true if a UTF-16 code unit is whitespace from the ASCII range.
	/// \ingroup	strings
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_ascii_whitespace(char16_t c) noexcept
	{
		return c >= u'\t' && c <= u' ' && (1u << (static_cast<uint_least32_t>(c) - 0x9u)) & 0x80001Fu;
	}

	/// \brief		Returns true if a UTF-16 code unit is whitespace from outside the ASCII range.
	/// \ingroup	strings
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_non_ascii_whitespace(char16_t c) noexcept
	{
		if (c < u'\x85' || c > u'\u3000')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0x85ull) / 0xBEull;
		if (c == u'\u1680'
			|| c == u'\u3000')
			return true;
		if ((1ull << child_index_0) & 0x7FFFFBFFDFFFFFFEull)
			return false;
		switch (child_index_0)
		{
			case 0x00: return c <= u'\xA0' && (1u << (static_cast<uint_least32_t>(c) - 0x85u)) & 0x8000001u;
			case 0x2A: // [42] 1FB1 - 206E
			{
				if (c < u'\u2000' || c > u'\u205F')
					return false;
				
				return c == u'\u205F'
					|| (c <= u'\u202F'
						&& (1ull << (static_cast<uint_least64_t>(c) - 0x2000u)) & 0x8300000007FFull);
			}
			MUU_NO_DEFAULT_CASE;
		}
		// 19 codepoints from 8 ranges (spanning a search area of 12156)
	}

	/// \brief		Returns true if a UTF-16 code unit is whitespace.
	/// \ingroup	strings
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_whitespace(char16_t c) noexcept
	{
		return is_ascii_whitespace(c) || is_non_ascii_whitespace(c);
	}

	/// \brief		Returns true if a UTF-16 code unit is not whitespace.
	/// \ingroup	strings
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_not_whitespace(char16_t c) noexcept
	{
		return !is_whitespace(c);
	}

	/// \brief		Returns true if a UTF-16 code unit is a letter from the ASCII range.
	/// \ingroup	strings
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_ascii_letter(char16_t c) noexcept
	{
		return c >= u'A' && c <= u'z' && (1ull << (static_cast<uint_least64_t>(c) - 0x41u)) & 0x3FFFFFF03FFFFFFull;
	}

	/// \brief		Returns true if a UTF-16 code unit is a letter from outside the ASCII range.
	/// \ingroup	strings
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_non_ascii_letter(char16_t c) noexcept
	{
		if (c < u'\xAA' || c > u'\uFFDC')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0xAAull) / 0x3FDull;
		if ((1ull << child_index_0) & 0x1FF97FFFF7E000ull)
			return true;
		if ((1ull << child_index_0) & 0x3FC0000000000200ull)
			return false;
		switch (child_index_0)
		{
			case 0x00: // [0] 00AA - 04A6
			{
				MUU_ASSUME(c >= u'\xAA' && c <= u'\u04A6');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFDFFFFFC10801u,	0xFFFFFFFFFFFFDFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0x07C000FFF0FFFFFFu,	0x0000000000000014u,	0x0000000000000000u,	0xFEFFFFF5D02F37C0u,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFEFFFu,	0xFFFFFFFFFFFFFFFFu,	0x1FFFFFFF00FFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xAAull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xAAull) % 0x40ull));
				// 822 codepoints from 21 ranges (spanning a search area of 1021)
			}
			case 0x01: // [1] 04A7 - 08A3
			{
				MUU_ASSUME(c >= u'\u04A7' && c <= u'\u08A3');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFE04FFFFFFFFFDFFu,	0x00000003FFFFFFFFu,
					0xFFFFFE0000000000u,	0xFE00000000000F0Fu,	0x0000000FFFFFFFFFu,	0xFFFFFFFFFFFFFD80u,
					0xC0005FFFFFFFFFFFu,	0xFFFFFA0001380180u,	0xFFFFFFC0000001FFu,	0x7FFFFFFFFFFFFFFFu,
					0xFFFFFFF800000400u,	0x20087FFFFE08600Fu,	0xFE03FFFFFE000002u,	0x1E0000000000000Fu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x4A7ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x4A7ull) % 0x40ull));
				// 623 codepoints from 28 ranges (spanning a search area of 1021)
			}
			case 0x02: // [2] 08A4 - 0CA0
			{
				MUU_ASSUME(c >= u'\u08A4' && c <= u'\u0CA0');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000000FFFFDFFFFu,	0xFFFFFFFF00000000u,	0x3FF01000023FFFFFu,	0xFFFF99FE1FFFE000u,
					0x3B000400023C5FDFu,	0xFFFF987E01003000u,	0x05E000000036DFDFu,	0xFFFFBBFE0001C000u,
					0x30001000023EDFDFu,	0xFFFF99FE00200000u,	0x3B000000023EDFDFu,	0x8D63DC7E80002000u,
					0x00001000003FFC71u,	0xFFFFDDFE00000000u,	0x30700000023FFFDFu,	0x1FFFDDFE10000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x8A4ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x8A4ull) % 0x40ull));
				// 448 codepoints from 71 ranges (spanning a search area of 1021)
			}
			case 0x03: // [3] 0CA1 - 109D
			{
				if (c > u'\u108E')
					return false;
				MUU_ASSUME(c >= u'\u0CA1');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xA000000011F7FEFFu,	0xFFFEEFF800030001u,	0xC038200013FFFFFFu,	0xFE3FFFF07E000001u,
					0x0000003F97FDFFFFu,	0xFFFFFFFF00000000u,	0x0000003F8006FFFFu,	0xFFFFFBEB00000000u,
					0x7800002F9006FFD7u,	0x0000000080000000u,	0xFFFFFF7F80000000u,	0x00000F8000000FFFu,
					0x0000000000000000u,	0xFFFFFFFF80000000u,	0x1E1F8000400003FFu,	0x00002001FFF0E031u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xCA1ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xCA1ull) % 0x40ull));
				// 392 codepoints from 47 ranges (spanning a search area of 1021)
			}
			case 0x04: // [4] 109E - 149A
			{
				if (c < u'\u10A0')
					return false;
				MUU_ASSUME(c <= u'\u149A');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFF20BFFFFFFFFFu,	0xFFFFFFFFF7FFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x3D7F3DFFFFFFFFFFu,	0xFFFF3DFFFFFFFFFFu,
					0xFF7FFF3D7F3DFFFFu,	0xFF3DFFFFFFFFFFFFu,	0x07FFFFFFFFFFFFFFu,	0x0000FFFF00000000u,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFE3F3FFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x07FFFFFFFFFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x10A0ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x10A0ull) % 0x40ull));
				// 931 codepoints from 24 ranges (spanning a search area of 1021)
			}
			case 0x05: // [5] 149B - 1897
			{
				MUU_ASSUME(c >= u'\u149B' && c <= u'\u1897');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFDFFFF3FFFFu,
					0xFFFFFFFFFFFFFFE0u,	0x007BFFE03FC0FFFFu,	0x007FFFE0007FFFE0u,	0xFFFFFFE0003BFFE0u,
					0x1000000001FFFFFFu,	0x0000000000000002u,	0xFFFFFFFFFFFFFFE0u,	0x1FFFF3E03FFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x149Bull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x149Bull) % 0x40ull));
				// 826 codepoints from 17 ranges (spanning a search area of 1021)
			}
			case 0x06: // [6] 1898 - 1C94
			{
				MUU_ASSUME(c >= u'\u1898' && c <= u'\u1C94');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFF05FFFFu,	0xFFFFFF003FFFFFFFu,	0xFF0000000000007Fu,	0xFFFFFF001F3FFFFFu,
					0x0003FFFFFF0FFFFFu,	0x7FFFFF0000000000u,	0x1FFFFFFFFFFFFF00u,	0x0000000000000000u,
					0x0000000000008000u,	0xFFFFE00000000000u,	0x000FE0000FFFFFFFu,	0xFFFFF80000000000u,
					0xFFFFFFFC00C001FFu,	0xFFFFFF0000003FFFu,	0x00E0000000000FFFu,	0x1F01FF3FFFFFFFFCu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1898ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1898ull) % 0x40ull));
				// 520 codepoints from 21 ranges (spanning a search area of 1021)
			}
			case 0x07: // [7] 1C95 - 2091
			{
				MUU_ASSUME(c >= u'\u1C95' && c <= u'\u2091');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000073FFFFFFFFFu,	0xFFFFF8237EF00000u,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0x000007FFFFFFFFFFu,	0xFFFFF80000000000u,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xF9F9FFFFFFFFF9F9u,	0xFFFFF9FFFFFFFD57u,
					0x78FEE2FEFFFFFFFFu,	0x000000FEE0FFF87Eu,	0x0000000000000000u,	0x1800040010000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1C95ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1C95ull) % 0x40ull));
				// 724 codepoints from 29 ranges (spanning a search area of 1021)
			}
			case 0x08: // [8] 2092 - 248E
			{
				if (c > u'\u2184')
					return false;
				MUU_ASSUME(c >= u'\u2092');
				
				switch ((static_cast<uint_least64_t>(c) - 0x2092ull) / 0x40ull)
				{
					case 0x00: return c <= u'\u209C';
					case 0x01: return c >= u'\u2102' && (1u << (static_cast<uint_least32_t>(c) - 0x2102u)) & 0xFF21u;
					case 0x02: return c <= u'\u214E'
						&& (1ull << (static_cast<uint_least64_t>(c) - 0x2112u)) & 0x10F83CFFEF540F8Bull;
					case 0x03: return c >= u'\u2183';
					MUU_NO_DEFAULT_CASE;
				}
				// 59 codepoints from 15 ranges (spanning a search area of 1021)
			}
			case 0x0A: return (c >= u'\u2C00' && c <= u'\u2C2E') || (c >= u'\u2C30' && c <= u'\u2C5E')
				|| (c >= u'\u2C60' && c <= u'\u2C88');
			case 0x0B: // [11] 2C89 - 3085
			{
				MUU_ASSUME(c >= u'\u2C89' && c <= u'\u3085');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFF80063C0FFFFFFFu,	0xFFFFFF905FFFFFFFu,	0xFF8000407FFFFFFFu,
					0xBFBFBFBFBF803FFFu,	0x00000000003FBFBFu,	0x0000004000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x3000000000000000u,	0xFF0C1F0000000000u,	0x1FFFFFFFFFFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x2C89ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x2C89ull) % 0x40ull));
				// 353 codepoints from 22 ranges (spanning a search area of 1021)
			}
			case 0x0C: // [12] 3086 - 3482
			{
				MUU_ASSUME(c >= u'\u3086' && c <= u'\u3482');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFB81FFFFu,	0x83DFFFFFFFFFFFFFu,	0xFFFFFBFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0x03FFFFFFFC0001FFu,	0x03FFFC0000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0xFC00000000000000u,	0xFFFFFFFFFFFFFFFFu,	0x1FFFFFFFFFFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x3086ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x3086ull) % 0x40ull));
				// 430 codepoints from 9 ranges (spanning a search area of 1021)
			}
			case 0x13: return (c >= u'\u4C71' && c <= u'\u4DBF') || (c >= u'\u4E00' && c <= u'\u506D');
			case 0x27: return (c >= u'\u9C35' && c <= u'\u9FFC') || (c >= u'\uA000' && c <= u'\uA031');
			case 0x29: // [41] A42F - A82B
			{
				if (c > u'\uA822')
					return false;
				MUU_ASSUME(c >= u'\uA42F');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0x000000003FFFFFFFu,	0xFFFFFFFE00000000u,	0xFFFFFFFFFFFE7FFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x1801FFFE3FFFFFFFu,
					0xFFFFFFFFFFFE0000u,	0xFFFE7FFFFFFF0000u,	0x007FFFFFFFFFFFFFu,	0xFFF9FF0000000000u,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFF3FFFFFFu,	0x000000000FF9FFFFu,	0x000FFFFFEF77FFC0u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA42Full) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA42Full) % 0x40ull));
				// 792 codepoints from 16 ranges (spanning a search area of 1021)
			}
			case 0x2A: // [42] A82C - AC28
			{
				if (c < u'\uA840')
					return false;
				MUU_ASSUME(c <= u'\uAC28');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x000FFFFFFFFFFFFFu,	0x000FFFFFFFFFFFFCu,	0x68FC000000000000u,	0xFFFF003FFFFFFC00u,
					0x1FFFFFFF0000007Fu,	0x0007FFFFFFFFFFF0u,	0x7C00FFDF00008000u,	0x000001FFFFFFFFFFu,
					0xC47FFFFF00000FF7u,	0x3E62FFFFFFFFFFFFu,	0x001C07FF38000005u,	0xFFFF7F7F007E7E7Eu,
					0xFFFF03FFF7FFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x00000007FFFFFFFFu,	0x000001FFFFFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA840ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				// 657 codepoints from 36 ranges (spanning a search area of 1021)
			}
			case 0x35: return (c >= u'\uD40B' && c <= u'\uD7A3') || (c >= u'\uD7B0' && c <= u'\uD7C6')
				|| (c >= u'\uD7CB' && c <= u'\uD7FB');
			case 0x3E: // [62] F7F0 - FBEC
			{
				if (c < u'\uF900')
					return false;
				MUU_ASSUME(c <= u'\uFBEC');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFF3FFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x0000000003FFFFFFu,
					0x5F7FFDFFA0F8007Fu,	0xFFFFFFFFFFFFFFDBu,	0x0003FFFFFFFFFFFFu,	0x00001FFFFFF80000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xF900ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				// 652 codepoints from 13 ranges (spanning a search area of 1021)
			}
			case 0x3F: // [63] FBED - FFDC
			{
				MUU_ASSUME(c >= u'\uFBED' && c <= u'\uFFDC');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFF80001FFFFu,	0xFFFFFFE7FFFFFFFFu,	0x0000000007FFFFFFu,
					0x0000000000007FF8u,	0x0000000000000000u,	0xFFFFFFFFFFFFFEF8u,	0xFFFFFFFFFFFFFFFFu,
					0xFFF000000000FFFFu,	0xFE003FFFFFF03FFFu,	0xFFFFFFFFFFFFFFFFu,	0x0000E7E7E7E3FFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xFBEDull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xFBEDull) % 0x40ull));
				// 769 codepoints from 13 ranges (spanning a search area of 1008)
			}
			MUU_NO_DEFAULT_CASE;
		}
		// 48857 codepoints from 378 ranges (spanning a search area of 65331)
	}

	/// \brief		Returns true if a UTF-16 code unit is a letter.
	/// \ingroup	strings
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_letter(char16_t c) noexcept
	{
		return is_ascii_letter(c) || is_non_ascii_letter(c);
	}

	/// \brief		Returns true if a UTF-16 code unit is a number from the ASCII range.
	/// \ingroup	strings
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_ascii_number(char16_t c) noexcept
	{
		return c >= u'0' && c <= u'9';
	}

	/// \brief		Returns true if a UTF-16 code unit is a number from outside the ASCII range.
	/// \ingroup	strings
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_non_ascii_number(char16_t c) noexcept
	{
		if (c < u'\u0660' || c > u'\uFF19')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0x660ull) / 0x3E3ull;
		if ((1ull << child_index_0) & 0x7FFFF9FFFFFFFB88ull)
			return false;
		switch (child_index_0)
		{
			case 0x00: // [0] 0660 - 0A42
			{
				if (c > u'\u09EF')
					return false;
				MUU_ASSUME(c >= u'\u0660');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x0000000000000000u,	0x0000000003FF0000u,	0x0000000000000000u,
					0x0000000000000000u,	0x000003FF00000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x000000000000FFC0u,	0x0000000000000000u,	0x000000000000FFC0u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x660ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x660ull) % 0x40ull));
				// 50 codepoints from 5 ranges (spanning a search area of 995)
			}
			case 0x01: // [1] 0A43 - 0E25
			{
				if (c < u'\u0A66' || c > u'\u0DEF')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x0000000000000000u,	0x00000000000003FFu,	0x0000000000000000u,
					0x00000000000003FFu,	0x0000000000000000u,	0x00000000000003FFu,	0x0000000000000000u,
					0x00000000000003FFu,	0x0000000000000000u,	0x00000000000003FFu,	0x0000000000000000u,
					0x00000000000003FFu,	0x0000000000000000u,	0x00000000000003FFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA66ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA66ull) % 0x40ull));
				// 80 codepoints from 8 ranges (spanning a search area of 995)
			}
			case 0x02: // [2] 0E26 - 1208
			{
				if (c < u'\u0E50' || c > u'\u1099')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x0000000000000000u,	0x00000000000003FFu,	0x0000000003FF0000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x03FF000000000000u,
					0x0000000000000000u,	0x00000000000003FFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xE50ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xE50ull) % 0x40ull));
				// 50 codepoints from 5 ranges (spanning a search area of 995)
			}
			case 0x04: // [4] 15EC - 19CE
			{
				if (c < u'\u16EE' || c > u'\u194F')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000000000000007u,	0x0000000000000000u,	0x0000000000000000u,	0x0FFC000000000000u,
					0x00000FFC00000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x00000003FF000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x16EEull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x16EEull) % 0x40ull));
				// 33 codepoints from 4 ranges (spanning a search area of 995)
			}
			case 0x05: // [5] 19CF - 1DB1
			{
				if (c < u'\u19D0' || c > u'\u1C59')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x0000000000000000u,	0x03FF000000000000u,	0x00000000000003FFu,
					0x0000000000000000u,	0x0000000000000000u,	0x00000000000003FFu,	0x000003FF00000000u,
					0x0000000000000000u,	0x03FF000000000000u,	0x00000000000003FFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x19D0ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x19D0ull) % 0x40ull));
				// 70 codepoints from 7 ranges (spanning a search area of 995)
			}
			case 0x06: return c >= u'\u2160' && c <= u'\u2188'
				&& (1ull << (static_cast<uint_least64_t>(c) - 0x2160u)) & 0x1E7FFFFFFFFull;
			case 0x0A: return c >= u'\u3007' && c <= u'\u303A'
				&& (1ull << (static_cast<uint_least64_t>(c) - 0x3007u)) & 0xE0007FC000001ull;
			case 0x29: // [41] A5BB - A99D
			{
				if (c < u'\uA620' || c > u'\uA909')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x0000000000000000u,	0x0000000000000000u,	0x000000000000FFC0u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x03FF000000000000u,	0x000003FF00000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA620ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA620ull) % 0x40ull));
				// 40 codepoints from 4 ranges (spanning a search area of 995)
			}
			case 0x2A: // [42] A99E - AD80
			{
				if (c < u'\uA9D0' || c > u'\uABF9')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x000003FF000003FFu,	0x0000000000000000u,	0x00000000000003FFu,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x000003FF00000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA9D0ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA9D0ull) % 0x40ull));
				// 40 codepoints from 4 ranges (spanning a search area of 995)
			}
			case 0x3F: return c >= u'\uFF10';
			MUU_NO_DEFAULT_CASE;
		}
		// 425 codepoints from 43 ranges (spanning a search area of 63674)
	}

	/// \brief		Returns true if a UTF-16 code unit is a number.
	/// \ingroup	strings
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_number(char16_t c) noexcept
	{
		return is_ascii_number(c) || is_non_ascii_number(c);
	}

	/// \brief		Returns true if a UTF-16 code unit is a combining mark.
	/// \ingroup	strings
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_combining_mark(char16_t c) noexcept
	{
		if (c < u'\u0300' || c > u'\uFE2F')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0x300ull) / 0x3EDull;
		if ((1ull << child_index_0) & 0x7FFFF1FFFFFFF300ull)
			return false;
		switch (child_index_0)
		{
			case 0x00: // [0] 0300 - 06EC
			{
				MUU_ASSUME(c >= u'\u0300' && c <= u'\u06EC');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0x0000FFFFFFFFFFFFu,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x00000000000000F8u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0xBFFFFFFFFFFE0000u,	0x00000000000000B6u,
					0x0000000007FF0000u,	0x00010000FFFFF800u,	0x0000000000000000u,	0x00001D9F9FC00000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x300ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				// 219 codepoints from 14 ranges (spanning a search area of 1005)
			}
			case 0x01: // [1] 06ED - 0AD9
			{
				if (c > u'\u0ACD')
					return false;
				MUU_ASSUME(c >= u'\u06ED');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000001000000001u,	0x000000003FFFFFF8u,	0xFE00000000000000u,	0xC00000000000000Fu,
					0xF77FDE000001007Fu,	0x0000700000000001u,	0x0000000000000000u,	0xFFDFFFC000000000u,
					0x00000000007FFFFFu,	0x006007F7FFFEE000u,	0x0000000000700000u,	0x00600401CCFE8000u,
					0x0000000000720000u,	0x00000011CC3E8000u,	0x0000000000700118u,	0x00000001DDFE8000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x6EDull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x6EDull) % 0x40ull));
				// 208 codepoints from 38 ranges (spanning a search area of 1005)
			}
			case 0x02: // [2] 0ADA - 0EC6
			{
				if (c < u'\u0AE2' || c > u'\u0EBC')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000003BF000003u,	0x00380E67F4000000u,	0x0000000100000003u,	0x00200F71F0000000u,
					0x00000007C0000000u,	0x00180F77F0000000u,	0x0000000380000003u,	0x00180F77F4000000u,
					0x00000003C0000003u,	0x00200F77F6000000u,	0x0000000380000003u,	0x3FD7E10000000000u,
					0x0000000000030000u,	0x00001FE001FC8000u,	0x0000000000000000u,	0x0000000007FC8000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xAE2ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xAE2ull) % 0x40ull));
				// 158 codepoints from 45 ranges (spanning a search area of 1005)
			}
			case 0x03: // [3] 0EC7 - 12B3
			{
				if (c < u'\u0EC8' || c > u'\u109D')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x000000000000003Fu,	0x00C2A00000030000u,	0xDFFFFE0000000000u,	0x401FFFFFFFFEFFE0u,
					0x0000000000000000u,	0x007FFFF800000000u,	0xFC001E3F9DC3C000u,	0x00000000003C00BFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xEC8ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xEC8ull) % 0x40ull));
				// 141 codepoints from 20 ranges (spanning a search area of 1005)
			}
			case 0x04: return c >= u'\u135D' && c <= u'\u135F';
			case 0x05: // [5] 16A1 - 1A8D
			{
				if (c < u'\u1712' || c > u'\u1A7F')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000000700000007u,	0x0000000300000003u,	0xFFFFFFFC00000000u,	0x0E00000000000803u,
					0x0000000000000000u,	0x0018000000000000u,	0x0000000000800000u,	0x0000000000000000u,
					0x000003FFC3FFC000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x00000000000003E0u,	0x000027FFFFFFDFF8u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1712ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1712ull) % 0x40ull));
				// 118 codepoints from 15 ranges (spanning a search area of 1005)
			}
			case 0x06: // [6] 1A8E - 1E7A
			{
				if (c < u'\u1AB0' || c > u'\u1DFF')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x000000000001BFFFu,	0x00000000001F0000u,	0xF8000000001FFFF0u,	0x3FFE00000007000Fu,
					0xFFC0000000000000u,	0xFFF000000000000Fu,	0x00000000000000FFu,	0x0000000000000000u,
					0x21FFFFF700000000u,	0x0000000000000390u,	0x0000000000000000u,	0x0000000000000000u,
					0xFFFFFFFFFFFF0000u,	0x000000000000FBFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1AB0ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1AB0ull) % 0x40ull));
				// 189 codepoints from 16 ranges (spanning a search area of 1005)
			}
			case 0x07: return c >= u'\u20D0' && c <= u'\u20F0'
				&& (1ull << (static_cast<uint_least64_t>(c) - 0x20D0u)) & 0x1FFE21FFFull;
			case 0x0A: return (c >= u'\u2CEF' && c <= u'\u2CF1') || (c >= u'\u2DE0' && c <= u'\u2DFF') || c == u'\u2D7F';
			case 0x0B: return (c >= u'\u302A' && c <= u'\u302F') || c == u'\u3099' || c == u'\u309A';
			case 0x29: // [41] A3F5 - A7E1
			{
				if (c < u'\uA66F' || c > u'\uA6F1')
					return false;
				
				switch ((static_cast<uint_least64_t>(c) - 0xA66Full) / 0x40ull)
				{
					case 0x00: return c <= u'\uA69F'
						&& (1ull << (static_cast<uint_least64_t>(c) - 0xA66Fu)) & 0x1800000007FE1ull;
					case 0x02: return c != u'\uA6EF';
					default: return false;
				}
				// 15 codepoints from 4 ranges (spanning a search area of 1005)
			}
			case 0x2A: // [42] A7E2 - ABCE
			{
				if (c < u'\uA802' || c > u'\uAAF6')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000043E00000211u,	0xC000000000000000u,	0xFFFC000000000000u,	0x2000FFFFC000000Fu,
					0x00000FF000000000u,	0xC00000000003FFE0u,	0x7FFE000000000003u,	0x0000000800000000u,
					0x001FFF8000000000u,	0x0E00000000000C02u,	0xB067400000000000u,	0x00183E0000000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA802ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA802ull) % 0x40ull));
				// 124 codepoints from 25 ranges (spanning a search area of 1005)
			}
			case 0x2B: return c >= u'\uABE3' && c <= u'\uABED'
				&& (1u << (static_cast<uint_least32_t>(c) - 0xABE3u)) & 0x6FFu;
			case 0x3F: return (c >= u'\uFE00' && c <= u'\uFE0F') || (c >= u'\uFE20' && c <= u'\uFE2F') || c == u'\uFB1E';
			MUU_NO_DEFAULT_CASE;
		}
		// 1288 codepoints from 190 ranges (spanning a search area of 64304)
	}

	/// \brief		Returns true if a UTF-16 code unit is an octal digit.
	/// \ingroup	strings
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_octal_digit(char16_t c) noexcept
	{
		return c >= u'0' && c <= u'7';
	}

	/// \brief		Returns true if a UTF-16 code unit is a decimal digit.
	/// \ingroup	strings
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_decimal_digit(char16_t c) noexcept
	{
		return c >= u'0' && c <= u'9';
	}

	/// \brief		Returns true if a UTF-16 code unit is a hexadecimal digit.
	/// \ingroup	strings
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_hexadecimal_digit(char16_t c) noexcept
	{
		return c >= u'0' && c <= u'f' && (1ull << (static_cast<uint_least64_t>(c) - 0x30u)) & 0x7E0000007E03FFull;
	}

	/// \brief		Returns true if a UTF-16 code unit is a code point boundary.
	/// \ingroup	strings
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_code_point_boundary(char16_t c) noexcept
	{
		return c <= 0xDBFFu || c >= 0xE000u;
	}

}
MUU_NAMESPACE_END
