// This file is a part of muu and is subject to the the terms of the MIT license.
// Copyright (c) 2020 Mark Gillard <mark.gillard@outlook.com.au>
// See https://github.com/marzer/muu/blob/master/LICENSE for the full license text.
// SPDX-License-Identifier: MIT
//-----
// this file was generated by generate_unicode_functions.py - do not modify it directly

/// \file
/// \attention These are not the droids you are looking for. Try \ref strings instead.

#pragma once
#include "../../muu/fwd.h"

MUU_NAMESPACE_START
{
	/// \brief		Returns true if a UTF-16 code unit is within the ASCII range.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_ascii(char16_t c) noexcept
	{
		return c <= u'\x7F';
	}

	/// \brief		Returns true if a UTF-16 code unit is not within the ASCII range (i.e. it is a part greater Unicode).
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_unicode(char16_t c) noexcept
	{
		return u'\x80' <= c;
	}

	/// \brief		Returns true if a UTF-16 code unit is a whitespace code point from the ASCII range.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_ascii_whitespace(char16_t c) noexcept
	{
		return (u'\t' <= c && c <= u'\r') || c == u' ';
	}

	/// \brief		Returns true if a UTF-16 code unit is a whitespace code point from outside the ASCII range.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_unicode_whitespace(char16_t c) noexcept
	{
		if (u'\x85' > c || c > u'\u3000')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0x85ull) / 0xBEull;
		if ((1ull << child_index_0) & 0x7FFFFBFFDFFFFFFEull)
			return false;
		if (c == u'\u1680' || c == u'\u3000')
			return true;
		switch (child_index_0)
		{
			case 0x00: return c == u'\x85' || c == u'\xA0';
			case 0x2A: // [42] 1FB1 - 206E
			{
				if (u'\u2000' > c || c > u'\u205F')
					return false;
				
				return c == u'\u205F'
					|| (c <= u'\u202F' && (1ull << (static_cast<uint_least64_t>(c) - 0x2000u)) & 0x8300000007FFull);
			}
			MUU_NO_DEFAULT_CASE;
		}
		// 19 codepoints from 8 ranges (spanning a search area of 65536)
	}

	/// \brief		Returns true if a UTF-16 code unit is a whitespace code point.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_whitespace(char16_t c) noexcept
	{
		return is_ascii_whitespace(c) || is_unicode_whitespace(c);
	}

	/// \brief		Returns true if a UTF-16 code unit is not a whitespace code point.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_not_whitespace(char16_t c) noexcept
	{
		return !is_whitespace(c);
	}

	/// \brief		Returns true if a UTF-16 code unit is a letter code point from the ASCII range.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_ascii_letter(char16_t c) noexcept
	{
		return (u'A' <= c && c <= u'Z') || (u'a' <= c && c <= u'z');
	}

	/// \brief		Returns true if a UTF-16 code unit is a letter code point from outside the ASCII range.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_unicode_letter(char16_t c) noexcept
	{
		if (u'\xAA' > c || c > u'\uFFDC')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0xAAull) / 0x3FDull;
		if ((1ull << child_index_0) & 0x3FC0000000000200ull)
			return false;
		if ((1ull << child_index_0) & 0x1FF97FFFF7E000ull)
			return true;
		switch (child_index_0)
		{
			case 0x00: // [0] 00AA - 04A6
			{
				MUU_ASSUME(u'\xAA' <= c && c <= u'\u04A6');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFDFFFFFC10801u,	0xFFFFFFFFFFFFDFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0x07C000FFF0FFFFFFu,	0x0000000000000014u,	0x0000000000000000u,	0xFEFFFFF5D02F37C0u,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFEFFFu,	0xFFFFFFFFFFFFFFFFu,	0x1FFFFFFF00FFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xAAull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xAAull) % 0x40ull));
				// 822 codepoints from 21 ranges (spanning a search area of 1021)
			}
			case 0x01: // [1] 04A7 - 08A3
			{
				MUU_ASSUME(u'\u04A7' <= c && c <= u'\u08A3');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFE04FFFFFFFFFDFFu,	0x00000003FFFFFFFFu,
					0xFFFFFE0000000000u,	0xFE00000000000F0Fu,	0x0000000FFFFFFFFFu,	0xFFFFFFFFFFFFFD80u,
					0xC0005FFFFFFFFFFFu,	0xFFFFFA0001380180u,	0xFFFFFFC0000001FFu,	0x7FFFFFFFFFFFFFFFu,
					0xFFFFFFF800000400u,	0x20087FFFFE08600Fu,	0xFE03FFFFFE000002u,	0x1E0000000000000Fu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x4A7ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x4A7ull) % 0x40ull));
				// 623 codepoints from 28 ranges (spanning a search area of 1021)
			}
			case 0x02: // [2] 08A4 - 0CA0
			{
				MUU_ASSUME(u'\u08A4' <= c && c <= u'\u0CA0');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000000FFFFDFFFFu,	0xFFFFFFFF00000000u,	0x3FF01000023FFFFFu,	0xFFFF99FE1FFFE000u,
					0x3B000400023C5FDFu,	0xFFFF987E01003000u,	0x05E000000036DFDFu,	0xFFFFBBFE0001C000u,
					0x30001000023EDFDFu,	0xFFFF99FE00200000u,	0x3B000000023EDFDFu,	0x8D63DC7E80002000u,
					0x00001000003FFC71u,	0xFFFFDDFE00000000u,	0x30700000023FFFDFu,	0x1FFFDDFE10000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x8A4ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x8A4ull) % 0x40ull));
				// 448 codepoints from 71 ranges (spanning a search area of 1021)
			}
			case 0x03: // [3] 0CA1 - 109D
			{
				if (c > u'\u108E')
					return false;
				MUU_ASSUME(u'\u0CA1' <= c);
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xA000000011F7FEFFu,	0xFFFEEFF800030001u,	0xC038200013FFFFFFu,	0xFE3FFFF07E000001u,
					0x0000003F97FDFFFFu,	0xFFFFFFFF00000000u,	0x0000003F8006FFFFu,	0xFFFFFBEB00000000u,
					0x7800002F9006FFD7u,	0x0000000080000000u,	0xFFFFFF7F80000000u,	0x00000F8000000FFFu,
					0x0000000000000000u,	0xFFFFFFFF80000000u,	0x1E1F8000400003FFu,	0x00002001FFF0E031u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xCA1ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xCA1ull) % 0x40ull));
				// 392 codepoints from 47 ranges (spanning a search area of 1021)
			}
			case 0x04: // [4] 109E - 149A
			{
				if (u'\u10A0' > c)
					return false;
				MUU_ASSUME(c <= u'\u149A');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFF20BFFFFFFFFFu,	0xFFFFFFFFF7FFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x3D7F3DFFFFFFFFFFu,	0xFFFF3DFFFFFFFFFFu,
					0xFF7FFF3D7F3DFFFFu,	0xFF3DFFFFFFFFFFFFu,	0x07FFFFFFFFFFFFFFu,	0x0000FFFF00000000u,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFE3F3FFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x07FFFFFFFFFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x10A0ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x10A0ull) % 0x40ull));
				// 931 codepoints from 24 ranges (spanning a search area of 1021)
			}
			case 0x05: // [5] 149B - 1897
			{
				MUU_ASSUME(u'\u149B' <= c && c <= u'\u1897');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFDFFFF3FFFFu,
					0xFFFFFFFFFFFFFFE0u,	0x007BFFE03FC0FFFFu,	0x007FFFE0007FFFE0u,	0xFFFFFFE0003BFFE0u,
					0x1000000001FFFFFFu,	0x0000000000000002u,	0xFFFFFFFFFFFFFFE0u,	0x1FFFF3E03FFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x149Bull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x149Bull) % 0x40ull));
				// 826 codepoints from 17 ranges (spanning a search area of 1021)
			}
			case 0x06: // [6] 1898 - 1C94
			{
				MUU_ASSUME(u'\u1898' <= c && c <= u'\u1C94');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFF05FFFFu,	0xFFFFFF003FFFFFFFu,	0xFF0000000000007Fu,	0xFFFFFF001F3FFFFFu,
					0x0003FFFFFF0FFFFFu,	0x7FFFFF0000000000u,	0x1FFFFFFFFFFFFF00u,	0x0000000000000000u,
					0x0000000000008000u,	0xFFFFE00000000000u,	0x000FE0000FFFFFFFu,	0xFFFFF80000000000u,
					0xFFFFFFFC00C001FFu,	0xFFFFFF0000003FFFu,	0x00E0000000000FFFu,	0x1F01FF3FFFFFFFFCu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1898ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1898ull) % 0x40ull));
				// 520 codepoints from 21 ranges (spanning a search area of 1021)
			}
			case 0x07: // [7] 1C95 - 2091
			{
				MUU_ASSUME(u'\u1C95' <= c && c <= u'\u2091');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000073FFFFFFFFFu,	0xFFFFF8237EF00000u,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0x000007FFFFFFFFFFu,	0xFFFFF80000000000u,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xF9F9FFFFFFFFF9F9u,	0xFFFFF9FFFFFFFD57u,
					0x78FEE2FEFFFFFFFFu,	0x000000FEE0FFF87Eu,	0x0000000000000000u,	0x1800040010000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1C95ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1C95ull) % 0x40ull));
				// 724 codepoints from 29 ranges (spanning a search area of 1021)
			}
			case 0x08: // [8] 2092 - 248E
			{
				if (c > u'\u2184')
					return false;
				MUU_ASSUME(u'\u2092' <= c);
				
				switch ((static_cast<uint_least64_t>(c) - 0x2092ull) / 0x40ull)
				{
					case 0x00: return c <= u'\u209C';
					case 0x01: return u'\u2102' <= c && (1u << (static_cast<uint_least32_t>(c) - 0x2102u)) & 0xFF21u;
					case 0x02: return c <= u'\u214E' && (1ull << (static_cast<uint_least64_t>(c) - 0x2112u)) & 0x10F83CFFEF540F8Bull;
					case 0x03: return u'\u2183' <= c;
					MUU_NO_DEFAULT_CASE;
				}
				// 59 codepoints from 15 ranges (spanning a search area of 1021)
			}
			case 0x0A: return (u'\u2C00' <= c && c <= u'\u2C2E') || (u'\u2C30' <= c && c <= u'\u2C5E') || u'\u2C60' <= c;
			case 0x0B: // [11] 2C89 - 3085
			{
				MUU_ASSUME(u'\u2C89' <= c && c <= u'\u3085');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFF80063C0FFFFFFFu,	0xFFFFFF905FFFFFFFu,	0xFF8000407FFFFFFFu,
					0xBFBFBFBFBF803FFFu,	0x00000000003FBFBFu,	0x0000004000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x3000000000000000u,	0xFF0C1F0000000000u,	0x1FFFFFFFFFFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x2C89ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x2C89ull) % 0x40ull));
				// 353 codepoints from 22 ranges (spanning a search area of 1021)
			}
			case 0x0C: // [12] 3086 - 3482
			{
				MUU_ASSUME(u'\u3086' <= c && c <= u'\u3482');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFB81FFFFu,	0x83DFFFFFFFFFFFFFu,	0xFFFFFBFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0x03FFFFFFFC0001FFu,	0x03FFFC0000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0xFC00000000000000u,	0xFFFFFFFFFFFFFFFFu,	0x1FFFFFFFFFFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x3086ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x3086ull) % 0x40ull));
				// 430 codepoints from 9 ranges (spanning a search area of 1021)
			}
			case 0x13: return c <= u'\u4DBF' || u'\u4E00' <= c;
			case 0x27: return c <= u'\u9FFC' || u'\uA000' <= c;
			case 0x29: // [41] A42F - A82B
			{
				if (c > u'\uA822')
					return false;
				MUU_ASSUME(u'\uA42F' <= c);
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0x000000003FFFFFFFu,	0xFFFFFFFE00000000u,	0xFFFFFFFFFFFE7FFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x1801FFFE3FFFFFFFu,
					0xFFFFFFFFFFFE0000u,	0xFFFE7FFFFFFF0000u,	0x007FFFFFFFFFFFFFu,	0xFFF9FF0000000000u,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFF3FFFFFFu,	0x000000000FF9FFFFu,	0x000FFFFFEF77FFC0u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA42Full) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA42Full) % 0x40ull));
				// 792 codepoints from 16 ranges (spanning a search area of 1021)
			}
			case 0x2A: // [42] A82C - AC28
			{
				if (u'\uA840' > c)
					return false;
				MUU_ASSUME(c <= u'\uAC28');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x000FFFFFFFFFFFFFu,	0x000FFFFFFFFFFFFCu,	0x68FC000000000000u,	0xFFFF003FFFFFFC00u,
					0x1FFFFFFF0000007Fu,	0x0007FFFFFFFFFFF0u,	0x7C00FFDF00008000u,	0x000001FFFFFFFFFFu,
					0xC47FFFFF00000FF7u,	0x3E62FFFFFFFFFFFFu,	0x001C07FF38000005u,	0xFFFF7F7F007E7E7Eu,
					0xFFFF03FFF7FFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x00000007FFFFFFFFu,	0x000001FFFFFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA840ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				// 657 codepoints from 36 ranges (spanning a search area of 1021)
			}
			case 0x35: return c <= u'\uD7A3' || (u'\uD7B0' <= c && c <= u'\uD7C6') || (u'\uD7CB' <= c && c <= u'\uD7FB');
			case 0x3E: // [62] F7F0 - FBEC
			{
				if (u'\uF900' > c)
					return false;
				MUU_ASSUME(c <= u'\uFBEC');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFF3FFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0x0000000003FFFFFFu,
					0x5F7FFDFFA0F8007Fu,	0xFFFFFFFFFFFFFFDBu,	0x0003FFFFFFFFFFFFu,	0x00001FFFFFF80000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xF900ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				// 652 codepoints from 13 ranges (spanning a search area of 1021)
			}
			case 0x3F: // [63] FBED - FFDC
			{
				MUU_ASSUME(u'\uFBED' <= c && c <= u'\uFFDC');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0xFFFFFFF80001FFFFu,	0xFFFFFFE7FFFFFFFFu,	0x0000000007FFFFFFu,
					0x0000000000007FF8u,	0x0000000000000000u,	0xFFFFFFFFFFFFFEF8u,	0xFFFFFFFFFFFFFFFFu,
					0xFFF000000000FFFFu,	0xFE003FFFFFF03FFFu,	0xFFFFFFFFFFFFFFFFu,	0x0000E7E7E7E3FFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xFBEDull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xFBEDull) % 0x40ull));
				// 769 codepoints from 13 ranges (spanning a search area of 1008)
			}
			MUU_NO_DEFAULT_CASE;
		}
		// 48857 codepoints from 378 ranges (spanning a search area of 65536)
	}

	/// \brief		Returns true if a UTF-16 code unit is a letter code point.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_letter(char16_t c) noexcept
	{
		return is_ascii_letter(c) || is_unicode_letter(c);
	}

	/// \brief		Returns true if a UTF-16 code unit is a number code point from the ASCII range.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_ascii_number(char16_t c) noexcept
	{
		return u'0' <= c && c <= u'9';
	}

	/// \brief		Returns true if a UTF-16 code unit is a number code point from outside the ASCII range.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_unicode_number(char16_t c) noexcept
	{
		if (u'\u0660' > c || c > u'\uFF19')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0x660ull) / 0x3E3ull;
		if ((1ull << child_index_0) & 0x7FFFF9FFFFFFFB88ull)
			return false;
		switch (child_index_0)
		{
			case 0x00: // [0] 0660 - 0A42
			{
				if (c > u'\u09EF')
					return false;
				MUU_ASSUME(u'\u0660' <= c);
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x0000000000000000u,	0x0000000003FF0000u,	0x0000000000000000u,
					0x0000000000000000u,	0x000003FF00000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x000000000000FFC0u,	0x0000000000000000u,	0x000000000000FFC0u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x660ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x660ull) % 0x40ull));
				// 50 codepoints from 5 ranges (spanning a search area of 995)
			}
			case 0x01: // [1] 0A43 - 0E25
			{
				if (u'\u0A66' > c || c > u'\u0DEF')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x0000000000000000u,	0x00000000000003FFu,	0x0000000000000000u,
					0x00000000000003FFu,	0x0000000000000000u,	0x00000000000003FFu,	0x0000000000000000u,
					0x00000000000003FFu,	0x0000000000000000u,	0x00000000000003FFu,	0x0000000000000000u,
					0x00000000000003FFu,	0x0000000000000000u,	0x00000000000003FFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA66ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA66ull) % 0x40ull));
				// 80 codepoints from 8 ranges (spanning a search area of 995)
			}
			case 0x02: // [2] 0E26 - 1208
			{
				if (u'\u0E50' > c || c > u'\u1099')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x0000000000000000u,	0x00000000000003FFu,	0x0000000003FF0000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x03FF000000000000u,
					0x0000000000000000u,	0x00000000000003FFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xE50ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xE50ull) % 0x40ull));
				// 50 codepoints from 5 ranges (spanning a search area of 995)
			}
			case 0x04: // [4] 15EC - 19CE
			{
				if (u'\u16EE' > c || c > u'\u194F')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000000000000007u,	0x0000000000000000u,	0x0000000000000000u,	0x0FFC000000000000u,
					0x00000FFC00000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x00000003FF000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x16EEull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x16EEull) % 0x40ull));
				// 33 codepoints from 4 ranges (spanning a search area of 995)
			}
			case 0x05: // [5] 19CF - 1DB1
			{
				if (u'\u19D0' > c || c > u'\u1C59')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x0000000000000000u,	0x03FF000000000000u,	0x00000000000003FFu,
					0x0000000000000000u,	0x0000000000000000u,	0x00000000000003FFu,	0x000003FF00000000u,
					0x0000000000000000u,	0x03FF000000000000u,	0x00000000000003FFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x19D0ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x19D0ull) % 0x40ull));
				// 70 codepoints from 7 ranges (spanning a search area of 995)
			}
			case 0x06: return u'\u2160' <= c && c <= u'\u2188' && (1ull << (static_cast<uint_least64_t>(c) - 0x2160u)) & 0x1E7FFFFFFFFull;
			case 0x0A: return u'\u3007' <= c && c <= u'\u303A' && (1ull << (static_cast<uint_least64_t>(c) - 0x3007u)) & 0xE0007FC000001ull;
			case 0x29: // [41] A5BB - A99D
			{
				if (u'\uA620' > c || c > u'\uA909')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000003FFu,	0x0000000000000000u,	0x0000000000000000u,	0x000000000000FFC0u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x03FF000000000000u,	0x000003FF00000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA620ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA620ull) % 0x40ull));
				// 40 codepoints from 4 ranges (spanning a search area of 995)
			}
			case 0x2A: // [42] A99E - AD80
			{
				if (u'\uA9D0' > c || c > u'\uABF9')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x000003FF000003FFu,	0x0000000000000000u,	0x00000000000003FFu,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x000003FF00000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA9D0ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA9D0ull) % 0x40ull));
				// 40 codepoints from 4 ranges (spanning a search area of 995)
			}
			case 0x3F: return u'\uFF10' <= c;
			MUU_NO_DEFAULT_CASE;
		}
		// 425 codepoints from 43 ranges (spanning a search area of 65536)
	}

	/// \brief		Returns true if a UTF-16 code unit is a number code point.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_number(char16_t c) noexcept
	{
		return is_ascii_number(c) || is_unicode_number(c);
	}

	/// \brief		Returns true if a UTF-16 code unit is a hyphen code point from the ASCII range.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_ascii_hyphen(char16_t c) noexcept
	{
		return c == u'-';
	}

	/// \brief		Returns true if a UTF-16 code unit is a hyphen code point from outside the ASCII range.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_unicode_hyphen(char16_t c) noexcept
	{
		if (u'\xAD' > c || c > u'\uFF65')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0xADull) / 0x3FBull;
		if ((1ull << child_index_0) & 0x7FFFFFFFFFFFE75Cull)
			return false;
		if (c == u'\xAD' || c == u'\u058A' || c == u'\u1806' || c == u'\u2E17' || c == u'\u30FB')
			return true;
		switch (child_index_0)
		{
			case 0x07: return u'\u2010' <= c && c <= u'\u2011';
			case 0x3F: return c == u'\uFE63' || c == u'\uFF0D' || c == u'\uFF65';
			MUU_NO_DEFAULT_CASE;
		}
		// 10 codepoints from 9 ranges (spanning a search area of 65536)
	}

	/// \brief		Returns true if a UTF-16 code unit is a hyphen code point.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_hyphen(char16_t c) noexcept
	{
		return is_ascii_hyphen(c) || is_unicode_hyphen(c);
	}

	/// \brief		Returns true if a UTF-16 code unit is a combining mark code point.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_combining_mark(char16_t c) noexcept
	{
		if (u'\u0300' > c || c > u'\uFE2F')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0x300ull) / 0x3EDull;
		if ((1ull << child_index_0) & 0x7FFFF1FFFFFFF300ull)
			return false;
		switch (child_index_0)
		{
			case 0x00: // [0] 0300 - 06EC
			{
				MUU_ASSUME(u'\u0300' <= c && c <= u'\u06EC');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xFFFFFFFFFFFFFFFFu,	0x0000FFFFFFFFFFFFu,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x00000000000000F8u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0xBFFFFFFFFFFE0000u,	0x00000000000000B6u,
					0x0000000007FF0000u,	0x00010000FFFFF800u,	0x0000000000000000u,	0x00001D9F9FC00000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x300ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				// 219 codepoints from 14 ranges (spanning a search area of 1005)
			}
			case 0x01: // [1] 06ED - 0AD9
			{
				if (c > u'\u0ACD')
					return false;
				MUU_ASSUME(u'\u06ED' <= c);
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000001000000001u,	0x000000003FFFFFF8u,	0xFE00000000000000u,	0xC00000000000000Fu,
					0xF77FDE000001007Fu,	0x0000700000000001u,	0x0000000000000000u,	0xFFDFFFC000000000u,
					0x00000000007FFFFFu,	0x006007F7FFFEE000u,	0x0000000000700000u,	0x00600401CCFE8000u,
					0x0000000000720000u,	0x00000011CC3E8000u,	0x0000000000700118u,	0x00000001DDFE8000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x6EDull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x6EDull) % 0x40ull));
				// 208 codepoints from 38 ranges (spanning a search area of 1005)
			}
			case 0x02: // [2] 0ADA - 0EC6
			{
				if (u'\u0AE2' > c || c > u'\u0EBC')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000003BF000003u,	0x00380E67F4000000u,	0x0000000100000003u,	0x00200F71F0000000u,
					0x00000007C0000000u,	0x00180F77F0000000u,	0x0000000380000003u,	0x00180F77F4000000u,
					0x00000003C0000003u,	0x00200F77F6000000u,	0x0000000380000003u,	0x3FD7E10000000000u,
					0x0000000000030000u,	0x00001FE001FC8000u,	0x0000000000000000u,	0x0000000007FC8000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xAE2ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xAE2ull) % 0x40ull));
				// 158 codepoints from 45 ranges (spanning a search area of 1005)
			}
			case 0x03: // [3] 0EC7 - 12B3
			{
				if (u'\u0EC8' > c || c > u'\u109D')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x000000000000003Fu,	0x00C2A00000030000u,	0xDFFFFE0000000000u,	0x401FFFFFFFFEFFE0u,
					0x0000000000000000u,	0x007FFFF800000000u,	0xFC001E3F9DC3C000u,	0x00000000003C00BFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xEC8ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xEC8ull) % 0x40ull));
				// 141 codepoints from 20 ranges (spanning a search area of 1005)
			}
			case 0x04: return u'\u135D' <= c && c <= u'\u135F';
			case 0x05: // [5] 16A1 - 1A8D
			{
				if (u'\u1712' > c || c > u'\u1A7F')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000000700000007u,	0x0000000300000003u,	0xFFFFFFFC00000000u,	0x0E00000000000803u,
					0x0000000000000000u,	0x0018000000000000u,	0x0000000000800000u,	0x0000000000000000u,
					0x000003FFC3FFC000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x00000000000003E0u,	0x000027FFFFFFDFF8u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1712ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1712ull) % 0x40ull));
				// 118 codepoints from 15 ranges (spanning a search area of 1005)
			}
			case 0x06: // [6] 1A8E - 1E7A
			{
				if (u'\u1AB0' > c || c > u'\u1DFF')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x000000000001BFFFu,	0x00000000001F0000u,	0xF8000000001FFFF0u,	0x3FFE00000007000Fu,
					0xFFC0000000000000u,	0xFFF000000000000Fu,	0x00000000000000FFu,	0x0000000000000000u,
					0x21FFFFF700000000u,	0x0000000000000390u,	0x0000000000000000u,	0x0000000000000000u,
					0xFFFFFFFFFFFF0000u,	0x000000000000FBFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1AB0ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1AB0ull) % 0x40ull));
				// 189 codepoints from 16 ranges (spanning a search area of 1005)
			}
			case 0x07: return u'\u20D0' <= c && c <= u'\u20F0' && (1ull << (static_cast<uint_least64_t>(c) - 0x20D0u)) & 0x1FFE21FFFull;
			case 0x0A: return (u'\u2CEF' <= c && c <= u'\u2CF1') || (u'\u2DE0' <= c && c <= u'\u2DFF') || c == u'\u2D7F';
			case 0x0B: return (u'\u302A' <= c && c <= u'\u302F') || (u'\u3099' <= c && c <= u'\u309A');
			case 0x29: // [41] A3F5 - A7E1
			{
				if (u'\uA66F' > c || c > u'\uA6F1')
					return false;
				
				switch ((static_cast<uint_least64_t>(c) - 0xA66Full) / 0x40ull)
				{
					case 0x00: return c <= u'\uA69F' && (1ull << (static_cast<uint_least64_t>(c) - 0xA66Fu)) & 0x1800000007FE1ull;
					case 0x02: return c != u'\uA6EF';
					default: return false;
				}
				// 15 codepoints from 4 ranges (spanning a search area of 1005)
			}
			case 0x2A: // [42] A7E2 - ABCE
			{
				if (u'\uA802' > c || c > u'\uAAF6')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000043E00000211u,	0xC000000000000000u,	0xFFFC000000000000u,	0x2000FFFFC000000Fu,
					0x00000FF000000000u,	0xC00000000003FFE0u,	0x7FFE000000000003u,	0x0000000800000000u,
					0x001FFF8000000000u,	0x0E00000000000C02u,	0xB067400000000000u,	0x00183E0000000000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA802ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA802ull) % 0x40ull));
				// 124 codepoints from 25 ranges (spanning a search area of 1005)
			}
			case 0x2B: return u'\uABE3' <= c && c <= u'\uABED' && (1u << (static_cast<uint_least32_t>(c) - 0xABE3u)) & 0x6FFu;
			case 0x3F: return (u'\uFE00' <= c && c <= u'\uFE0F') || u'\uFE20' <= c || c == u'\uFB1E';
			MUU_NO_DEFAULT_CASE;
		}
		// 1288 codepoints from 190 ranges (spanning a search area of 65536)
	}

	/// \brief		Returns true if a UTF-16 code unit is an octal digit code point.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_octal_digit(char16_t c) noexcept
	{
		return u'0' <= c && c <= u'7';
	}

	/// \brief		Returns true if a UTF-16 code unit is a decimal digit code point.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_decimal_digit(char16_t c) noexcept
	{
		return u'0' <= c && c <= u'9';
	}

	/// \brief		Returns true if a UTF-16 code unit is a hexadecimal digit code point.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_hexadecimal_digit(char16_t c) noexcept
	{
		return u'0' <= c && c <= u'f' && (1ull << (static_cast<uint_least64_t>(c) - 0x30u)) & 0x7E0000007E03FFull;
	}

	/// \brief		Returns true if a UTF-16 code unit is an uppercase code point.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_uppercase(char16_t c) noexcept
	{
		if (u'A' > c || c > u'\uFF3A')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0x41ull) / 0x3FCull;
		if ((1ull << child_index_0) & 0x7FFFF9FFFFFFF06Cull)
			return false;
		switch (child_index_0)
		{
			case 0x00: // [0] 0041 - 043C
			{
				if (c > u'\u042F')
					return false;
				MUU_ASSUME(u'A' <= c);
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000000003FFFFFFu,	0x8000000000000000u,	0x800000003FBFFFFFu,	0x552AAAAAAAAAAAAAu,
					0x15AAAAAAAAAAAA55u,	0x08D7696AD8EDE76Bu,	0xAAE92AAAA5555248u,	0x3602AAAAAAAAAAAAu,
					0x0000000000002ABDu,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x4022800000000000u,	0x000007FDFFFF6BA0u,	0xF3482AAAAA8E4000u,	0x00007FFFFFFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x41ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x41ull) % 0x40ull));
				// 330 codepoints from 172 ranges (spanning a search area of 1020)
			}
			case 0x01: // [1] 043D - 0838
			{
				if (u'\u0460' > c || c > u'\u0556')
					return false;
				
				switch ((static_cast<uint_least64_t>(c) - 0x460ull) / 0x40ull)
				{
					case 0x00: return c <= u'\u049E' && (1ull << (static_cast<uint_least64_t>(c) - 0x460u)) & 0x5555540155555555ull;
					case 0x01: return c <= u'\u04DE' && (1ull << (static_cast<uint_least64_t>(c) - 0x4A0u)) & 0x55552AAB55555555ull;
					case 0x02: return c <= u'\u051E' && (static_cast<uint_least32_t>(c) % 2u) == 0u;
					case 0x03: return (1ull << (static_cast<uint_least64_t>(c) - 0x520u)) & 0x7FFFFFFFFE5555ull;
					MUU_NO_DEFAULT_CASE;
				}
				// 138 codepoints from 100 ranges (spanning a search area of 1020)
			}
			case 0x04: // [4] 1031 - 142C
			{
				if (u'\u10A0' > c || c > u'\u13F5')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x000020BFFFFFFFFFu,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0xFFFFFFFFFFFFFFFFu,	0x00000000003FFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x10A0ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x10A0ull) % 0x40ull));
				// 126 codepoints from 4 ranges (spanning a search area of 1020)
			}
			case 0x07: // [7] 1C25 - 2020
			{
				if (u'\u1C90' > c || c > u'\u1FFB')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000E7FFFFFFFFFFu,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x5555000000000000u,	0x5555555555555555u,	0x5555555555555555u,
					0x5555555555554015u,	0xFF00555555555555u,	0x3F00FF00FF003F00u,	0x00000000FF00AA00u,
					0x0F000F0000000000u,	0x00000F001F000F00u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1C90ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x1C90ull) % 0x40ull));
				// 239 codepoints from 141 ranges (spanning a search area of 1020)
			}
			case 0x08: // [8] 2021 - 241C
			{
				if (u'\u2102' > c || c > u'\u2183')
					return false;
				
				if (c == u'\u2183')
					return true;
				switch ((static_cast<uint_least64_t>(c) - 0x2102ull) / 0x40ull)
				{
					case 0x00: return c <= u'\u213F' && (1ull << (static_cast<uint_least64_t>(c) - 0x2102u)) & 0x3003CF540F89CE21ull;
					case 0x01: return u'\u2145' <= c && c <= u'\u216F'
						&& (1ull << (static_cast<uint_least64_t>(c) - 0x2145u)) & 0x7FFF8000001ull;
					MUU_NO_DEFAULT_CASE;
				}
				// 45 codepoints from 15 ranges (spanning a search area of 1020)
			}
			case 0x09: return u'\u24B6' <= c && c <= u'\u24CF';
			case 0x0A: return u'\u2C00' <= c;
			case 0x0B: // [11] 2C15 - 3010
			{
				if (c > u'\u2CF2')
					return false;
				MUU_ASSUME(u'\u2C15' <= c);
				
				switch ((static_cast<uint_least64_t>(c) - 0x2C15ull) / 0x40ull)
				{
					case 0x00: return c <= u'\u2C2E';
					case 0x01: return u'\u2C60' <= c && (1ull << (static_cast<uint_least64_t>(c) - 0x2C60u)) & 0x155555C025EA9Dull;
					case 0x02: return u'\u2C96' <= c && (static_cast<uint_least32_t>(c) % 2u) == 0u;
					case 0x03: return u'\u2CD6' <= c && (1u << (static_cast<uint_least32_t>(c) - 0x2CD6u)) & 0x10A01555u;
					MUU_NO_DEFAULT_CASE;
				}
				// 94 codepoints from 62 ranges (spanning a search area of 1020)
			}
			case 0x29: // [41] A39D - A798
			{
				if (u'\uA640' > c)
					return false;
				MUU_ASSUME(c <= u'\uA798');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000155555555555u,	0x0000000005555555u,	0x0000000000000000u,	0x5554555400000000u,
					0x6A00555555555555u,	0x0000000001452855u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA640ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				// 89 codepoints from 88 ranges (spanning a search area of 1020)
			}
			case 0x2A: // [42] A799 - AB94
			{
				if (u'\uA79A' > c || c > u'\uA7F5')
					return false;
				
				return c == u'\uA7F5'
					|| (c <= u'\uA7C9' && (1ull << (static_cast<uint_least64_t>(c) - 0xA79Au)) & 0xBD1557DF5555ull);
			}
			case 0x3F: return u'\uFF21' <= c;
			MUU_NO_DEFAULT_CASE;
		}
		// 1164 codepoints from 603 ranges (spanning a search area of 65536)
	}

	/// \brief		Returns true if a UTF-16 code unit is an lowercase code point.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_lowercase(char16_t c) noexcept
	{
		if (u'a' > c || c > u'\uFF5A')
			return false;
		
		const auto child_index_0 = (static_cast<uint_least64_t>(c) - 0x61ull) / 0x3FCull;
		if ((1ull << child_index_0) & 0x3FFFF1FFFFFFF06Cull)
			return false;
		switch (child_index_0)
		{
			case 0x00: // [0] 0061 - 045C
			{
				MUU_ASSUME(u'a' <= c && c <= u'\u045C');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000000003FFFFFFu,	0xC000000002100200u,	0x555555557FBFFFFFu,	0x555555AAAAD55555u,
					0x27121894EA555555u,	0x5AAAA92073289695u,	0x555555555514D555u,	0xFFFFD542C9FD5555u,
					0xFFF7FFFFFFFFFFFFu,	0x8000000180FFFFFFu,	0x000000000000000Fu,	0x0000001000000000u,
					0x000080001E450000u,	0x5571BFFFFFFFF800u,	0x000000000C97D555u,	0x0FFFFFFFFFFF8000u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x61ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x61ull) % 0x40ull));
				// 447 codepoints from 175 ranges (spanning a search area of 1020)
			}
			case 0x01: // [1] 045D - 0858
			{
				if (c > u'\u0588')
					return false;
				MUU_ASSUME(u'\u045D' <= c);
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x5555401555555557u,	0x5556AAA555555555u,	0x5555555555555555u,	0x0000000000055555u,
					0x00000FFFFFFFFFF8u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x45Dull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x45Dull) % 0x40ull));
				// 144 codepoints from 101 ranges (spanning a search area of 1020)
			}
			case 0x04: return (u'\u10D0' <= c && c <= u'\u10FA') || (u'\u10FD' <= c && c <= u'\u10FF') || (u'\u13F8' <= c && c <= u'\u13FD');
			case 0x07: // [7] 1C45 - 2040
			{
				if (u'\u1C80' > c || c > u'\u1FF7')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000000000001FFu,	0x0000000000000000u,	0xFFFFFFFFFFFFFFFFu,	0xFFFFFFFFFFFFFFFFu,
					0xFFFFFFFFFFFFFFFFu,	0x0000000000000000u,	0xAAAAAAAAAAAAAAAAu,	0xAAAAAAAAAAAAAAAAu,
					0xAAAAAAAABFEAAAAAu,	0xAAAAAAAAAAAAAAAAu,	0x00FF00FF003F00FFu,	0x3FFF00FF00FF003Fu,
					0x40DF00FF00FF00FFu,	0x00DC00FF00CF00DCu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x1C80ull) / 0x40ull]
					& (0x1ull << (static_cast<uint_least64_t>(c) % 0x40ull));
				// 455 codepoints from 146 ranges (spanning a search area of 1020)
			}
			case 0x08: // [8] 2041 - 243C
			{
				if (u'\u2071' > c || c > u'\u2184')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x00000FFF80004001u,	0x0000000000000000u,	0x4000000462000000u,	0x8000000021E01908u,
					0x0000000000087FFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0x2071ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0x2071ull) % 0x40ull));
				// 46 codepoints from 14 ranges (spanning a search area of 1020)
			}
			case 0x09: return u'\u24D0' <= c && c <= u'\u24E9';
			case 0x0A: return u'\u2C30' <= c;
			case 0x0B: // [11] 2C35 - 3030
			{
				if (c > u'\u2D2D')
					return false;
				MUU_ASSUME(u'\u2C35' <= c);
				
				switch ((static_cast<uint_least64_t>(c) - 0x2C35ull) / 0x40ull)
				{
					case 0x00: return (1ull << (static_cast<uint_least64_t>(c) - 0x2C35u)) & 0xD0AB13FFFFFFFFFFull;
					case 0x01: return u'\u2C76' <= c && c <= u'\u2CB3'
						&& (1ull << (static_cast<uint_least64_t>(c) - 0x2C76u)) & 0x2AAAAAAAAAAAA8FFull;
					case 0x02: return c <= u'\u2CF3' && (1ull << (static_cast<uint_least64_t>(c) - 0x2CB5u)) & 0x4280D55555555555ull;
					case 0x03: return (u'\u2D00' <= c && c <= u'\u2D25') || c == u'\u2D27' || c == u'\u2D2D';
					MUU_NO_DEFAULT_CASE;
				}
				// 153 codepoints from 65 ranges (spanning a search area of 1020)
			}
			case 0x29: // [41] A3BD - A7B8
			{
				if (u'\uA641' > c || c > u'\uA7B7')
					return false;
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0x0000155555555555u,	0x000000001D555555u,	0x0000000000000000u,	0x5555D55400000000u,
					0x4AFFD55555555555u,	0x00504155555D2855u,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA641ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA641ull) % 0x40ull));
				// 114 codepoints from 99 ranges (spanning a search area of 1020)
			}
			case 0x2A: // [42] A7B9 - ABB4
			{
				MUU_ASSUME(u'\uA7B9' <= c && c <= u'\uABB4');
				
				constexpr uint_least64_t bitmask_table_1[] = 
				{
					0xA000000000028455u,	0x0000000000000003u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,	0x0000000000000000u,
					0x0000000000000000u,	0xFF80000000000000u,	0xFF80FFFBFFFFFFFFu,	0x0FFFFFFFFFFFFFFFu,
				};
				return bitmask_table_1[(static_cast<uint_least64_t>(c) - 0xA7B9ull) / 0x40ull]
					& (0x1ull << ((static_cast<uint_least64_t>(c) - 0xA7B9ull) % 0x40ull));
				// 136 codepoints from 12 ranges (spanning a search area of 1020)
			}
			case 0x2B: return c <= u'\uABBF';
			case 0x3E: return u'\uFB00' <= c && c <= u'\uFB17' && (1u << (static_cast<uint_least32_t>(c) - 0xFB00u)) & 0xF8007Fu;
			case 0x3F: return u'\uFF41' <= c;
			MUU_NO_DEFAULT_CASE;
		}
		// 1627 codepoints from 618 ranges (spanning a search area of 65536)
	}

	/// \brief		Returns true if a UTF-16 code unit is a code point boundary.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_code_point_boundary(char16_t c) noexcept
	{
		return c <= 0xDBFFu || c >= 0xE000u;
	}

	/// \brief		Returns true if a UTF-16 code unit is in-and-of-itself a valid code point.
	/// \ingroup	characters
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_code_point(char16_t c) noexcept
	{
		return c <= 0xD7FFu || c >= 0xE000u;
	}

}
MUU_NAMESPACE_END
