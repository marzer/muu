// This file is a part of muu and is subject to the the terms of the MIT license.
// Copyright (c) Mark Gillard <mark.gillard@outlook.com.au>
// See https://github.com/marzer/muu/blob/master/LICENSE for the full license text.
// SPDX-License-Identifier: MIT
//-----
// this file was generated by generate_unicode_functions.py - do not modify it directly
// clang-format off

#pragma once
#include "../fwd.h"
#include "header_start.h"
MUU_DISABLE_SWITCH_WARNINGS;
#if !MUU_GCC || MUU_GCC >= 9
	MUU_FORCE_NDEBUG_OPTIMIZATIONS;
#else
	MUU_PRAGMA_GCC(optimize("O1"))
#endif

namespace muu
{
	/// \addtogroup strings
	/// @{

	/// \addtogroup code_units
	/// @{

	/// \addtogroup	is_ascii_code_point	is_ascii_code_point()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a valid code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_code_point(char8_t c) noexcept
	{
		return c <= u8'\x7F';
	}

	/// @}

	/// \addtogroup	is_ascii_hyphen	is_ascii_hyphen()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a hyphen code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_hyphen(char8_t c) noexcept
	{
		return c == u8'-';
	}

	/// @}

	/// \addtogroup	is_ascii_letter	is_ascii_letter()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a letter code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_letter(char8_t c) noexcept
	{
		return (u8'A' <= c && c <= u8'Z') || (u8'a' <= c && c <= u8'z');
	}

	/// @}

	/// \addtogroup	is_ascii_lowercase	is_ascii_lowercase()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a lowercase code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_lowercase(char8_t c) noexcept
	{
		return u8'a' <= c && c <= u8'z';
	}

	/// @}

	/// \addtogroup	is_ascii_number	is_ascii_number()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a number code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_number(char8_t c) noexcept
	{
		return u8'0' <= c && c <= u8'9';
	}

	/// @}

	/// \addtogroup	is_ascii_uppercase	is_ascii_uppercase()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is an uppercase code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_uppercase(char8_t c) noexcept
	{
		return u8'A' <= c && c <= u8'Z';
	}

	/// @}

	/// \addtogroup	is_ascii_whitespace	is_ascii_whitespace()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a whitespace code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_whitespace(char8_t c) noexcept
	{
		return (u8'\t' <= c && c <= u8'\r') || c == u8' ';
	}

	/// @}

	/// \addtogroup	is_non_ascii_code_point	is_non_ascii_code_point()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a valid code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_code_point(char8_t c) noexcept
	{
		MUU_UNUSED(c);
		return false;
	}

	/// @}

	/// \addtogroup	is_non_ascii_hyphen	is_non_ascii_hyphen()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a hyphen code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_hyphen(char8_t c) noexcept
	{
		MUU_UNUSED(c);
		return false;
	}

	/// @}

	/// \addtogroup	is_non_ascii_letter	is_non_ascii_letter()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a letter code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_letter(char8_t c) noexcept
	{
		MUU_UNUSED(c);
		return false;
	}

	/// @}

	/// \addtogroup	is_non_ascii_lowercase	is_non_ascii_lowercase()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a lowercase code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_lowercase(char8_t c) noexcept
	{
		MUU_UNUSED(c);
		return false;
	}

	/// @}

	/// \addtogroup	is_non_ascii_number	is_non_ascii_number()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a number code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_number(char8_t c) noexcept
	{
		MUU_UNUSED(c);
		return false;
	}

	/// @}

	/// \addtogroup	is_non_ascii_uppercase	is_non_ascii_uppercase()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is an uppercase code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_uppercase(char8_t c) noexcept
	{
		MUU_UNUSED(c);
		return false;
	}

	/// @}

	/// \addtogroup	is_non_ascii_whitespace	is_non_ascii_whitespace()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a whitespace code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_whitespace(char8_t c) noexcept
	{
		MUU_UNUSED(c);
		return false;
	}

	/// @}

	/// \addtogroup	is_not_code_point	is_not_code_point()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is not a valid code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_code_point(char8_t c) noexcept
	{
		return !is_ascii_code_point(c) && !is_non_ascii_code_point(c);
	}

	/// @}

	/// \addtogroup	is_not_hyphen	is_not_hyphen()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is not a hyphen code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_hyphen(char8_t c) noexcept
	{
		return !is_ascii_hyphen(c) && !is_non_ascii_hyphen(c);
	}

	/// @}

	/// \addtogroup	is_not_letter	is_not_letter()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is not a letter code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_letter(char8_t c) noexcept
	{
		return !is_ascii_letter(c) && !is_non_ascii_letter(c);
	}

	/// @}

	/// \addtogroup	is_not_lowercase	is_not_lowercase()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is not a lowercase code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_lowercase(char8_t c) noexcept
	{
		return !is_ascii_lowercase(c) && !is_non_ascii_lowercase(c);
	}

	/// @}

	/// \addtogroup	is_not_number	is_not_number()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is not a number code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_number(char8_t c) noexcept
	{
		return !is_ascii_number(c) && !is_non_ascii_number(c);
	}

	/// @}

	/// \addtogroup	is_not_uppercase	is_not_uppercase()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is not an uppercase code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_uppercase(char8_t c) noexcept
	{
		return !is_ascii_uppercase(c) && !is_non_ascii_uppercase(c);
	}

	/// @}

	/// \addtogroup	is_not_whitespace	is_not_whitespace()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is not a whitespace code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_whitespace(char8_t c) noexcept
	{
		return !is_ascii_whitespace(c) && !is_non_ascii_whitespace(c);
	}

	/// @}

	/// \addtogroup	is_code_point	is_code_point()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a valid code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_code_point(char8_t c) noexcept
	{
		return c <= u8'\x7F';
	}

	/// @}

	/// \addtogroup	is_code_point_boundary	is_code_point_boundary()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a code point boundary.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_code_point_boundary(char8_t c) noexcept
	{
		return (c & 0b11000000u) != 0b10000000u;
	}

	/// @}

	/// \addtogroup	is_combining_mark	is_combining_mark()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a combining mark code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_combining_mark(char8_t c) noexcept
	{
		MUU_UNUSED(c);
		return false;
	}

	/// @}

	/// \addtogroup	is_decimal_digit	is_decimal_digit()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a decimal digit code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_decimal_digit(char8_t c) noexcept
	{
		return u8'0' <= c && c <= u8'9';
	}

	/// @}

	/// \addtogroup	is_hexadecimal_digit	is_hexadecimal_digit()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a hexadecimal digit code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_hexadecimal_digit(char8_t c) noexcept
	{
		return u8'0' <= c && c <= u8'f' && (1ull << (static_cast<uint_least64_t>(c) - 0x30u)) & 0x7E0000007E03FFull;
	}

	/// @}

	/// \addtogroup	is_hyphen	is_hyphen()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a hyphen code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_hyphen(char8_t c) noexcept
	{
		return is_ascii_hyphen(c) || is_non_ascii_hyphen(c);
	}

	/// @}

	/// \addtogroup	is_letter	is_letter()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a letter code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_letter(char8_t c) noexcept
	{
		return is_ascii_letter(c) || is_non_ascii_letter(c);
	}

	/// @}

	/// \addtogroup	is_lowercase	is_lowercase()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a lowercase code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_lowercase(char8_t c) noexcept
	{
		return is_ascii_lowercase(c) || is_non_ascii_lowercase(c);
	}

	/// @}

	/// \addtogroup	is_number	is_number()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a number code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_number(char8_t c) noexcept
	{
		return is_ascii_number(c) || is_non_ascii_number(c);
	}

	/// @}

	/// \addtogroup	is_octal_digit	is_octal_digit()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is an octal digit code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_octal_digit(char8_t c) noexcept
	{
		return u8'0' <= c && c <= u8'7';
	}

	/// @}

	/// \addtogroup	is_uppercase	is_uppercase()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is an uppercase code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_uppercase(char8_t c) noexcept
	{
		return is_ascii_uppercase(c) || is_non_ascii_uppercase(c);
	}

	/// @}

	/// \addtogroup	is_whitespace	is_whitespace()
	/// @{

	/// \brief		Returns true if a UTF-8 code unit is a whitespace code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_whitespace(char8_t c) noexcept
	{
		return is_ascii_whitespace(c) || is_non_ascii_whitespace(c);
	}

	/// @}

	/** @} */	// strings::code_units
	/** @} */	// strings
}

#if !MUU_GCC || MUU_GCC >= 9
	MUU_RESET_NDEBUG_OPTIMIZATIONS;
#endif
#include "header_end.h"
// clang-format on

