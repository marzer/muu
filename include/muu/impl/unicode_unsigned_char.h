// This file is a part of muu and is subject to the the terms of the MIT license.
// Copyright (c) 2020 Mark Gillard <mark.gillard@outlook.com.au>
// See https://github.com/marzer/muu/blob/master/LICENSE for the full license text.
// SPDX-License-Identifier: MIT
//-----
// this file was generated by generate_unicode_functions.py - do not modify it directly

/// \file
/// \attention These are not the droids you are looking for. Try \ref strings instead.

#pragma once
#include "../../muu/fwd.h"

MUU_IMPL_NAMESPACE_START
{
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_ascii_whitespace(unsigned char c) noexcept
	{
		return c >= 0x09u && c <= 0x20u && (1u << (static_cast<uint_least32_t>(c) - 0x9u)) & 0x80001Fu;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_non_ascii_whitespace(unsigned char c) noexcept
	{
		return c >= 0x85u && c <= 0xA0u && (1u << (static_cast<uint_least32_t>(c) - 0x85u)) & 0x8000001u;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_whitespace(unsigned char c) noexcept
	{
		return is_ascii_whitespace(c) || is_non_ascii_whitespace(c);
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_not_whitespace(unsigned char c) noexcept
	{
		return !is_whitespace(c);
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_ascii_letter(unsigned char c) noexcept
	{
		return c >= 0x41u && c <= 0x7Au && (1ull << (static_cast<uint_least64_t>(c) - 0x41u)) & 0x3FFFFFF03FFFFFFull;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_non_ascii_letter(unsigned char c) noexcept
	{
		if (c < 0xAAu)
			return false;
		
		switch ((static_cast<uint_least64_t>(c) - 0xAAull) / 0x40ull)
		{
			case 0x00: return (1ull << (static_cast<uint_least64_t>(c) - 0xAAu)) & 0xFFFFDFFFFFC10801ull;
			case 0x01: return c != 0xF7u;
			MUU_NO_DEFAULT_CASE;
		}
		// 65 codepoints from 6 ranges (spanning a search area of 86)
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_letter(unsigned char c) noexcept
	{
		return is_ascii_letter(c) || is_non_ascii_letter(c);
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_ascii_number(unsigned char c) noexcept
	{
		return c >= 0x30u && c <= 0x39u;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_non_ascii_number(unsigned char c) noexcept
	{
		(void)c;
		return false;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_number(unsigned char c) noexcept
	{
		return is_ascii_number(c) || is_non_ascii_number(c);
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_combining_mark(unsigned char c) noexcept
	{
		(void)c;
		return false;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_octal_digit(unsigned char c) noexcept
	{
		return c >= 0x30u && c <= 0x37u;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_decimal_digit(unsigned char c) noexcept
	{
		return c >= 0x30u && c <= 0x39u;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_hexadecimal_digit(unsigned char c) noexcept
	{
		return c >= 0x30u && c <= 0x66u && (1ull << (static_cast<uint_least64_t>(c) - 0x30u)) & 0x7E0000007E03FFull;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_code_point_boundary(unsigned char c) noexcept
	{
		return (c & 0b11000000u) != 0b10000000u;
	}

}
MUU_IMPL_NAMESPACE_END
