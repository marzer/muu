// This file is a part of muu and is subject to the the terms of the MIT license.
// Copyright (c) 2020 Mark Gillard <mark.gillard@outlook.com.au>
// See https://github.com/marzer/muu/blob/master/LICENSE for the full license text.
// SPDX-License-Identifier: MIT
//-----
// this file was generated by generate_unicode_functions.py - do not modify it directly

#pragma once
#include "../../muu/fwd.h"

MUU_PUSH_WARNINGS
MUU_DISABLE_SPAM_WARNINGS

MUU_IMPL_NAMESPACE_START
{
	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_ascii(unsigned char c) noexcept
	{
		return c <= 0x7Fu;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_unicode(unsigned char c) noexcept
	{
		return 0x80u <= c;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_ascii_whitespace(unsigned char c) noexcept
	{
		return (0x09u <= c && c <= 0x0Du) || c == 0x20u;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_unicode_whitespace(unsigned char c) noexcept
	{
		return c == 0x85u || c == 0xA0u;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_whitespace(unsigned char c) noexcept
	{
		return is_ascii_whitespace(c) || is_unicode_whitespace(c);
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_not_whitespace(unsigned char c) noexcept
	{
		return !is_whitespace(c);
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_ascii_letter(unsigned char c) noexcept
	{
		return (0x41u <= c && c <= 0x5Au) || (0x61u <= c && c <= 0x7Au);
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_unicode_letter(unsigned char c) noexcept
	{
		if (0xAAu > c)
			return false;
		MUU_ASSUME(c <= 0xFFu);
		
		switch ((static_cast<uint_least64_t>(c) - 0xAAull) / 0x40ull)
		{
			case 0x00: return (1ull << (static_cast<uint_least64_t>(c) - 0xAAu)) & 0xFFFFDFFFFFC10801ull;
			case 0x01: return c != 0xF7u;
			MUU_NO_DEFAULT_CASE;
		}
		// 65 codepoints from 6 ranges (spanning a search area of 256)
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_letter(unsigned char c) noexcept
	{
		return is_ascii_letter(c) || is_unicode_letter(c);
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_ascii_number(unsigned char c) noexcept
	{
		return 0x30u <= c && c <= 0x39u;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_unicode_number(unsigned char c) noexcept
	{
		(void)c;
		return false;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_number(unsigned char c) noexcept
	{
		return is_ascii_number(c) || is_unicode_number(c);
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_ascii_hyphen(unsigned char c) noexcept
	{
		return c == 0x2Du;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_unicode_hyphen(unsigned char c) noexcept
	{
		return c == 0xADu;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_hyphen(unsigned char c) noexcept
	{
		return is_ascii_hyphen(c) || is_unicode_hyphen(c);
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_combining_mark(unsigned char c) noexcept
	{
		(void)c;
		return false;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_octal_digit(unsigned char c) noexcept
	{
		return 0x30u <= c && c <= 0x37u;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_decimal_digit(unsigned char c) noexcept
	{
		return 0x30u <= c && c <= 0x39u;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_hexadecimal_digit(unsigned char c) noexcept
	{
		return 0x30u <= c && c <= 0x66u && (1ull << (static_cast<uint_least64_t>(c) - 0x30u)) & 0x7E0000007E03FFull;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_uppercase(unsigned char c) noexcept
	{
		return (0x41u <= c && c <= 0x5Au) || (0xC0u <= c && c <= 0xD6u) || (0xD8u <= c && c <= 0xDEu);
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_lowercase(unsigned char c) noexcept
	{
		if (0x61u > c)
			return false;
		MUU_ASSUME(c <= 0xFFu);
		
		switch ((static_cast<uint_least64_t>(c) - 0x61ull) / 0x40ull)
		{
			case 0x00: return c <= 0x7Au;
			case 0x01: return 0xAAu <= c && (1ull << (static_cast<uint_least64_t>(c) - 0xAAu)) & 0x60000000010801ull;
			case 0x02: return c != 0xF7u;
			MUU_NO_DEFAULT_CASE;
		}
		// 61 codepoints from 6 ranges (spanning a search area of 256)
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_code_point_boundary(unsigned char c) noexcept
	{
		return (c & 0b11000000u) != 0b10000000u;
	}

	[[nodiscard]]
	MUU_ATTR(const)
	constexpr bool is_code_point(unsigned char c) noexcept
	{
		return c <= 0x007Fu;
	}

}
MUU_IMPL_NAMESPACE_END

MUU_POP_WARNINGS // MUU_DISABLE_SPAM_WARNINGS
