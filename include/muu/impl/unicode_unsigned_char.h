// This file is a part of muu and is subject to the the terms of the MIT license.
// Copyright (c) Mark Gillard <mark.gillard@outlook.com.au>
// See https://github.com/marzer/muu/blob/master/LICENSE for the full license text.
// SPDX-License-Identifier: MIT
//-----
// this file was generated by generate_unicode_functions.py - do not modify it directly
// clang-format off

#pragma once
#include "../fwd.h"
#include "header_start.h"
MUU_DISABLE_SWITCH_WARNINGS;
#if !MUU_GCC || MUU_GCC >= 9
	MUU_FORCE_NDEBUG_OPTIMIZATIONS;
#else
	MUU_PRAGMA_GCC(optimize("O1"))
#endif

namespace muu
{
	/// \addtogroup strings
	/// @{

	/// \addtogroup code_units
	/// @{

	/// \addtogroup	is_ascii_code_point	is_ascii_code_point()
	/// @{

	/// \brief		Returns true if a character is a valid code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_code_point(unsigned char c) noexcept
	{
		return c <= 0x7Fu;
	}

	/// @}

	/// \addtogroup	is_ascii_hyphen	is_ascii_hyphen()
	/// @{

	/// \brief		Returns true if a character is a hyphen code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_hyphen(unsigned char c) noexcept
	{
		return c == 0x2Du;
	}

	/// @}

	/// \addtogroup	is_ascii_letter	is_ascii_letter()
	/// @{

	/// \brief		Returns true if a character is a letter code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_letter(unsigned char c) noexcept
	{
		return (0x41u <= c && c <= 0x5Au) || (0x61u <= c && c <= 0x7Au);
	}

	/// @}

	/// \addtogroup	is_ascii_lowercase	is_ascii_lowercase()
	/// @{

	/// \brief		Returns true if a character is a lowercase code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_lowercase(unsigned char c) noexcept
	{
		return 0x61u <= c && c <= 0x7Au;
	}

	/// @}

	/// \addtogroup	is_ascii_number	is_ascii_number()
	/// @{

	/// \brief		Returns true if a character is a number code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_number(unsigned char c) noexcept
	{
		return 0x30u <= c && c <= 0x39u;
	}

	/// @}

	/// \addtogroup	is_ascii_uppercase	is_ascii_uppercase()
	/// @{

	/// \brief		Returns true if a character is an uppercase code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_uppercase(unsigned char c) noexcept
	{
		return 0x41u <= c && c <= 0x5Au;
	}

	/// @}

	/// \addtogroup	is_ascii_whitespace	is_ascii_whitespace()
	/// @{

	/// \brief		Returns true if a character is a whitespace code point from the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_ascii_whitespace(unsigned char c) noexcept
	{
		return (0x09u <= c && c <= 0x0Du) || c == 0x20u;
	}

	/// @}

	/// \addtogroup	is_non_ascii_code_point	is_non_ascii_code_point()
	/// @{

	/// \brief		Returns true if a character is a valid code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_code_point(unsigned char c) noexcept
	{
		MUU_UNUSED(c);
		return false;
	}

	/// @}

	/// \addtogroup	is_non_ascii_hyphen	is_non_ascii_hyphen()
	/// @{

	/// \brief		Returns true if a character is a hyphen code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_hyphen(unsigned char c) noexcept
	{
		MUU_UNUSED(c);
		return false;
	}

	/// @}

	/// \addtogroup	is_non_ascii_letter	is_non_ascii_letter()
	/// @{

	/// \brief		Returns true if a character is a letter code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_letter(unsigned char c) noexcept
	{
		MUU_UNUSED(c);
		return false;
	}

	/// @}

	/// \addtogroup	is_non_ascii_lowercase	is_non_ascii_lowercase()
	/// @{

	/// \brief		Returns true if a character is a lowercase code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_lowercase(unsigned char c) noexcept
	{
		MUU_UNUSED(c);
		return false;
	}

	/// @}

	/// \addtogroup	is_non_ascii_number	is_non_ascii_number()
	/// @{

	/// \brief		Returns true if a character is a number code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_number(unsigned char c) noexcept
	{
		MUU_UNUSED(c);
		return false;
	}

	/// @}

	/// \addtogroup	is_non_ascii_uppercase	is_non_ascii_uppercase()
	/// @{

	/// \brief		Returns true if a character is an uppercase code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_uppercase(unsigned char c) noexcept
	{
		MUU_UNUSED(c);
		return false;
	}

	/// @}

	/// \addtogroup	is_non_ascii_whitespace	is_non_ascii_whitespace()
	/// @{

	/// \brief		Returns true if a character is a whitespace code point from outside the ASCII range.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_non_ascii_whitespace(unsigned char c) noexcept
	{
		MUU_UNUSED(c);
		return false;
	}

	/// @}

	/// \addtogroup	is_not_code_point	is_not_code_point()
	/// @{

	/// \brief		Returns true if a character is not a valid code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_code_point(unsigned char c) noexcept
	{
		return !is_ascii_code_point(c) && !is_non_ascii_code_point(c);
	}

	/// @}

	/// \addtogroup	is_not_hyphen	is_not_hyphen()
	/// @{

	/// \brief		Returns true if a character is not a hyphen code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_hyphen(unsigned char c) noexcept
	{
		return !is_ascii_hyphen(c) && !is_non_ascii_hyphen(c);
	}

	/// @}

	/// \addtogroup	is_not_letter	is_not_letter()
	/// @{

	/// \brief		Returns true if a character is not a letter code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_letter(unsigned char c) noexcept
	{
		return !is_ascii_letter(c) && !is_non_ascii_letter(c);
	}

	/// @}

	/// \addtogroup	is_not_lowercase	is_not_lowercase()
	/// @{

	/// \brief		Returns true if a character is not a lowercase code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_lowercase(unsigned char c) noexcept
	{
		return !is_ascii_lowercase(c) && !is_non_ascii_lowercase(c);
	}

	/// @}

	/// \addtogroup	is_not_number	is_not_number()
	/// @{

	/// \brief		Returns true if a character is not a number code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_number(unsigned char c) noexcept
	{
		return !is_ascii_number(c) && !is_non_ascii_number(c);
	}

	/// @}

	/// \addtogroup	is_not_uppercase	is_not_uppercase()
	/// @{

	/// \brief		Returns true if a character is not an uppercase code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_uppercase(unsigned char c) noexcept
	{
		return !is_ascii_uppercase(c) && !is_non_ascii_uppercase(c);
	}

	/// @}

	/// \addtogroup	is_not_whitespace	is_not_whitespace()
	/// @{

	/// \brief		Returns true if a character is not a whitespace code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_not_whitespace(unsigned char c) noexcept
	{
		return !is_ascii_whitespace(c) && !is_non_ascii_whitespace(c);
	}

	/// @}

	/// \addtogroup	is_code_point	is_code_point()
	/// @{

	/// \brief		Returns true if a character is a valid code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_code_point(unsigned char c) noexcept
	{
		return c <= 0x7Fu;
	}

	/// @}

	/// \addtogroup	is_code_point_boundary	is_code_point_boundary()
	/// @{

	/// \brief		Returns true if a character is a code point boundary.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_code_point_boundary(unsigned char c) noexcept
	{
		return (c & 0b11000000u) != 0b10000000u;
	}

	/// @}

	/// \addtogroup	is_combining_mark	is_combining_mark()
	/// @{

	/// \brief		Returns true if a character is a combining mark code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_combining_mark(unsigned char c) noexcept
	{
		MUU_UNUSED(c);
		return false;
	}

	/// @}

	/// \addtogroup	is_decimal_digit	is_decimal_digit()
	/// @{

	/// \brief		Returns true if a character is a decimal digit code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_decimal_digit(unsigned char c) noexcept
	{
		return 0x30u <= c && c <= 0x39u;
	}

	/// @}

	/// \addtogroup	is_hexadecimal_digit	is_hexadecimal_digit()
	/// @{

	/// \brief		Returns true if a character is a hexadecimal digit code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_hexadecimal_digit(unsigned char c) noexcept
	{
		return 0x30u <= c && c <= 0x66u && (1ull << (static_cast<uint_least64_t>(c) - 0x30u)) & 0x7E0000007E03FFull;
	}

	/// @}

	/// \addtogroup	is_hyphen	is_hyphen()
	/// @{

	/// \brief		Returns true if a character is a hyphen code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_hyphen(unsigned char c) noexcept
	{
		return is_ascii_hyphen(c) || is_non_ascii_hyphen(c);
	}

	/// @}

	/// \addtogroup	is_letter	is_letter()
	/// @{

	/// \brief		Returns true if a character is a letter code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_letter(unsigned char c) noexcept
	{
		return is_ascii_letter(c) || is_non_ascii_letter(c);
	}

	/// @}

	/// \addtogroup	is_lowercase	is_lowercase()
	/// @{

	/// \brief		Returns true if a character is a lowercase code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_lowercase(unsigned char c) noexcept
	{
		return is_ascii_lowercase(c) || is_non_ascii_lowercase(c);
	}

	/// @}

	/// \addtogroup	is_number	is_number()
	/// @{

	/// \brief		Returns true if a character is a number code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_number(unsigned char c) noexcept
	{
		return is_ascii_number(c) || is_non_ascii_number(c);
	}

	/// @}

	/// \addtogroup	is_octal_digit	is_octal_digit()
	/// @{

	/// \brief		Returns true if a character is an octal digit code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_octal_digit(unsigned char c) noexcept
	{
		return 0x30u <= c && c <= 0x37u;
	}

	/// @}

	/// \addtogroup	is_uppercase	is_uppercase()
	/// @{

	/// \brief		Returns true if a character is an uppercase code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_uppercase(unsigned char c) noexcept
	{
		return is_ascii_uppercase(c) || is_non_ascii_uppercase(c);
	}

	/// @}

	/// \addtogroup	is_whitespace	is_whitespace()
	/// @{

	/// \brief		Returns true if a character is a whitespace code point.
	MUU_NODISCARD
	MUU_ATTR(const)
	constexpr bool is_whitespace(unsigned char c) noexcept
	{
		return is_ascii_whitespace(c) || is_non_ascii_whitespace(c);
	}

	/// @}

	/** @} */	// strings::code_units
	/** @} */	// strings
}

#if !MUU_GCC || MUU_GCC >= 9
	MUU_RESET_NDEBUG_OPTIMIZATIONS;
#endif
#include "header_end.h"
// clang-format on

